// Generated by CoffeeScript 1.7.1
var AbsCom, comFactory;

AbsCom = function(params) {
  var backRect, childBgWrapGroup, childDropWrapGroup, childWrapGroup, comGroup, comMainImage, comStatusImage, corner, isDropBgRect, isDropStrokeRect, k, leftBottom, leftTop, rightBottom, rightTop, tempImageObj, _config, _corners, _id, _params, _ref;
  _params = params || {
    kind: 'ecs'
  };
  _id = tools.rand();
  _config = {
    x: 130,
    y: 130,
    draggable: true,
    category: 'component',
    kind: _params.kind,
    name: "" + _params.kind + (_id.substr(0, 4)),
    id: "" + _params.kind + _id,
    tname: _id
  };
  _params = $.extend({}, _config, _params);
  _corners = [];
  comGroup = new kk.Group({
    x: _params.x,
    y: _params.y,
    draggable: _params.draggable,
    name: _params.name,
    id: _params.id,
    category: _params.category,
    kind: _params.kind,
    tname: _params.tname
  });
  backRect = new kk.Rect({
    width: def.component.outerWidth,
    height: def.component.outerWidth,
    fill: "#000",
    opacity: 0.1
  });
  childBgWrapGroup = new kk.Group({
    name: 'combg',
    visible: false
  });
  childBgWrapGroup.add(backRect);
  comGroup.add(childBgWrapGroup);
  isDropBgRect = new kk.Rect({
    x: 1,
    y: 1,
    width: def.component.outerWidth - 1,
    height: def.component.outerWidth - 1,
    fill: def.color.orange2,
    cornerRadius: 8,
    opacity: 0.3
  });
  isDropStrokeRect = new kk.Rect({
    width: def.component.outerWidth,
    height: def.component.outerWidth,
    stroke: def.color.orange1,
    cornerRadius: 8
  });
  childDropWrapGroup = new kk.Group({
    name: 'isdrop',
    visible: false
  });
  childDropWrapGroup.add(isDropBgRect);
  childDropWrapGroup.add(isDropStrokeRect);
  comGroup.add(childDropWrapGroup);
  childDropWrapGroup.moveToBottom();
  leftTop = new kk.Group({
    x: def.component.leftTopCorner.x,
    y: def.component.leftTopCorner.y,
    name: 'comcorner',
    visible: false
  });
  leftTop.circle = new kk.Circle({
    radius: def.component.corner.radius,
    fill: '#a7b3c4'
  });
  leftTop.icon = new kk.Image({
    x: def.component.leftTopCorner.icox,
    y: def.component.leftTopCorner.icoy,
    image: global.images['layerInfo'],
    width: def.component.corner.width,
    height: def.component.corner.height
  });
  leftTop.add(leftTop.circle);
  leftTop.add(leftTop.icon);
  comGroup.add(leftTop);
  rightTop = new kk.Group({
    x: def.component.rightTopCorner.x,
    y: def.component.rightTopCorner.y,
    name: 'comcorner',
    visible: false
  });
  rightTop.circle = new kk.Circle({
    radius: def.component.corner.radius,
    fill: '#a7b3c4'
  });
  rightTop.icon = new kk.Image({
    x: def.component.rightTopCorner.icox,
    y: def.component.rightTopCorner.icoy,
    image: global.images['layerConnect'],
    width: def.component.corner.width,
    height: def.component.corner.height
  });
  rightTop.add(rightTop.circle);
  rightTop.add(rightTop.icon);
  comGroup.add(rightTop);
  leftBottom = new kk.Group({
    x: def.component.leftBottomCorner.x,
    y: def.component.leftBottomCorner.y,
    name: 'comcorner',
    visible: false
  });
  leftBottom.circle = new kk.Circle({
    radius: def.component.corner.radius,
    fill: '#a7b3c4'
  });
  leftBottom.icon = new kk.Image({
    x: def.component.leftBottomCorner.icox,
    y: def.component.leftBottomCorner.icoy,
    image: global.images['layerOperate'],
    width: def.component.corner.width,
    height: def.component.corner.height
  });
  leftBottom.add(leftBottom.circle);
  leftBottom.add(leftBottom.icon);
  comGroup.add(leftBottom);
  rightBottom = new kk.Group({
    x: def.component.rightBottomCorner.x,
    y: def.component.rightBottomCorner.y,
    name: 'comcorner',
    visible: false
  });
  rightBottom.circle = new kk.Circle({
    radius: def.component.corner.radius,
    fill: '#a7b3c4'
  });
  rightBottom.add(rightBottom.circle);
  if (comGroup.attrs.kind === 'ecs') {
    rightBottom.icon = new kk.Image({
      x: def.component.leftBottomCorner.icox,
      y: def.component.leftBottomCorner.icoy,
      image: global.images['comWDisk'],
      width: def.component.corner.width,
      height: def.component.corner.height
    });
    rightBottom.add(rightBottom.icon);
  }
  comGroup.add(rightBottom);
  tempImageObj = new Image();
  tempImageObj.src = resources.loadImages["" + _params.kind + "Icon"];
  comMainImage = new kk.Image({
    image: tempImageObj,
    width: def.component.width,
    height: def.component.height
  });
  childWrapGroup = new kk.Group({
    x: (def.component.outerWidth - def.component.width) / 2,
    y: (def.component.outerHeight - def.component.height) / 2 - 5
  });
  comStatusImage = new kk.Image({
    x: 5,
    y: 80,
    image: _params.status ? global.images["com" + _params.status] : global.images['comUnbound'],
    width: 14,
    height: 14
  });
  childWrapGroup.add(comMainImage);
  childWrapGroup.add(comStatusImage);
  _corners.push(childWrapGroup);
  comGroup.add(childWrapGroup);
  comGroup.images = {};
  comGroup.rects = {
    backRect: backRect,
    isdropRect: childDropWrapGroup
  };
  comGroup.corners = {
    leftTop: leftTop,
    rightTop: rightTop,
    leftBottom: leftBottom,
    rightBottom: rightBottom
  };
  comGroup.elements = {
    backGroup: childBgWrapGroup
  };
  comGroup.category = comGroup.attrs.category;
  comGroup.kind = comGroup.attrs.kind;
  comGroup.tname = _id;
  comGroup.images.main = comMainImage;
  comGroup.images.status = comStatusImage;
  comGroup.on('click tap', canFunc.onComClick);
  comGroup.on('dblclick dbltap', canFunc.onComDblclick);
  comGroup.on('mousedown', canFunc.onComMouseDown);
  comGroup.on('mouseover', canFunc.onComMouseOver);
  comGroup.on('mouseout', canFunc.onComMouseOut);
  comGroup.on('dragstart', canFunc.onComEntitiesDragStart);
  comGroup.on('dragmove', canFunc.onComEntitiesDragMove);
  comGroup.on('dragend', canFunc.onComEntitiesDragEnd);
  comGroup.corners.leftTop.on('click tap', canFunc.onComLeftTopMouseDown);
  comGroup.corners.rightTop.on('mousedown touchstart', canFunc.onComRightTopMouseDown);
  comGroup.corners.leftBottom.on('click tap', canFunc.onComLeftBottomMouseDown);
  if (comGroup.kind === 'ecs') {
    comGroup.corners.rightBottom.on('click tap', canFunc.onComRightBottomMouseDown);
  }
  comGroup.corners.rightTop.on('mouseup touchend', canFunc.onDragStageEnd);
  comGroup.corners.leftTop.on('mouseover', canFunc.onLeftTopMouseOver);
  comGroup.corners.leftTop.on('mouseout', canFunc.onLeftTopMouseOut);
  _ref = comGroup.corners;
  for (k in _ref) {
    corner = _ref[k];
    corner.on('mouseover', canFunc.cornerMouseOver);
    corner.on('mouseout', canFunc.cornerMouseOut);
  }
  entities.components.push(comGroup);
  comGroup.data = data[_params.kind][_params.id] = {
    id: _params.id,
    name: _params.name,
    tname: _params.tname,
    kind: _params.kind,
    x: _params.x,
    y: _params.y,
    amount: 1,
    remark: '',
    maps: {},
    openList: {
      isOpen: false,
      publicIpAddress: ""
    }
  };
  canFunc.initNewCom(comGroup);
  _id = null;
  _config = null;
  _corners = null;
  _params = null;
  backRect = null;
  comGroup.setStatusIcon = function(statusSynchro) {
    if (!comGroup.images.statusSynchro) {
      return;
    }
    switch (statusSynchro) {
      case 'edit':
        comGroup.images.statusSynchro.setImage(global.images.statusEdit);
        comGroup.images.statusSynchro.setVisible(true);
        break;
      case 'synchro':
        comGroup.images.statusSynchro.setImage(global.images.statusSynchro);
        comGroup.images.statusSynchro.setVisible(true);
        break;
      case 'hide':
        comGroup.images.statusSynchro.setVisible(false);
    }
  };
  comGroup.changeTitleLen = function(len) {
    var _name, _title;
    _name = this.data.name;
    _title = tools.showOverflowText(_name, len);
    this.texts.titleText.setText(_title);
    if (len < 8) {
      this.texts.titleText.setHeight(14);
    } else if (len < 16) {
      this.texts.titleText.setHeight(28);
    } else {
      this.texts.titleText.setHeight(42);
    }
    return _title;
  };
  comGroup.showSelectRect = function() {
    this.changeTitleLen(global.titleLenSelect);
    this.rects.isdropRect.show();
  };
  comGroup.hideSelectRect = function() {
    this.changeTitleLen(global.titleLenNormal);
    this.rects.isdropRect.hide();
  };
  return comGroup;
};

comFactory = function(_params) {
  var tempObj;
  if (!_params || Object.size(_params) < 1) {
    console.log('Error: comFactory Missing parameters');
    return;
  }
  switch (_params.kind) {
    case 'layer':
      tempObj = new AbsLayer(_params);
      break;
    case 'ecs':
      tempObj = new AbsEcs(_params);
      break;
    case 'rds':
      tempObj = new AbsRds(_params);
      break;
    case 'slb':
      tempObj = new AbsSlb(_params);
      break;
    case 'oss':
      tempObj = new AbsOss(_params);
      break;
    case 'ots':
      tempObj = new AbsOts(_params);
      break;
    case 'ocs':
      tempObj = new AbsOcs(_params);
      break;
    case 'odps':
      tempObj = new AbsOdps(_params);
      break;
    case 'cdn':
      tempObj = new AbsCdn(_params);
      break;
    case 'yundun':
      if (_params.name == null) {
        _params.name = '云盾';
      }
      tempObj = new AbsYundun(_params);
      break;
    case 'jiankong':
      if (_params.name == null) {
        _params.name = '云监控';
      }
      tempObj = new AbsJiankong(_params);
      break;
    case 'diy':
      if (_params.name == null) {
        _params.name = '自定义组件';
      }
      tempObj = new AbsDiy(_params);
      break;
    case 'mqs':
      tempObj = new AbsMqs(_params);
      break;
    case 'oas':
      tempObj = new AbsOas(_params);
      break;
    case 'opensearch':
      tempObj = new AbsOpensearch(_params);
      break;
    case 'pts':
      tempObj = new AbsPts(_params);
      break;
    case 'sls':
      tempObj = new AbsSls(_params);
      break;
    default:
      return;
  }
  entities.elements.push(tempObj);
  return tempObj;
};
