// Generated by CoffeeScript 1.7.1
$(function() {
  window.render = {};
  window.render.preview = Handlebars.compile($('#preview-tpl').html());
  window.render.ecsListDisk = Handlebars.compile($('#disk-list-tpl').html());
  window.render.process = {};
  window.render.process.preview = function(data) {
    var b, c_hash, c_url, do_data, e_item, i, o, __e_obj, __key, __new_obj_key, __tmp_obj, _data, _do_data_ecs, _i, _ref;
    do_data = {};
    do_data.ecs = {};
    do_data.rds = {};
    do_data.slb = {};
    do_data.oss = {};
    do_data.ocs = {};
    do_data.cdn = {};
    _data = Object.clone(data);
    for (i in _data.ecs) {
      if (Object.size(_data.ecs[i].maps) > 0) {
        continue;
      }
      o = {
        type: 'ecs',
        data: {
          cpu: +_data.ecs[i].cpu,
          ram: +_data.ecs[i].memory,
          disk: [],
          chargetype: +_data.ecs[i].chargeType,
          bandtype: +_data.ecs[i].bandType,
          bandwidth: +_data.ecs[i].bandWidth,
          os: _data.ecs[i].osVal,
          region_no: resources.regionCode[$.cookie('regionId')],
          duration: +_data.ecs[i].chargeType === 1 ? +_data.ecs[i].buyTime : '-',
          vm_yundun_monitor: 1,
          vm_yundun_service: 1
        }
      };
      if ("undefined" !== typeof _data.ecs[i].disks) {
        for (b = _i = 1, _ref = _data.ecs[i].disks.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; b = 1 <= _ref ? ++_i : --_i) {
          if ("undefined" !== typeof _data.ecs[i].disks[b] && "undefined" !== typeof _data.ecs[i].disks[b].size && _data.ecs[i].disks[b].size > 0) {
            o.data.disk.push({
              type: "undefined" !== typeof _data.ecs[i].disks[b] ? _data.ecs[i].disks[b].type : 'cloud',
              size: "undefined" !== typeof _data.ecs[i].disks[b] ? _data.ecs[i].disks[b].size : 0
            });
          }
        }
      }
      c_url = JSON.stringify(o);
      c_hash = md5(c_url);
      if ("undefined" === typeof do_data.ecs[c_hash]) {
        do_data.ecs[c_hash] = o;
        do_data.ecs[c_hash].data.quantity = 0;
        do_data.ecs[c_hash].data.amount = 0;
      }
      do_data.ecs[c_hash].data.quantity += +_data.ecs[i].amount;
      do_data.ecs[c_hash].data.amount += +_data.ecs[i].amount;
    }
    __e_obj = {};
    _do_data_ecs = Object.clone(do_data.ecs);
    for (i in _do_data_ecs) {
      e_item = Object.clone(_do_data_ecs[i]);
      __key = 0;
      while (true) {
        __key++;
        __tmp_obj = {
          type: e_item.type,
          data: {
            cpu: e_item.data.cpu,
            ram: e_item.data.ram,
            bandwidth: e_item.data.bandwidth,
            duration: e_item.data.duration,
            chargetype: e_item.data.chargetype,
            bandtype: e_item.data.bandtype,
            os: e_item.data.os,
            quantity: e_item.data.quantity,
            region_no: e_item.data.region_no,
            vm_yundun_monitor: 1,
            vm_yundun_service: 1,
            disk: []
          }
        };
        e_item.data.disk.each(function(cur_disk) {
          if (cur_disk.type !== 'system') {
            return __tmp_obj.data.disk.push({
              type: cur_disk.type,
              size: cur_disk.size
            });
          }
        });
        delete __tmp_obj.data.amount;
        delete __tmp_obj.data.quantity;
        if (e_item.data.amount >= 99) {
          __tmp_obj.data.amount = 99;
          __tmp_obj.data.quantity = 99;
        } else {
          __tmp_obj.data.amount = e_item.data.amount;
          __tmp_obj.data.quantity = e_item.data.quantity;
        }
        e_item.data.amount -= __tmp_obj.data.amount;
        e_item.data.quantity -= __tmp_obj.data.quantity;
        __new_obj_key = i + "_" + __key;
        __e_obj[__new_obj_key] = Object.clone(__tmp_obj);
        __tmp_obj = null;
        if (e_item.data.amount <= 0 || e_item.data.quantity <= 0 || __key > 100) {
          break;
        }
      }
    }
    delete do_data.ecs;
    do_data.ecs = Object.clone(__e_obj);
    for (i in data.rds) {
      if (data.rds[i].openList.isOpen) {
        continue;
      }
      o = {
        type: 'rds',
        data: {
          dbtype: data.rds[i].dbType,
          dbversion: data.rds[i].dbVersion,
          storage: +data.rds[i].storage,
          ram: +data.rds[i].memory,
          mem: +data.rds[i].memory,
          region: resources.regionCode[$.cookie('regionId')],
          duration: +data.rds[i].buyTime ? +data.rds[i].buyTime : 1,
          time: +data.rds[i].buyTime ? +data.rds[i].buyTime : 1
        }
      };
      c_url = JSON.stringify(o);
      c_hash = md5(c_url);
      if ("undefined" === typeof do_data.rds[c_hash]) {
        do_data.rds[c_hash] = o;
        do_data.rds[c_hash].data.quantity = 0;
        do_data.rds[c_hash].data.amount = 0;
      }
      do_data.rds[c_hash].data.quantity += +data.rds[i].amount;
      do_data.rds[c_hash].data.amount += +data.rds[i].amount;
    }
    for (i in data.oss) {
      if (data.oss[i].openList.isOpen) {
        continue;
      }
      do_data.oss[i] = data.oss[i];
    }
    for (i in data.slb) {
      if (data.slb[i].openList.isOpen) {
        continue;
      }
      do_data.slb[i] = data.slb[i];
    }
    return render.preview(do_data);
  };
  Handlebars.registerHelper('bandWidthHelper', function(chargeType, bandType, bandWidth) {
    if (!bandWidth) {
      return '不使用带宽';
    } else if (chargeType === 2) {
      if (bandType === 2) {
        return '固定带宽，带宽峰值: ' + bandWidth + 'Mbps';
      } else {
        return '按使用流量，带宽值: ' + bandWidth + 'Mbps';
      }
    } else {
      return bandWidth + 'Mbps';
    }
  });
  return Handlebars.registerHelper('chargeTypeHelper', function(chargeType) {
    if (chargeType === 2) {
      return '按量付费';
    } else {
      return '包年包月';
    }
  });
});
