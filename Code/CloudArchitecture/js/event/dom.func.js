// Generated by CoffeeScript 1.7.1
window.domFunc = {
  leaveConfirm: function(e) {
    return e.returnValue = '架构可能尚未保存';
  },
  resizeLeftBar: function() {
    var height, itemCount, salt;
    salt = tools.is_iPad() ? 20 : 0;
    height = $('body').height() - 45 - salt;
    itemCount = $('#left-board h3').size();
    $('#left-board').height(height);
    $('#left-board .group-content').css('height', (height - 35 * itemCount) + 'px');
  },
  hideNavToggle: function() {
    $('#canvasNav').toggle();
    $('#canvasNavBtn').toggleClass('eye-close');
  },
  onWindowResize: function() {
    domFunc.resizeLeftBar();
    canvas.resizeStage();
    canvas.redrawBackgrid();
    navImg.init();
    domFunc.initTopWidth();
  },
  onDocumentSelectStart: function(e) {
    return false;
  },
  onPreviewListSelectStart: function(e) {
    e.stopPropagation();
    return true;
  },
  onDocumentMouseDown: function(e) {
    domFunc.hideTip();
    canFunc.hideDialog();
  },
  onTopBarMouseDown: function(e) {
    canFunc.hideScriptPopover(e);
    canFunc.hideDiskPopover(e);
  },
  onInputFocus: function() {
    return global.canBatchDraw = false;
  },
  onInputBlur: function() {
    return global.canBatchDraw = true;
  },
  hideTip: function() {
    $('.tooltip').remove();
    $('.cus-tpl-close').removeClass('show');
    $('.option-list').remove();
    $('.description-dialog, .disk-popover, .dialog-line-tips').hide();
  },
  loginSuccessExec: function() {
    if (!$.cookie('loginMail')) {
      return;
    }
    domFunc.getSecgroupList();
    domFunc.getNotificationList();
    domFunc.getScriptList();
    domFunc.getScriptModelList();
    domFunc.getImageList();
    domFunc.getSnapshotsList();
    task.connect();
  },
  onDocumentClick: function(e) {
    if (!$(e.target).parent().hasClass('kineticjs-content')) {
      canFunc.hidePopover();
    }
    domFunc.hideSearch();
  },
  onDocumentMouseUp: function(e) {
    if (global.isDrag) {
      $('#createTpl').remove();
      $('#layerTpl').hide().removeAttr('style');
      global.isDrag = 0;
      global.createType = null;
      global.createSubType = null;
      global.createCategory = null;
      global.createComTpl = null;
    }
    canFunc.saveHistoryLittle();
  },
  onDragComTplStart: function(e) {
    var jThis;
    global.isDrag = 1;
    canFunc.hideScriptPopover(e);
    canFunc.hideDiskPopover(e);
    global.createComTpl = jThis = $(this);
    global.createType = jThis.data('kind');
    global.createSubType = jThis.data('subtype');
    global.createCategory = jThis.data('category');
    jThis.clone().attr("id", 'createTpl').css({
      opacity: '0.75',
      zIndex: '999',
      display: 'none'
    }).appendTo('body');
    domFunc.onRightArrowHide();
    canFunc.maskBackLayerDestroy();
  },
  onDragComTplMove: function(e) {
    var comTpl, createTpl, layerTpl, offset, tempPos, tempScale;
    if (global.isDrag) {
      comTpl = $('#createTpl');
      layerTpl = $('#layerTpl');
      tempScale = 1;
      offset = {
        x: def.tpl.com,
        y: def.tpl.com
      };
      createTpl = comTpl;
      tempPos = tools.convertPagePos(e, 'mousemove', 0, 1);
      if (tempPos.x > 150) {
        tempScale = global.stageScale;
        if (global.createType === 'layer') {
          createTpl = layerTpl;
          comTpl.hide();
          offset = {
            x: def.tpl.layerX,
            y: def.tpl.layerY
          };
        } else {
          if (tempScale < 0.9) {
            tempScale += 0.1;
          }
        }
      } else {
        if (global.createType === 'layer') {
          layerTpl.hide();
        }
      }
      tempPos.x -= offset.x * tempScale;
      tempPos.y -= offset.y * tempScale;
      createTpl.css({
        position: 'absolute',
        left: tempPos.x,
        top: tempPos.y,
        opacity: 0.75,
        display: 'block',
        transform: "scale(" + tempScale + ")",
        transformOrigin: '0 0'
      });
      canFunc.onComDragToStageMove(e);
    }
  },
  leftComTipBind: function() {
    $('#left-board').tooltip({
      selector: '.need-tip',
      container: 'body',
      html: true
    });
  },
  onCustomTplOverStart: function(e) {
    return $(this).find('.cus-tpl-close').addClass('show');
  },
  onCustomTplOverEnd: function(e) {
    return $(this).find('.cus-tpl-close').removeClass('show');
  },
  onCustomImageDel: function(e) {
    var comDiv, imageId;
    comDiv = $(this).closest('.com-div');
    imageId = $(this).parent().data('subtype');
    comDiv.slideUp('slow', function() {
      task.addDelCustomIsoTask(imageId);
      return this.remove();
    });
  },
  onCustomDiskDel: function(e) {
    var comDiv, snapshot, snapshotId;
    comDiv = $(this).closest('.com-div');
    snapshotId = $(this).parent().data('subtype');
    snapshot = global.snapshotInfoList[snapshotId];
    comDiv.slideUp('slow', function() {
      task.addDelSnapshotTask(snapshot.InstanceId, snapshot.DiskId, snapshot.SnapshotId);
      return this.remove();
    });
  },
  onCustomTplDel: function(e) {
    var data;
    e.stopPropagation();
    global.delCusTplId = $(this).closest('.com-div').data('_id');
    data = {
      mail: encodeURIComponent($.cookie('loginMail')),
      _id: global.delCusTplId
    };
    tools.post('/customplate/del', data, domFunc.delCustomComCallback);
  },
  delCustomComCallback: function(_data) {
    if (_data === 'ok') {
      $("#cus-tpl-" + global.delCusTplId).fadeOut(500, function() {
        $(this).remove();
        return domFunc.onDocumentMouseDown();
      });
    }
    global.delCusTplId = 0;
  },
  initTopWidth: function() {
    var display_width, increase, width, word_increase;
    width = $(window).innerWidth();
    if (+width <= 960) {
      $('#structname,#structNameInput').css('width', '140px');
      if ($('#structname').attr('title')) {
        $('#structname').text("" + (domFunc.showOverflowText($('#structname').attr('title'), 14)));
      }
    } else {
      increase = (+width - 960) > 160 ? 160 : +width - 960;
      display_width = 140 + increase;
      $('#structname,#structNameInput').css('width', "" + display_width + "px");
      if ($('#structname').attr('title')) {
        word_increase = increase / 10;
        $('#structname').text("" + (domFunc.showOverflowText($('#structname').attr('title'), +word_increase + 14)));
      }
    }
  },
  topBarInit: function() {
    var loginMail, structdesc, structname;
    structname = $.cookie('structname') || '新建架构';
    structdesc = $.cookie('structdesc') || '';
    if (structname) {
      domFunc.initTopWidth();
      $('#structname').text(domFunc.showOverflowText(structname, 14));
      $('#structname').attr('title', structname);
      $('#structNameInput').val(structname);
      loginMail = $.cookie('loginMail');
      tools.checkLoginStatus(function(data) {
        switch (data) {
          case '1':
            $('#usermail').text($.cookie('loginMail'));
            $('#mylogin,#myreg').hide();
            $('#userinfo,#comListModelBtn,#scriptBtn,#monitorBtn,#notifyBtn,#structListModelBtn').show();
            domFunc.initStructListModel();
            domFunc.getSecgroupList();
            domFunc.getNotificationList();
            loginFunc.isAdmin(loginMail);
            if (md5(loginMail) === 'd8eb43177808b3185082f550a184fe94' || md5(loginMail) === '104761e0490ae7d0925384cf0b5cf55f') {
              $('.com-adv').show();
            }
            if (md5(loginMail) === '438864f4d8e389c57879b48a3b0c0313') {
              $("#saveModelBtn").show();
              $("#saveBtn").hide();
              $('.com-adv').show();
            }
            return domFunc.setTimeoutFunc();
          case '0':
            return loginFunc.logoutClear();
          case '2':
            tools.clearLoginInfo();
            return $.notify({
              msg: 'session过期或不存在, 请重新登录',
              type: 'warning'
            });
        }
      });
    } else {
      location.replace('/new');
    }
  },
  setTimeoutFunc: function(isShowLoading) {
    clearTimeout(global.timeoutHandle);
    domFunc.updateAllOpenComStatus(isShowLoading);
  },
  myRegClick: function() {
    $('.control-group').removeClass('error');
    $('#reg-mail').val('');
    $('#reg-pwd').val('');
    $('#reg-repwd').val('');
    $('#reg-label-error').text('');
  },
  loginBtnClick: function() {
    var checkmail, checkpwd, data, valMail, valPwd;
    valMail = $('#login-mail').val();
    valPwd = $('#login-pwd').val();
    checkmail = true;
    checkpwd = true;
    if (valPwd !== '') {
      checkpwd = true;
    } else {
      $('#label-error').html('请填写密码');
      $('#login-pwd').parent('.control-group').removeClass('error');
      checkpwd = false;
    }
    if (valMail !== '') {
      if (valMail.search(/^([a-zA-Z0-9_\.-]+)@(([a-zA-Z0-9_-]+)\.)+[a-zA-Z]{2,6}$/) !== 0) {
        $('#label-error').html('请填写正确格式的mail');
        $('#login-mail').parent('.control-group').addClass('error');
        checkmail = false;
      }
    } else {
      $('#label-error').html('请填写mail');
      $('#login-mail').parent('.control-group').removeClass('error');
      checkmail = false;
    }
    if (!checkmail) {
      $('#login-mail').focus();
      return;
    } else if (!checkpwd) {
      $('#login-pwd').focus();
      return;
    } else {
      data = {
        mail: encodeURIComponent(valMail),
        pwd: encodeURIComponent(valPwd)
      };
      tools.post('/user/login', data, domFunc.logincallback);
    }
  },
  logincallback: function(rs) {
    var loginMail, result, rsCode;
    if (rs) {
      result = rs & 3;
      rsCode = result;
    } else {
      rsCode = 0;
    }
    switch (rsCode) {
      case 0:
        $('#login-pwd').val('');
        $('#label-error').text('登录失败，请重新登录');
        break;
      case 1:
        loginMail = $('#login-mail').val();
        $.cookie('loginMail', loginMail);
        $('#usermail').text($.cookie('loginMail'));
        $('#mylogin,#myreg').hide();
        $('#userinfo').show();
        $('#loginModal').modal('hide');
        loginFunc.isAdmin(loginMail);
        notify.connect();
        if ($.cookie('savetype')) {
          switch ($.cookie('savetype')) {
            case 'achi':
              $('#saveBtn').trigger('click');
              break;
            case 'layer_confirm':
              $('#layer_confirm').trigger('click');
              break;
            case 'ecs_confirm_pay1':
              $('#ecs_confirm_pay1').trigger('click');
              break;
            case 'rds_confirm':
              $('#rds_confirm').trigger('click');
              break;
            default:
              $.removeCookie('savetype');
          }
          $.removeCookie('savetype');
        }
        break;
      case 2:
        $('#login-pwd').val('');
        $('#label-error').text('登录密码错误');
        break;
      case 3:
        $('#login-pwd').val('');
        $('#label-error').text('邮箱不存在');
    }
  },
  myLoginClick: function() {
    $('#login-mail').val('');
    $('#login-pwd').val('');
    $('#label-error').text('');
    $('.control-group').removeClass('error');
  },
  loginOutClick: function() {
    $.post('/user/logout', function(data) {
      if (data === 'ok') {
        $.removeCookie('loginMail');
        $('#mylogin,#myreg').show();
        $('#userinfo').hide();
        $("#saveModelBtn").hide();
        $("#saveBtn").show();
        $('#doScriptTopBtn').hide();
        $('#components2 .components-inner').html('');
      } else {
        bootbox.alert('服务器错误，请重试。');
      }
    });
  },
  myAliLoginClick: function() {
    var wlogin;
    $.cookie('showplace', 'new');
    wlogin = window.open(resources.loginurl['ali'], 'alilogin', 'width=900,height=570', false);
    wlogin.document.title = '正在跳转中...';
  },
  myWeiboLoginClick: function() {
    var wlogin;
    $.cookie('showplace', 'new');
    wlogin = window.open(resources.loginurl['weibo'], 'alilogin', 'width=900,height=570', false);
    wlogin.document.title = '正在跳转中...';
  },
  myQqLoginClick: function() {
    var wlogin;
    $.cookie('showplace', 'new');
    wlogin = window.open(resources.loginurl['qq'], 'alilogin', 'width=900,height=570', false);
    wlogin.document.title = '正在跳转中...';
  },
  onCanvasPlusClick: function() {
    var _ref;
    if ((0.5 <= (_ref = global.stageScale) && _ref < 1)) {
      global.stageScale += 0.25;
      layer.setScale(global.stageScale);
      backLayer.setScale(global.stageScale);
      domFunc.setStageScaleText(global.stageScale);
      layer.batchDraw();
      backLayer.batchDraw();
    }
  },
  onCanvasMinusClick: function() {
    if (global.stageScale > 0.5) {
      global.stageScale -= 0.25;
      layer.setScale(global.stageScale);
      backLayer.setScale(global.stageScale);
      domFunc.setStageScaleText(global.stageScale);
      layer.batchDraw();
      backLayer.batchDraw();
    }
  },
  onCanvasRevertClick: function() {
    global.stageScale = 1;
    layer.setScale(global.stageScale);
    backLayer.setScale(global.stageScale);
    layer.batchDraw();
    backLayer.batchDraw();
  },
  setStageScaleText: function(scale) {
    $('#stageScaleText').text(scale);
  },
  onRightArrowHide: function() {
    $('#ecs-cost1').html('loading...');
    domFunc.slbPanelCancelClick();
    $('.labelerror').text('');
    $('#addslb-tip').hide();
    $('#slbPortSetting').hide();
    $('.zoombtn').show();
    $('#right-board').stop(true, true).animate({
      marginRight: '-350px'
    }, 500);
  },
  rightBarSwitch: function(node) {
    var exclude;
    exclude = ['oss', 'layer', 'yundun', 'jiankong', 'cdn', 'odps', 'ots', 'ocs', 'mqs', 'oas', 'opensearch', 'pts', 'sls'];
    if (($.inArray(node.kind, exclude)) > -1 && 0 === $('#right-arrow.open').length) {
      domFunc.onRightArrowHide();
      return false;
    }
    $('.remark not #remark4Normal').hide();
    if (node) {
      global.selectObj = node;
    }
    domFunc.setRightArrowShow(node);
    domFunc.showRemarkWithoutSaveHistory(node);
    domFunc.slbPanelCancelClick();
    if (node.kind === "ecs") {
      $('#ecs-cost1').html(selEcsPrice());
    } else if (node.kind === "rds") {
      $('#rds-cost1').html(selRdsPrice());
    }
  },
  showRightBar: function(node) {
    var exclude;
    exclude = ['oss', 'layer', 'yundun', 'jiankong', 'cdn', 'odps', 'ots', 'ocs', 'mqs', 'oas', 'opensearch', 'pts', 'sls'];
    if (($.inArray(node.kind, exclude)) > -1 && 0 === $('#right-arrow.open').length) {
      domFunc.onRightArrowHide();
      return false;
    }
    domFunc.rightBarSwitch(node);
    $('.zoombtn').hide();
    $('#right-board').stop(true).animate({
      marginRight: '0'
    }, 500);
  },
  slbPanelCancelClick: function() {
    $('.slb-panel').hide();
  },
  setRightArrowShow: function(remark4obj) {
    var type;
    type = remark4obj != null ? remark4obj.kind : 'normal';
    switch (type) {
      case 'ecs':
        domFunc.ecsServerListShow(remark4obj);
        $('#remark4Ecs .nav-pills').find('li').removeClass('active').end().find('.title-config').addClass('active');
        $('#remark4Ecs').find('.tab-pane').removeClass('active').end().find('.tab-config').addClass('active');
        break;
      case 'rds':
        $('#remark4Rds .nav-pills').find('li').removeClass('active').end().find('.title-config').addClass('active');
        $('#remark4Rds').find('.tab-pane').removeClass('active').end().find('.tab-config').addClass('active');
        break;
      case 'slb':
        domFunc.slbExpansionShow(remark4obj);
        $('#remark4Slb .nav-pills').find('li').removeClass('active').end().find('.title-config').addClass('active');
        $('#remark4Slb').find('.tab-pane').removeClass('active').end().find('.tab-config').addClass('active');
        break;
      case 'layer':
        $('#remark4Layer .nav-pills').find('li').removeClass('active').end().find('.title-config').addClass('active');
        $('#remark4Layer').find('.tab-pane').removeClass('active').end().find('.tab-config').addClass('active');
        break;
      case 'oss':
        if (0 < $('#right-arrow.open').length) {
          domFunc.onRightArrowHide();
        }
        break;
      default:
        $('#remark4Normal .nav-pills').find('li').removeClass('active').end().find('.title-config').addClass('active');
        $('#remark4Normal').find('.tab-pane').removeClass('active').end().find('.tab-config').addClass('active');
    }
  },
  showRemarkWithoutSaveHistory: function(remark4obj, panel) {
    global.isShowRemark = false;
    domFunc.showRemark(remark4obj, panel);
    global.isShowRemark = true;
  },
  showRemark: function(remark4obj, panel) {
    var diskId, diskNum, diskObj, diskVal, diySelectType, diySelectTypeItem, ecsId, maxVal, mem, osType, port, secgroupListWrapItem, securityGroupId, server, sqlver, tabs, tmpObj, type, _ecsId, _ecsName, _ecsObj, _ecsObjArr, _ecsOlObj, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _slbId, _val;
    if ((!remark4obj) || (!Object.size(remark4obj))) {
      return false;
    }
    $('.remark').hide();
    type = remark4obj ? remark4obj.kind : 'normal';
    if (type === 'oss') {
      domFunc.onRightArrowHide();
      return false;
    }
    panel = panel ? panel : 'default';
    if (!(type === 'normal')) {
      $('#right-board').find("#" + type + "_name").val(remark4obj.data.name);
      $('#right-board').find("#" + type + "_desc").val(remark4obj.data.remark);
    }
    switch (type) {
      case 'layer':
        $('#remark4Layer').show();
        $('#layer_id').val(global.selectObj.data.id);
        break;
      case 'ecs':
        $('#title4Ecs').text(domFunc.showOverflowText(remark4obj.getName(), 16));
        $('#title4Ecs').attr('title', remark4obj.getName());
        $('#remark4Ecs').show();
        if (tools.isMapped(remark4obj.data)) {
          $('.not_isOpen').hide();
        } else {
          $('.not_isOpen').show();
        }
        if (remark4obj.data.chargeType === 1) {
          $('#chargeType2').parent().removeClass('title-config active');
          $("" + ($('#chargeType2').attr('href'))).removeClass('tab-config active');
          remark4obj.setChargeType(1);
          $('#chargeType1').parent().addClass('title-config active');
          $("" + ($('#chargeType1').attr('href'))).addClass('tab-config active');
          $('#chargeType1').attr('data-toggle', 'tab');
          $("#row-cpu option[value=" + remark4obj.data.cpu + "]").attr('selected', 'selected');
          $("#row-cpu option:selected").trigger('change');
          $("#row-mem option[value=" + remark4obj.data.memory + "]").attr('selected', 'selected');
          $("#row-mem option:selected").trigger('change');
          $('#ecs_netSpeed_amount_tip').hide();
          if (remark4obj.data.bandWidth != null) {
            $('#ecs_netSpeed_amount').val(remark4obj.data.bandWidth);
          } else {
            $('#ecs_netSpeed_amount').val(1);
          }
          $('#ecs_netSpeed_amount').trigger('change');
          if (remark4obj.data.osVal) {
            $("#ecs-os").text(domFunc.showOverflowText(tools.getOsStrByVal(remark4obj.data.osVal), 30));
            $("#ecs-os").attr('title', tools.getOsStrByVal(remark4obj.data.osVal));
            osType = tools.getOsType(remark4obj.data.osVal);
            if (osType === 'custom') {
              $('#ostitle').css('font-size', '12px').text('自定义镜像：');
            } else {
              $('#ostitle').css('font-size', '14px').text('系统镜像：');
            }
          } else {
            $("#ecs-os").text('没有匹配的镜像');
            $('#ostitle').css('font-size', '14px').text('系统镜像：');
          }
          if (remark4obj.data.buyTime) {
            if (remark4obj.data.buyTime > 9) {
              $('#ecs-buy-time-type option[value=y]').attr('selected', 'selected');
            } else {
              $('#ecs-buy-time-type option[value=m]').attr('selected', 'selected');
            }
            $('#ecs-buy-time-type option:selected').trigger('change');
            $('#ecs-buy-time').val(remark4obj.data.buyTime);
          } else {
            $('#ecs-buy-time-type').val('m');
            $('#ecs-buy-time').val('1');
          }
          if (remark4obj.data.amount) {
            $('#ecs-buy-amount').val(remark4obj.data.amount);
            domFunc.ecsServerListShow(remark4obj);
          } else {
            $('#ecs-buy-amount').val(1);
          }
          $('#ecs-disk-content,#ecs-disk-content-snapshot').html('');
          if (remark4obj.data.disks) {
            $('#diskErr').text('');
            maxVal = 0;
            diskNum = 1;
            $('#snapshot-title').hide();
            _ref = remark4obj.data.disks;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              diskObj = _ref[_i];
              if (!diskObj.isSystem) {
                diskVal = diskObj.size;
                diskId = diskObj.diskId;
                if (diskObj.category === "snapshot") {
                  $('#snapshot-title').show();
                  domFunc.onAddEcsSnapShotDiskClick(1, diskVal, diskId);
                } else {
                  domFunc.onAddEcsDiskClick(1, diskVal, diskId);
                }
                maxVal += diskVal;
                diskNum += 1;
              }
            }
            if ((diskNum > 4) || (maxVal > 2048 - 5)) {
              $('#add-ecs-disk').hide();
              $('#not-add-ecs-disk').show();
            } else {
              $('#add-ecs-disk').show();
              $('#not-add-ecs-disk').hide();
            }
            $('#totalDisk').text(maxVal);
          } else {
            $('#add-ecs-disk').show();
            $('#not-add-ecs-disk').hide();
          }
          if (Object.size(remark4obj.data.maps) > 0) {
            $('#chargeType2').removeAttr('data-toggle');
            $('#row-cpu,#row-mem,#ecs_netSpeed_amount,#ecs-buy-amount,.diskinput').attr('disabled', 'disabled');
            $('#ecs_bandwidth_slider,#ecs-disk-content .col-md-8').slider('disable');
          } else {
            $('#chargeType2').attr('data-toggle', 'tab');
            $('#row-cpu,#row-mem,#ecs_netSpeed_amount,#ecs-buy-amount,.diskinput').removeAttr('disabled');
            $('#ecs_bandwidth_slider,#ecs-disk-content .col-md-8').slider('enable');
          }
        } else {
          $('#chargeType1').parent().removeClass('title-config active');
          $("" + ($('#chargeType1').attr('href'))).removeClass('tab-config active');
          remark4obj.setChargeType(2);
          $('#chargeType2').parent().addClass('title-config active');
          $("" + ($('#chargeType2').attr('href'))).addClass('tab-config active');
          $('#chargeType2').attr('data-toggle', 'tab');
          $("#row-cpu-bw option[value=" + remark4obj.data.cpu + "]").attr('selected', 'selected');
          $("#row-cpu-bw option:selected").trigger('change');
          $("#row-mem-bw option[value=" + remark4obj.data.memory + "]").attr('selected', 'selected');
          $("#row-mem-bw option:selected").trigger('change');
          $('#ecs_netSpeed_amount_tip-bw').hide();
          $("#chargeType-bw option[value=" + remark4obj.data.bandType + "]").attr('selected', 'selected');
          domFunc.onChargeTypeChange(1, remark4obj.data.bandWidth);
          if (remark4obj.data.osVal) {
            $("#ecs-os-bw").text(domFunc.showOverflowText(tools.getOsStrByVal(remark4obj.data.osVal), 30));
            $("#ecs-os-bw").attr('title', tools.getOsStrByVal(remark4obj.data.osVal));
            osType = tools.getOsType(remark4obj.data.osVal);
            if (osType === 'custom') {
              $('#ostitle-bw').css('font-size', '12px').text('自定义镜像：');
            } else {
              $('#ostitle-bw').css('font-size', '14px').text('系统镜像：');
            }
          } else {
            $("#ecs-os-bw").text('没有匹配的镜像');
            $('#ostitle-bw').css('font-size', '14px').text('系统镜像：');
          }
          $('#ecs-disk-content-bw,#ecs-disk-content-snapshot-bw').html('');
          if (remark4obj.data.disks) {
            $('#diskErr-bw').text('');
            maxVal = 0;
            diskNum = 1;
            $('#disk-title-bw').text('数据盘：');
            _ref1 = remark4obj.data.disks;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              diskObj = _ref1[_j];
              if (!diskObj.isSystem) {
                diskVal = diskObj.size;
                diskId = diskObj.diskId;
                if (diskObj.category === "snapshot") {
                  $('#disk-title-bw').text('快照盘：');
                  domFunc.onAddEcsSnapShotDiskBandWidthClick(1, diskVal, diskId);
                } else {
                  domFunc.onAddEcsDiskBandWidthClick(1, diskVal, diskId);
                }
                maxVal += diskVal;
                diskNum += 1;
                break;
              }
            }
            if ((diskNum >= 2) || (maxVal >= 2048)) {
              $('#add-ecs-disk-bw').hide();
              $('#not-add-ecs-disk-bw').show();
            } else {
              $('#add-ecs-disk-bw').show();
              $('#not-add-ecs-disk-bw').hide();
            }
            $('#totalDisk-bw').text(maxVal);
          } else {
            $('#add-ecs-disk-bw').show();
            $('#not-add-ecs-disk-bw').hide();
          }
          if (Object.size(remark4obj.data.maps) > 0) {
            $('#chargeType1').removeAttr('data-toggle');
            $('#row-cpu-bw,#row-mem-bw,#ecs_netSpeed_amount-bw,#chargeType-bw,.diskinput').attr('disabled', 'disabled');
            $('#ecs_bandwidth_slider-bw,#ecs_bandwidth_slider-type2-bw,#ecs-disk-content-bw .col-md-8').slider('disable');
          } else {
            $('#chargeType1').attr('data-toggle', 'tab');
            $('#row-cpu-bw,#row-mem-bw,#ecs_netSpeed_amount-bw,#chargeType-bw,.diskinput').removeAttr('disabled');
            $('#ecs_bandwidth_slider-bw,#ecs_bandwidth_slider-type2-bw,#ecs-disk-content-bw .col-md-8').slider('enable');
          }
        }
        $('#secgroupTab').parent().show();
        if (Object.size(remark4obj.data.maps) === 0 || remark4obj.data.securityGroupId.length === 0) {
          tabs = $('#remark4Ecs .remark-content ul li');
          if (tabs.size() > 2) {
            $('#remark4Ecs .remark-content ul.nav:first').show();
          }
        } else {
          $('#remark4Ecs .remark-content ul.nav:first').show();
          securityGroupId = remark4obj.data.securityGroupId;
          secgroupListWrapItem = $('#secgroup-list-wrap input');
          secgroupListWrapItem.removeAttr('checked');
          secgroupListWrapItem.each(function(i, item) {
            var jqItem;
            jqItem = $(item);
            if (jqItem.val() === securityGroupId[0]) {
              return jqItem.trigger('click');
            }
          });
        }
        $('#ecs-cost1').html(selEcsPrice());
        break;
      case 'rds':
        $('#title4Rds').text(domFunc.showOverflowText(remark4obj.getName(), 16));
        $('#title4Rds').attr('title', remark4obj.getName());
        $('#remark4Rds').show();
        sqlver = remark4obj.data.dbVersion;
        mem = remark4obj.data.memory;
        $("#rds-sql-type option[value='" + remark4obj.data.dbType + "']").attr('selected', 'selected');
        $("#rds-sql-type option:selected").trigger('change');
        $("input[name='rds-sqlver-optionsRadios'][value='" + sqlver + "']").iCheck('check');
        if (remark4obj.data.storage) {
          $('#rds-storage-input').val(remark4obj.data.storage);
        } else {
          $('#rds-storage-input').val(1);
        }
        $('#rds-storage-input').trigger('change');
        if (mem) {
          $("#rdsMem option[value=" + mem + "]").attr('selected', 'selected');
          $("#rdsMem option:selected").trigger('change');
        }
        if (remark4obj.data.buyTime) {
          if (remark4obj.data.buyTime > 9) {
            $('#rds-buy-time-type option[value=y]').attr('selected', 'selected');
          } else {
            $('#rds-buy-time-type option[value=m]').attr('selected', 'selected');
          }
          $('#rds-buy-time-type option:selected').trigger('change');
          $('#rds-buy-time').val(remark4obj.data.buyTime);
        } else {
          $('#rds-buy-time-type').val('m');
          $('#rds-buy-time').val('1');
        }
        domFunc.showCreatedList(remark4obj, 'user');
        domFunc.showCreatedList(remark4obj, 'db');
        $('#rds-cost1').html(selRdsPrice());
        break;
      case 'slb':
        $('#title4Slb').text(domFunc.showOverflowText(remark4obj.getName(), 16));
        $('#title4Slb').attr('title', remark4obj.getName());
        $('#addslb-tip').slideUp();
        $('#slb-port-msg').html('').slideUp();
        $('#remark4Slb').show();
        type = '1';
        $('#slb-table .row-slbport').remove();
        $('#addSLBNum').text(0);
        if (remark4obj.data.openList) {
          if (remark4obj.data.openList.isPublicAddress === false) {
            type = '0';
          }
          if (remark4obj.data.openList.listener) {
            _ref2 = remark4obj.data.openList.listener;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              port = _ref2[_k];
              domFunc.addSlbHtml(port['protocol'], port['listenerPort'], port['backendServerPort']);
            }
          }
          $('#slb-ecs-content').html('');
          if (remark4obj.data.openList.backendServer) {
            _ref3 = remark4obj.data.openList.backendServer;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              server = _ref3[_l];
              if ($("#input_" + server.serverId).length > 0) {
                $("#input_" + server.serverId).val(server.weight);
              } else {
                _ecsObjArr = layer.find("#" + (tools.getNodeIdByInstanceId(server.serverId)))[0];
                _slbId = remark4obj.getId();
                if (_ecsObjArr) {
                  _ecsId = server.serverId;
                  _ecsName = _ecsObjArr.getName();
                  _len = $('#slb-ecs-content .row').length;
                  _val = server.weight;
                  if (_ecsObjArr.data.openLists.length > 0) {
                    _ref4 = _ecsObjArr.data.openLists;
                    for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
                      _ecsObj = _ref4[_m];
                      _len = $('#slb-ecs-content .row').length + 1;
                      domFunc.addEcsToSlbHtml(_slbId, _ecsObj.instanceId, _ecsObj.instanceName, _len, _val, _ecsId);
                    }
                  }
                } else {
                  ecsId = tools.getNodeIdByOpenListsEcsId(server.serverId);
                  _val = server.weight;
                  tmpObj = layer.find("#" + ecsId)[0];
                  if (!tmpObj) {
                    continue;
                  }
                  if (tmpObj.data.openLists[0].instanceId !== ecsId) {
                    _ecsOlObj = tmpObj.data.openLists.find(function(_ol) {
                      return _ol.instanceId === server.serverId;
                    });
                    _len = $('#slb-ecs-content .row').length + 1;
                    domFunc.addEcsToSlbHtml(_slbId, _ecsOlObj.instanceId, _ecsOlObj.instanceName, _len, _val, ecsId);
                  }
                }
              }
            }
          }
        }
        $("input[name='slb-type'][value='" + type + "']").iCheck('check');
        $("input[name='slb-protocol'][value='http']").iCheck('check');
        domFunc.slbExpansionShow(remark4obj);
        break;
      case 'oss':
        return;
      case 'diy':
        $('#title4Custom').text(domFunc.showOverflowText(remark4obj.getName(), 16));
        $('#title4Custom').attr('title', remark4obj.getName());
        diySelectType = $('#diy-select-type');
        diySelectTypeItem = diySelectType.find('option');
        diySelectTypeItem.removeAttr('selected');
        diySelectTypeItem.each(function(i, obj) {
          var htmlObj;
          htmlObj = $(obj);
          if (+htmlObj.val() === remark4obj.data.serviceType) {
            htmlObj.attr('selected', 'selected');
          }
        });
        $('#customComIpAdress').val(remark4obj.data.serviceIP);
        $('#remark4Custom').show();
        break;
      default:
        $('#remark4Normal').show();
    }
  },
  onRowCpuClick: function(e) {
    var chargeType, cpu, currObj, isInit, mem, memHtml, rowmem, val, _i, _len, _ref;
    currObj = global.selectObj;
    chargeType = currObj.data.chargeType;
    if (chargeType === 1) {
      val = $('#row-cpu option:selected').val();
      $('#hd-cpu').val(val);
      memHtml = domFunc.changeMem(val, chargeType);
      $('#row-mem').html(memHtml);
      isInit = true;
      _ref = $('#row-mem option');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rowmem = _ref[_i];
        if (+$(rowmem).val() === currObj.data.memory) {
          isInit = false;
          break;
        }
      }
      if (isInit) {
        $('#row-mem option:first').trigger('change');
      } else {
        $("#row-mem option[value='" + currObj.data.memory + "']").attr('selected', 'selected');
        $("#row-mem option:selected").trigger('change');
      }
      cpu = $('#row-cpu option:selected').val();
      mem = $('#row-mem option:selected').val();
      currObj.setCpu(+cpu);
      currObj.setEcsMemory(+mem);
      $('#ecs-cost1').html(selEcsPrice());
    }
    canFunc.saveHistory();
    layer.batchDraw();
  },
  onRowCpuBandWidthClick: function(e) {
    var chargeType, cpu, currObj, isInit, mem, memHtml, rowmem, val, _i, _len, _ref;
    currObj = global.selectObj;
    chargeType = currObj.data.chargeType;
    val = $('#row-cpu-bw option:selected').val();
    $('#hd-cpu-bw').val(val);
    memHtml = domFunc.changeMemBandWidth(val, chargeType);
    $('#row-mem-bw').html(memHtml);
    isInit = true;
    _ref = $('#row-mem-bw option');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rowmem = _ref[_i];
      if (+$(rowmem).val() === currObj.data.memory) {
        isInit = false;
        break;
      }
    }
    if (isInit) {
      $('#row-mem-bw option:first').trigger('change');
    } else {
      $("#row-mem-bw option[value='" + currObj.data.memory + "']").attr('selected', 'selected');
      $("#row-mem-bw option:selected").trigger('change');
    }
    cpu = $('#row-cpu-bw option:selected').val();
    mem = $('#row-mem-bw option:selected').val();
    currObj.setCpu(+cpu);
    currObj.setEcsMemory(+mem);
    layer.batchDraw();
    canFunc.saveHistory();
  },
  onChargeTypeTabClick: function() {
    var chargeType, currObj;
    $('#remark4Ecs .nav li').removeClass('active');
    $('#remark4Ecs .tab-content div').removeClass('active');
    currObj = global.selectObj;
    if (Object.size(currObj.data.maps) > 0 && currObj.data.chargeType !== +$(this).data('chargetype')) {
      $.notify({
        msg: "已关联组件不能切换付费方式",
        type: 'warning'
      });
    } else {
      chargeType = $(this).data('chargetype');
      currObj.data.chargeType = +chargeType;
      currObj.setChargeType(+chargeType);
      domFunc.emptyDisk(+chargeType);
      domFunc.initEcs(+chargeType);
    }
    domFunc.showRemark(currObj);
    canFunc.saveHistory();
  },
  initEcs: function(chargeType) {
    var currObj;
    currObj = global.selectObj;
    currObj.data.cpu = 1;
    currObj.data.memory = 512;
    currObj.data.bandWidth = 1;
  },
  emptyDisk: function(chargeType) {
    var currObj, diskArr, _disk, _i;
    currObj = global.selectObj;
    diskArr = currObj.data.disks;
    for (_i = diskArr.length - 1; _i >= 0; _i += -1) {
      _disk = diskArr[_i];
      if (!_disk.isSystem) {
        domFunc.delDisk(_disk.diskId, +chargeType, 1);
      }
    }
  },
  onRowMemClick: function() {
    var currObj, diskArr, mem, val, _disk, _i;
    val = $('#row-mem option:selected').val();
    $('#hd-mem').val(val);
    $('#ecs-cost1').html(selEcsPrice());
    currObj = global.selectObj;
    mem = $('#row-mem option:selected').val();
    currObj.setEcsMemory(+mem);
    if ((+mem === 512) && (tools.getOsType(currObj.data.osVal) === 'windows')) {
      currObj.setOsVal(null);
      diskArr = currObj.data.disks;
      for (_i = diskArr.length - 1; _i >= 0; _i += -1) {
        _disk = diskArr[_i];
        domFunc.delDisk(_disk.diskId, 1, 1);
      }
      $('#ecs-os').text('没有匹配的镜像');
    }
    canFunc.saveHistory();
    layer.batchDraw();
  },
  onRowMemBandWidthClick: function() {
    var currObj, diskArr, mem, val, _disk, _i;
    val = $('#row-mem-bw option:selected').val();
    $('#hd-mem-bw').val(val);
    currObj = global.selectObj;
    mem = $('#row-mem-bw option:selected').val();
    currObj.setEcsMemory(+mem);
    if ((+mem === 512) && (tools.getOsType(currObj.data.osVal) === 'windows')) {
      currObj.setOsVal(null);
      diskArr = currObj.data.disks;
      for (_i = diskArr.length - 1; _i >= 0; _i += -1) {
        _disk = diskArr[_i];
        domFunc.delDisk(_disk.diskId, 1, 1);
      }
      $('#ecs-os-bw').text('没有匹配的镜像');
    }
    canFunc.saveHistory();
    layer.batchDraw();
  },
  changeMem: function(cpu, chargeType) {
    var arr, isDisabled, isDisplay, mem, v, val, _i, _len;
    $('#row-mem .row-mem-a').html('');
    val = '';
    switch (cpu) {
      case '1':
        arr = [512, 1024, 1024 * 2, 1024 * 4];
        break;
      case '2':
        arr = [1024 * 2, 1024 * 4, 1024 * 8];
        break;
      case '4':
        arr = [1024 * 4, 1024 * 8, 1024 * 16];
        break;
      case '8':
        arr = [1024 * 8, 1024 * 16, 1024 * 32];
        break;
      case '16':
        arr = [1024 * 64];
    }
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      isDisabled = '';
      isDisplay = '';
      mem = v / 1024 < 1 ? "" + v + "MB" : "" + (v / 1024) + "GB";
      if (chargeType && chargeType === 1) {
        if ((cpu === '4' && v === 1024 * 12) || (cpu === '2' && v === 1024 * 1.5)) {
          isDisabled = 'disabled';
          isDisplay = "style='display:none'";
        }
        val += "<option value='" + v + "' " + isDisabled + ">" + mem + "</option>";
      }
    }
    return val;
  },
  changeMemBandWidth: function(cpu, chargeType) {
    var arr, isDisabled, mem, v, val, _i, _len;
    $('#row-mem-bw .row-mem-a').html('');
    val = '';
    switch (cpu) {
      case '1':
        arr = [512, 1024, 1024 * 2, 1024 * 4];
        break;
      case '2':
        arr = [1024 * 2, 1024 * 4, 1024 * 8];
        break;
      case '4':
        arr = [1024 * 4, 1024 * 8, 1024 * 16];
    }
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      isDisabled = '';
      mem = v / 1024 < 1 ? "" + v + "MB" : "" + (v / 1024) + "GB";
      if (chargeType && chargeType === 2) {
        val += "<option value='" + v + "' " + isDisabled + ">" + mem + "</option>";
      }
    }
    return val;
  },
  onEcsBuyTimeTypeChange: function() {
    var time, timeArr, val, _i, _len;
    val = $('#ecs-buy-time-type option:selected').val();
    $("#tmp-ecs-buy-time").append($('#ecs-buy-time option'));
    timeArr = $("#tmp-ecs-buy-time option." + val);
    for (_i = 0, _len = timeArr.length; _i < _len; _i++) {
      time = timeArr[_i];
      $('#ecs-buy-time').append(time);
    }
    $("#ecs-buy-time option[value=" + global.selectObj.data.buyTime + "]").attr('selected', 'selected');
    canFunc.onEcsBuyTimeChange();
    $('#ecs-cost1').html(selEcsPrice());
    canFunc.saveHistory();
  },
  onRdsBuyTimeTypeChange: function() {
    var time, timeArr, val, _i, _len;
    val = $('#rds-buy-time-type option:selected').val();
    $("#tmp-rds-buy-time").append($('#rds-buy-time option'));
    timeArr = $("#tmp-rds-buy-time option." + val);
    for (_i = 0, _len = timeArr.length; _i < _len; _i++) {
      time = timeArr[_i];
      $('#rds-buy-time').append(time);
    }
    $("#rds-buy-time option[value=" + global.selectObj.data.buyTime + "]").attr('selected', 'selected');
    canFunc.onRdsBuyTimeChange();
    $('#rds-cost1').html(selRdsPrice());
    canFunc.saveHistory();
  },
  onChargeTypeChange: function(e, val) {
    var bwVal, chargeTypeTxt, currObj, type;
    type = $('#chargeType-bw option:selected').val();
    bwVal = val != null ? val : 1;
    chargeTypeTxt = '带宽峰值：';
    if (type === '1') {
      $('#ecs_chargeType_flow-bw').show();
      $('#ecs_bandwidth_slider-bw').slider('option', 'value', bwVal);
      $('#ecs_netSpeed_amount-bw').val(bwVal);
      $('#ecs_netSpeed_amount-bw').trigger('change');
      $('#ecs_chargeType_bandwidth-bw').hide();
      bwVal = $('#ecs_netSpeed_amount-bw').val();
    } else {
      $('#ecs_chargeType_bandwidth-bw').show();
      $('#ecs_bandwidth_slider-type2-bw').slider('option', 'value', bwVal);
      $('#ecs_netSpeed_amount-type2-bw').val(bwVal);
      $('#ecs_netSpeed_amount-type2-bw').trigger('change');
      $('#ecs_chargeType_flow-bw').hide();
      bwVal = $('#ecs_netSpeed_amount-type2-bw').val();
      chargeTypeTxt = '带宽值：';
    }
    $('#ecs_netSpeed_amount_tip-bw').hide();
    $('#ecs_chargeType_text-bw').text(chargeTypeTxt);
    currObj = global.selectObj;
    currObj.data.bandType = type;
    currObj.setBanwidth(bwVal);
    canFunc.saveHistory();
  },
  rightBoardInit: function() {
    var osList;
    $('#ecs_bandwidth_slider-bw').slider({
      range: "min",
      min: 1,
      max: 100,
      step: 1,
      value: 1,
      create: function(event, ui) {
        $("#ecs_netSpeed_amount-bw").val($("#ecs_bandwidth_slider-bw").slider("option", "value"));
      },
      slide: function(event, ui) {
        $('#ecs_netSpeed_amount-bw').val(ui.value);
        if (ui.value < 1) {
          $('#ecs_netSpeed_amount_tip-bw').show();
        } else {
          $('#ecs_netSpeed_amount_tip-bw').hide();
        }
      },
      stop: function(event, ui) {
        var bandWidth, currObj, dataObj;
        bandWidth = $('#ecs_netSpeed_amount-bw').val();
        dataObj = {
          bandWidth: +bandWidth
        };
        currObj = global.selectObj;
        canFunc.baseConfirm(dataObj);
        currObj.setBanwidth(bandWidth);
        canFunc.saveHistory();
        layer.batchDraw();
      }
    });
    $("#ecs_bandwidth_slider-bw").addTouch();
    $('#ecs_bandwidth_slider-type2-bw').slider({
      range: "min",
      min: 0,
      max: 5,
      step: 1,
      value: 1,
      create: function(event, ui) {
        $("#ecs_netSpeed_amount-type2-bw").val($("#ecs_bandwidth_slider-type2-bw").slider("option", "value"));
      },
      slide: function(event, ui) {
        $('#ecs_netSpeed_amount-type2-bw').val(ui.value);
        if (ui.value < 1) {
          $('#ecs_netSpeed_amount_tip-bw').show();
        } else {
          $('#ecs_netSpeed_amount_tip-bw').hide();
        }
      },
      stop: function(event, ui) {
        var bandWidth, currObj, dataObj;
        bandWidth = $('#ecs_netSpeed_amount-type2-bw').val();
        dataObj = {
          bandWidth: +bandWidth
        };
        currObj = global.selectObj;
        canFunc.baseConfirm(dataObj);
        currObj.setBanwidth(bandWidth);
        canFunc.saveHistory();
        layer.batchDraw();
      }
    });
    $("#ecs_bandwidth_slider-type2-bw").addTouch();
    $("#ecs_bandwidth_slider").slider({
      range: "min",
      min: 0,
      max: 200,
      step: 1,
      value: 1,
      create: function(event, ui) {
        $("#ecs_netSpeed_amount").val($("#ecs_bandwidth_slider").slider("option", "value"));
      },
      slide: function(event, ui) {
        $('#ecs_netSpeed_amount').val(ui.value);
        if (ui.value < 1) {
          $('#ecs_netSpeed_amount_tip').show();
        } else {
          $('#ecs_netSpeed_amount_tip').hide();
        }
      },
      stop: function(event, ui) {
        var bandWidth, currObj, dataObj;
        $('#ecs-cost1').html(selEcsPrice());
        bandWidth = $('#ecs_netSpeed_amount').val();
        dataObj = {
          bandWidth: +bandWidth
        };
        currObj = global.selectObj;
        canFunc.baseConfirm(dataObj);
        currObj.setBanwidth(bandWidth);
        canFunc.saveHistory();
        layer.batchDraw();
      }
    });
    $("#ecs_bandwidth_slider").addTouch();
    domFunc.rdsMemListInit($('input[name=rds-sql-type]:checked').val());
    $("#rds_storage_slider").slider({
      range: "min",
      value: 5,
      min: 5,
      max: 1000,
      step: 5,
      create: function(event, ui) {
        $("#rds-storage-input").val(5);
      },
      slide: function(event, ui) {
        $("#rds-storage-input").val(ui.value);
        $('#rds-cost1').html(selRdsPrice());
      },
      stop: function(event, ui) {
        var currObj, dataObj, storage;
        currObj = global.selectObj;
        storage = $('#rds-storage-input').val();
        dataObj = {
          storage: storage
        };
        canFunc.baseConfirm(dataObj);
        $('#rds-cost1').html(selRdsPrice());
        canFunc.saveHistory();
      }
    });
    $("#rds_storage_slider").addTouch();
    osList = "<optgroup label='Linux操作系统'>" + (domFunc.addOsList('Linux')) + "</optgroup><optgroup label='Windows操作系统'>" + (domFunc.addOsList('windows')) + "</optgroup>";
    tools.addIcheckStyle($('input'));
  },
  addOsList: function(type) {
    var k, osHtml, _i, _j;
    osHtml = '';
    if (type === 'windows') {
      for (k = _i = 6; _i <= 10; k = ++_i) {
        osHtml += "<option value='" + def.osStr[k] + "' title='" + def.os[k] + "' class='winos'>" + (domFunc.showOverflowText(def.os[k], 20)) + "</option>";
      }
    } else {
      for (k = _j = 0; _j <= 5; k = ++_j) {
        osHtml += "<option value='" + def.osStr[k] + "' title='" + def.os[k] + "'>" + (domFunc.showOverflowText(def.os[k], 20)) + "</option>";
      }
    }
    return osHtml;
  },
  showOverflowText: function(str, w, f) {
    var charCode, currLen, i, len, newStr, realLen, _i;
    currLen = 0;
    len = realLen = str.length;
    charCode = -1;
    newStr = '';
    for (i = _i = 0; _i < len; i = _i += 1) {
      charCode = str.charCodeAt(i);
      if (charCode >= 0 && charCode <= 128) {
        currLen++;
      } else {
        currLen += 2;
        realLen++;
      }
      newStr += str[i];
      if (currLen >= w) {
        break;
      }
    }
    if (!f) {
      if (currLen < realLen) {
        newStr = newStr.substr(0, newStr.length - 1) + '...';
      }
    }
    return newStr;
  },
  onRdsStorageClick: function() {
    var currObj, dataObj, diskMin, storage;
    currObj = global.selectObj;
    if ($(this).val() > 1000) {
      $(this).val(1000);
    }
    diskMin = 5;
    if (currObj.data.dbType === 'mssql') {
      diskMin = 10;
    }
    if (+$(this).val() < diskMin || $(this).val() === '' || isNaN(+$(this).val())) {
      $(this).val(diskMin);
    }
    $("#rds_storage_slider").slider('option', 'value', Math.floor(+$(this).val()));
    $('#rds-storage-input').val(Math.floor(+$(this).val()));
    storage = $('#rds-storage-input').val();
    dataObj = {
      storage: storage
    };
    canFunc.baseConfirm(dataObj);
    $('#rds-cost1').html(selRdsPrice());
    canFunc.saveHistory();
  },
  onEcsNetSpeedAmountChange: function() {
    var bandWidth, currObj, dataObj;
    if ($(this).val() > 200) {
      $(this).val(200);
    }
    if (!$(this).val() || isNaN(+$(this).val()) || +$(this).val() < 0) {
      $(this).val(1);
    }
    if (+$(this).val() === 0) {
      $('#ecs_netSpeed_amount_tip').show();
    }
    $("#ecs_bandwidth_slider").slider('option', 'value', Math.floor(+$(this).val()));
    $('#ecs_netSpeed_amount').val(Math.floor(+$(this).val()));
    bandWidth = $('#ecs_netSpeed_amount').val();
    dataObj = {
      bandWidth: Math.floor(+bandWidth)
    };
    currObj = global.selectObj;
    canFunc.baseConfirm(dataObj);
    $('#ecs-cost1').html(selEcsPrice());
    currObj.setBanwidth(bandWidth);
    canFunc.saveHistory();
    layer.batchDraw();
  },
  onEcsNetSpeedBindWidthAmountChange: function() {
    var bandWidth, currObj, dataObj;
    if ($(this).val() > 100) {
      $(this).val(100);
    }
    if (!$(this).val() || isNaN(+$(this).val()) || +$(this).val() < 1) {
      $(this).val(1);
    }
    $("#ecs_bandwidth_slider-bw").slider('option', 'value', Math.floor(+$(this).val()));
    $('#ecs_netSpeed_amount-bw').val(Math.floor(+$(this).val()));
    bandWidth = $('#ecs_netSpeed_amount-bw').val();
    dataObj = {
      bandWidth: Math.floor(+bandWidth)
    };
    currObj = global.selectObj;
    canFunc.baseConfirm(dataObj);
    currObj.setBanwidth(bandWidth);
    canFunc.saveHistory();
    layer.batchDraw();
  },
  onEcsNetSpeedBindWidthType2AmountChange: function() {
    var bandWidth, currObj, dataObj;
    if ($(this).val() > 5) {
      $(this).val(5);
    }
    if (!$(this).val() || isNaN(+$(this).val()) || +$(this).val() < 0) {
      $(this).val(1);
    }
    if (+$(this).val() === 0) {
      $('#ecs_netSpeed_amount_tip-bw').show();
    }
    $("#ecs_bandwidth_slider-type2-bw").slider('option', 'value', $(this).val());
    bandWidth = $('#ecs_netSpeed_amount-type2-bw').val();
    dataObj = {
      bandWidth: Number(bandWidth)
    };
    currObj = global.selectObj;
    canFunc.baseConfirm(dataObj);
    currObj.setBanwidth(bandWidth);
    canFunc.saveHistory();
    layer.batchDraw();
  },
  onAddEcsDiskClick: function(e, dval, diskId) {
    var currObj, diskVal, id, indexId, len, obj;
    currObj = global.selectObj;
    if (currObj.data.osVal == null) {
      $.notify({
        msg: "在安装磁盘前请先选择系统镜像",
        type: 'warning'
      });
      return;
    }
    if (e.type === 'click' && currObj.data.disks.find({
      category: 'ephemeral'
    })) {
      $.notify({
        msg: "云磁盘和临时磁盘暂不支持混用",
        type: 'danger'
      });
      return;
    } else if (currObj.data.disks.find({
      category: 'cloud',
      isSystem: false
    }) && currObj.data.disks.find({
      category: 'ephemeral'
    })) {
      $.notify({
        msg: "云磁盘和临时磁盘暂不支持混用",
        type: 'danger'
      });
      return;
    }
    len = $('#ecs-disk-content, #ecs-disk-content-snapshot').children().length;
    id = "disk_1";
    if ((0 < len && len < 4)) {
      indexId = $('#ecs-disk-content .disk-row:last').attr('id');
      if (!indexId) {
        indexId = $('#ecs-disk-content-snapshot .disk-row:last').attr('id');
      }
      id = (diskId != null) && diskId !== '' ? diskId : "disk_" + (Number(indexId.split('_')[1]) + 1);
    } else {
      id = (diskId != null) && diskId !== '' ? diskId : "disk_1";
    }
    obj = domFunc.addEcsDisk("" + id, 1);
    if (len >= 3) {
      $('#add-ecs-disk').hide();
      $('#not-add-ecs-disk').show();
    }
    $('#ecs-disk-content').append(obj);
    diskVal = 5;
    if (dval) {
      diskVal = dval;
    }
    $("#ecs-disk-content #" + id + " .col-md-8").slider({
      range: "min",
      value: diskVal,
      min: 5,
      max: 2048,
      step: 1,
      create: function(event, ui) {
        $(this).next().find('input').val(diskVal);
      },
      slide: function(event, ui) {
        $(this).next().find('input').val(ui.value);
      },
      stop: function(event, ui) {
        domFunc.onMaxDisk(id, 2048);
        canFunc.updateDisk();
        $('#ecs-cost1').html(selEcsPrice());
        canFunc.saveHistory();
      }
    });
    $("#ecs-disk-content #" + id + " .col-md-8").addTouch();
    $("#ecs-disk-content #" + id + " .col-md-8").next().find('input').on('change', domFunc.onDiskInputChange);
    $('#ecs-cost1').html(selEcsPrice());
    domFunc.onMaxDisk(id, 2048);
    canFunc.updateDisk();
    currObj.setDiskNum();
    canFunc.saveHistory();
  },
  onAddEcsSnapShotDiskClick: function(e, dval, diskId) {
    var currObj, diskVal, id, indexId, len, obj;
    currObj = global.selectObj;
    if (currObj.data.osVal == null) {
      $.notify({
        msg: "在安装磁盘前请先选择系统镜像",
        type: 'warning'
      });
      return;
    }
    len = $('#ecs-disk-content, #ecs-disk-content-snapshot').children().length;
    id = "disks_1";
    if ((0 < len && len < 4)) {
      indexId = $('#ecs-disk-content-snapshot .disk-row:last').attr('id');
      id = (diskId != null) && diskId !== '' ? diskId : "disks_" + (Number(indexId.split('_')[1]) + 1);
    } else {
      id = (diskId != null) && diskId !== '' ? diskId : "disks_1";
    }
    obj = domFunc.addEcsDisk("" + id, 1);
    if (len >= 3) {
      $('#add-ecs-disk').hide();
      $('#not-add-ecs-disk').show();
    }
    $('#ecs-disk-content-snapshot').append(obj);
    diskVal = 5;
    if (dval) {
      diskVal = dval;
    }
    $("#ecs-disk-content-snapshot #" + id + " .col-md-8").slider({
      range: "min",
      value: diskVal,
      min: 5,
      max: 2048,
      step: 1,
      create: function(event, ui) {
        $(this).next().find('input').val(diskVal);
      },
      slide: function(event, ui) {
        $(this).next().find('input').val(ui.value);
      },
      stop: function(event, ui) {
        domFunc.onMaxDisk(id, 2048);
        canFunc.updateDisk();
        $('#ecs-cost1').html(selEcsPrice());
        canFunc.saveHistory();
      }
    });
    $("#ecs-disk-content-snapshot #" + id + " .col-md-8").addTouch();
    $("#ecs-disk-content-snapshot #" + id + " .col-md-8").slider('disable');
    $("#ecs-disk-content-snapshot #" + id + " .col-md-8").next().find('input').attr('disabled', 'disabled');
    $('#ecs-cost1').html(selEcsPrice());
    domFunc.onMaxDisk(id, 2048);
    canFunc.updateDisk();
    currObj.setDiskNum();
    canFunc.saveHistory();
  },
  onAddEcsDiskBandWidthClick: function(e, dval, diskId) {
    var currObj, diskVal, id, len, obj;
    currObj = global.selectObj;
    if (currObj.data.osVal == null) {
      $.notify({
        msg: "在安装磁盘前请先选择系统镜像",
        type: 'warning'
      });
      return;
    }
    len = $('#ecs-disk-content-bw').children().length;
    id = "disk_1";
    id = (diskId != null) && diskId !== '' ? diskId : "disk_1";
    obj = domFunc.addEcsDisk("" + id, 2);
    if (len >= 0) {
      $('#add-ecs-disk-bw').hide();
      $('#not-add-ecs-disk-bw').show();
    }
    $('#ecs-disk-content-bw').append(obj);
    diskVal = 5;
    if (dval) {
      diskVal = dval;
    }
    $("#ecs-disk-content-bw #" + id + " .col-md-8").slider({
      range: "min",
      value: diskVal,
      min: 5,
      max: 2048,
      step: 1,
      create: function(event, ui) {
        $(this).next().find('input').val(diskVal);
      },
      slide: function(event, ui) {
        $(this).next().find('input').val(ui.value);
      },
      stop: function(event, ui) {
        canFunc.updateDisk(2);
        canFunc.saveHistory();
      }
    });
    $("#ecs-disk-content-bw #" + id + " .col-md-8").addTouch();
    $("#ecs-disk-content-bw #" + id + " .col-md-8").next().find('input').on('change', function() {
      domFunc.onDiskInputChange.call($(this), 1, 2);
    });
    canFunc.updateDisk(2);
    currObj.setDiskNum();
    canFunc.saveHistory();
  },
  onAddEcsSnapShotDiskBandWidthClick: function(e, dval, diskId) {
    var currObj, diskVal, id, len, obj;
    currObj = global.selectObj;
    if (currObj.data.osVal == null) {
      $.notify({
        msg: "在安装磁盘前请先选择系统镜像",
        type: 'warning'
      });
      return;
    }
    len = $('#ecs-disk-content-snapshot-bw').children().length;
    id = "disks_1";
    id = (diskId != null) && diskId !== '' ? diskId : "disks_1";
    obj = domFunc.addEcsDisk("" + id, 2);
    if (len >= 0) {
      $('#add-ecs-disk-bw').hide();
      $('#not-add-ecs-disk-bw').show();
    }
    $('#ecs-disk-content-snapshot-bw').append(obj);
    diskVal = 5;
    if (dval) {
      diskVal = dval;
    }
    $("#ecs-disk-content-snapshot-bw #" + id + " .col-md-8").slider({
      range: "min",
      value: diskVal,
      min: 5,
      max: 2048,
      step: 1,
      create: function(event, ui) {
        $(this).next().find('input').val(diskVal);
      },
      slide: function(event, ui) {
        $(this).next().find('input').val(ui.value);
      },
      stop: function(event, ui) {
        canFunc.updateDisk(2);
        canFunc.saveHistory();
      }
    });
    $("#ecs-disk-content-snapshot-bw #" + id + " .col-md-8").addTouch();
    $("#ecs-disk-content-snapshot-bw #" + id + " .col-md-8").slider('disable');
    $("#ecs-disk-content-snapshot-bw #" + id + " .col-md-8").next().find('input').attr('disabled', 'disabled');
    canFunc.updateDisk(2);
    currObj.setDiskNum();
    canFunc.saveHistory();
  },
  addEcsDisk: function(id, chargeType) {
    var obj;
    obj = $("<div id='" + id + "' class='col-md-12 disk-row title-height'><div class='col-md-8 title-height font12 paddingLeft10 paddingRight0'><div style='position:relative;z-index:8'><div class='col-md-6 paddingLeft0'>512GB</div><div class='col-md-6 paddingRight10' style='text-align:right'>2048GB</div></div></div><div class='col-md-3 title-height font12 paddingRight0 input-group'><input type='text' class='form-control input-sm diskinput' /><div class='input-group-addon input-sm' style='padding:2px'>GB</div></div><a style='text-decoration:none' href=\"javascript:domFunc.delDisk('" + id + "', " + chargeType + ")\" class='col-md-1 title-height font12 paddingRight0 icon-del-row'>-</a></div>");
    return obj;
  },
  delDisk: function(objId, chargeType, isNotNeedSaveHistory) {
    $('#diskErr').text('');
    $("#" + objId).remove();
    global.selectObj.data.disks.remove(function(n) {
      return n.diskId === objId;
    });
    canFunc.updateDisk(chargeType);
    if (chargeType === 1) {
      $('#ecs-cost1').html(selEcsPrice());
      $('#add-ecs-disk').show();
      $('#not-add-ecs-disk').hide();
      if ($('#ecs-disk-content-snapshot').children().length <= 0) {
        $('#snapshot-title').hide();
      }
    } else {
      $('#add-ecs-disk-bw').show();
      $('#not-add-ecs-disk-bw').hide();
      if ($('#ecs-disk-content-snapshot-bw').children().length <= 0) {
        $('#disk-title-bw').text('数据盘：');
      }
    }
    if (!isNotNeedSaveHistory) {
      canFunc.saveHistory();
    }
  },
  onDiskInputChange: function(e, isChargeType) {
    if (!$(this).val() || isNaN(+$(this).val()) || +$(this).val() <= 4) {
      $(this).val(5);
    }
    $(this).parent().prev().slider('option', 'value', Math.floor(+$(this).val()));
    $(this).val(Math.floor(+$(this).val()));
    domFunc.onMaxDisk($(this).parent().parent().attr('id'), 2048);
    canFunc.updateDisk(isChargeType);
    $('#ecs-cost1').html(selEcsPrice());
    canFunc.saveHistory();
  },
  onMaxDisk: function(objId, maxVal) {
    var obj, oldval, restVal, val, _i, _len, _ref;
    val = 0;
    _ref = $('#ecs-disk-content,#ecs-disk-content-snapshot').children();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      val += Number($(obj).find('.diskinput').val());
    }
    restVal = val - maxVal;
    if (restVal <= 0) {
      if ($('#ecs-disk-content,#ecs-disk-content-snapshot').children().length < 4 && restVal < -4) {
        $('#add-ecs-disk').show();
        $('#not-add-ecs-disk').hide();
      } else {
        $('#add-ecs-disk').hide();
        $('#not-add-ecs-disk').show();
      }
      $('#diskErr').text('');
    } else {
      $('#add-ecs-disk').hide();
      $('#not-add-ecs-disk').show();
      oldval = $("#" + objId + " .col-md-8").slider('option', 'value');
      $("#" + objId + " .col-md-8").slider('option', 'value', oldval - restVal);
      $("#" + objId + " .diskinput").val(oldval - restVal);
      $('#diskErr').text('数据盘容量不能超过2048GB');
    }
  },
  onRdsSqlTypeChange: function() {
    var currObj, dataObj, sqlType, sqlVer;
    sqlType = $('#rds-sql-type option:selected').val();
    if (sqlType === 'mysql') {
      $('.lb-mysql-ver').show();
      $('.lb-sqlserver-ver').hide();
      $('#rds-sqlver-optionsRadios1').iCheck('check');
      $("#rds_storage_slider").slider('option', 'min', 5);
      $("#rds_storage_slider").slider('option', 'value', 5);
    } else {
      $('.lb-mysql-ver').hide();
      $('.lb-sqlserver-ver').show();
      $('#rds-sqlver-optionsRadios3').iCheck('check');
      $("#rds_storage_slider").slider('option', 'min', 10);
      $("#rds_storage_slider").slider('option', 'value', 10);
    }
    domFunc.rdsMemListChange(sqlType);
    $('#rds-cost1').html(selRdsPrice());
    currObj = global.selectObj;
    sqlVer = $('input[name=rds-sqlver-optionsRadios]:checked').val();
    dataObj = {
      dbVersion: sqlVer
    };
    canFunc.baseConfirm(dataObj);
    currObj.setDbType(sqlType);
    canFunc.saveHistory();
    layer.batchDraw();
  },
  onRdsVerChange: function() {
    var currObj, dataObj, sqlVer;
    currObj = global.selectObj;
    sqlVer = $('input[name=rds-sqlver-optionsRadios]:checked').val();
    dataObj = {
      dbVersion: sqlVer
    };
    canFunc.baseConfirm(dataObj);
    canFunc.saveHistory();
  },
  rdsMemListInit: function(sqltype) {
    var option, optionList, v, _i, _len;
    optionList = [];
    option = '';
    if (sqltype === 'mysql') {
      optionList = [240, 600, 1200, 2400, 6000, 12000, 24000, 48000];
    } else {
      optionList = [1000, 2000, 4000, 6000, 8000, 12000, 24000, 48000];
    }
    for (_i = 0, _len = optionList.length; _i < _len; _i++) {
      v = optionList[_i];
      option += "<option value='" + v + "'>" + v + "M</option>";
    }
    $('#rdsMem').html(option);
  },
  rdsMemListChange: function(sqltype) {
    var currObj, mem;
    domFunc.rdsMemListInit(sqltype);
    domFunc.rdsMemChange();
    currObj = global.selectObj;
    mem = $('#rdsMem option:selected').val();
    currObj.setDbMemory(Number(mem));
    layer.batchDraw();
    $('#rds-cost1').html(selRdsPrice());
    canFunc.saveHistory();
  },
  rdsMemChange: function() {
    var currObj, mem;
    if ($('#rds-sql-type option:selected').val() === 'mysql') {
      switch ($('#rdsMem').val()) {
        case '240':
          $('#rdsmaxconn').text(60);
          $('#rdsiops').text(150);
          break;
        case '600':
          $('#rdsmaxconn').text(150);
          $('#rdsiops').text(300);
          break;
        case '1200':
          $('#rdsmaxconn').text(300);
          $('#rdsiops').text(600);
          break;
        case '2400':
          $('#rdsmaxconn').text(600);
          $('#rdsiops').text(1200);
          break;
        case '6000':
          $('#rdsmaxconn').text(1500);
          $('#rdsiops').text(3000);
          break;
        case '12000':
          $('#rdsmaxconn').text(2000);
          $('#rdsiops').text(6000);
          break;
        case '24000':
          $('#rdsmaxconn').text(2000);
          $('#rdsiops').text(12000);
          break;
        case '48000':
          $('#rdsmaxconn').text(2000);
          $('#rdsiops').text(14000);
      }
    } else {
      switch ($('#rdsMem').val()) {
        case '1000':
          $('#rdsmaxconn').text(100);
          $('#rdsiops').text(500);
          break;
        case '2000':
          $('#rdsmaxconn').text(200);
          $('#rdsiops').text(1000);
          break;
        case '4000':
          $('#rdsmaxconn').text(400);
          $('#rdsiops').text(2000);
          break;
        case '6000':
          $('#rdsmaxconn').text(600);
          $('#rdsiops').text(3000);
          break;
        case '8000':
          $('#rdsmaxconn').text(800);
          $('#rdsiops').text(4000);
          break;
        case '12000':
          $('#rdsmaxconn').text(1200);
          $('#rdsiops').text(6000);
          break;
        case '24000':
          $('#rdsmaxconn').text(2000);
          $('#rdsiops').text(12000);
      }
    }
    currObj = global.selectObj;
    mem = $('#rdsMem option:selected').val();
    currObj.setDbMemory(Number(mem));
    layer.batchDraw();
    $('#rds-cost1').html(selRdsPrice());
  },
  onSaveBtnClick: function() {
    return domFunc.saveStruct();
  },
  onSaveModelBtnClick: function() {
    $('#modelModal').modal('show');
  },
  saveStruct: function() {
    var data;
    $.cookie('savetype', 'achi');
    if (tools.checkLogin()) {
      if (!tools.isAllOk('ecs')) {
        $.notify({
          msg: '画布上存在未设置镜像的ECS，请先设置镜像',
          type: 'warning'
        });
        return false;
      }
      $.removeCookie('savetype');
      data = {
        mail: encodeURIComponent($.cookie('loginMail'))
      };
      tools.post('/struct/count', data, canFunc.onSaveAchitectureCallback, '正在保存架构...');
    }
  },
  onRemarkCancelClick: function() {
    domFunc.onRightArrowHide();
  },
  addSlbHtml: function(protocol, frontPort, backPort) {
    var html;
    html = "<tr class='row-slbport' data-protocol='" + protocol + "' id='port" + frontPort + "'><td>" + protocol + "</td><td>" + frontPort + "</td><td style='display:none;'>" + protocol + "</td><td>" + backPort + "</td><td class='dnone'><a class='removeSlbPort' data-frontport='" + frontPort + "' href='javascript:void(0)'>移除</a></td></tr>";
    $('#slb-table').append(html);
  },
  removeSlb: function(e) {
    var currObj, frontPort, i, obj, _i, _len, _ref;
    e.stopPropagation();
    frontPort = $(this).data('frontport');
    currObj = global.selectObj;
    _ref = currObj.data.openList.listener;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      obj = _ref[i];
      if (obj.listenerPort === frontPort) {
        currObj.data.openList.listener.splice(i, 1);
        break;
      }
    }
    $("#port" + frontPort).remove();
  },
  addEcsToSlbHtml: function(slbId, ecsId, ecsName, len, val, parentEcsId) {
    var html;
    $('#addSLBNum').text(len);
    html = "<div id='div_" + ecsId + "' class='div_" + (tools.getNodeIdByInstanceId(ecsId)) + " row slb-height-row'><div class='col-md-6 font12 title-height long-txt' title='" + ecsName + "'>" + ecsName + "</div><div class='paddingLeft0 paddingRight0 col-md-2 font12 title-height'><input type='text' id='input_" + ecsId + "' class='form-control input-sm' value='" + val + "'/></div><div class='paddingRight0 col-md-3 font12 title-height' style='padding-right:4px'><a href=\"javascript:domFunc.editWeight('" + slbId + "','" + ecsId + "')\">保存</a><a style='float:right' href=\"javascript:domFunc.delEcsToSlbHtml('" + slbId + "','" + ecsId + "','" + parentEcsId + "')\">移除</a></div></div>";
    $('#slb-ecs-content').append(html);
  },
  delEcsToSlbHtml: function(slbId, ecsId, parentEcsId) {
    var arr, ecs, i, lineObj, pLineObj, pecs, server, slb, val, _ecs, _i, _j, _len, _len1, _ref;
    slb = layer.find("#" + (tools.getNodeIdByInstanceId(slbId)))[0];
    ecs = layer.find("#" + (tools.getNodeIdByInstanceId(ecsId)))[0];
    pecs = layer.find("#" + (tools.getNodeIdByInstanceId(parentEcsId)))[0];
    _ref = pecs.data.openLists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ecs = _ref[_i];
      arr = slb.data.openList.backendServer;
      for (i = _j = 0, _len1 = arr.length; _j < _len1; i = ++_j) {
        server = arr[i];
        if (tools.getNodeIdByInstanceId(server.serverId) === tools.getNodeIdByInstanceId(_ecs.instanceId)) {
          arr.splice(i, 1);
          $(".div_" + (tools.getNodeIdByInstanceId(_ecs.instanceId))).remove();
          lineObj = canFunc.hasLineOnCom(slb, pecs);
          pLineObj = canFunc.hasLineOnCom(slb, pecs.getParent());
          if (lineObj.length > 0) {
            canFunc.delLineObj(lineObj[0]);
          }
          if (pLineObj.length > 0) {
            canFunc.delLineObj(pLineObj[0]);
          }
          val = $('#slb-ecs-content .row').length;
          $('#addSLBNum').text(val);
          break;
        }
      }
    }
  },
  editWeight: function(slbId, ecsId) {
    var arr, i, server, _i, _len;
    arr = layer.find("#" + slbId)[0].data.openList.backendServer;
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      server = arr[i];
      if (server.serverId === ecsId) {
        server.weight = $("#input_" + ecsId).val();
        break;
      }
    }
  },
  showSlbPortSetting: function(e) {
    var pos;
    $('#slbSessionSetting, #slbCheckSetting').hide();
    pos = tools.convertPagePos(e, 'click');
    $('#slbPortSetting').css({
      top: pos.y - 130,
      right: 122
    }).show();
    $('#hd_slbport').val($(this).attr('id'));
    $('#hd_slbprotocol').val($(this).data('protocol'));
    domFunc.setSlbPortStyle();
  },
  createPreviewListHtml: function() {
    $('#preview-list').html(render.process.preview(data));
    domFunc.perfromCreateExcelExport();
  },
  closeRemarkDialog: function() {
    $('.description-dialog').remove();
  },
  previewListData: function() {
    var preview_data;
    preview_data = {};
    preview_data.ecs = 'CPU,内存,数据盘,带宽,操作系统,购买方式,购买时长,数量\r\n';
    preview_data.rds = '数据库,版本,容量,内存,购买时长,数量\r\n';
    preview_data.slb = 'SLB名称, SLB类型, SLB服务端口/后端ECS端口, 后端ECS名称\r\n';
    preview_data.oss = 'OSS Bucket\r\n';
    $('input[name="preview[ecs]"]').each(function() {
      return preview_data.ecs += $(this).val() + '\r\n';
    });
    $('input[name="preview[rds]"]').each(function() {
      return preview_data.rds += $(this).val() + '\r\n';
    });
    $('input[name="preview[slb]"]').each(function() {
      return preview_data.slb += $(this).val() + '\r\n';
    });
    $('input[name="preview[oss]"]').each(function() {
      return preview_data.oss += $(this).val() + '\r\n';
    });
    return $.toJSON(preview_data);
  },
  onRightBoardClick: function() {
    $('#slbPortSetting').hide();
    $('#hd_slbport').val('');
  },
  perfromCreateExcelExport: function() {
    var exportJson, url;
    exportJson = domFunc.previewListData();
    url = resources.exportExcelUrl + exportJson;
    $('#export-xls').attr('href', url);
  },
  onSlbListenerAttrChange: function() {
    var key, left, port, top, value;
    port = $('#hd_slbport').val().substring(4);
    key = $(this).data('attr');
    value = $(this).val();
    switch (key) {
      case 'healthCheck':
        $('#slbSessionSetting').hide();
        if (!$("input[data-attr=" + key + "]:checked").length) {
          value = 'off';
          $('#slbCheckSetting').hide();
        } else {
          top = 50;
          left = -240;
          if ($('#hd_slbprotocol').val() === 'http') {
            $('.for-tcp').hide();
            $('.for-http').show();
            $('.slbCheckSetting-arrow').css({
              top: 70
            });
          } else {
            $('.for-http').hide();
            $('.for-tcp').show();
            top = 88;
            left = -240;
            $('.slbCheckSetting-arrow').css({
              top: 32
            });
          }
          $('#slbCheckSetting').css({
            top: top,
            left: left
          }).show();
        }
        break;
      case 'stickySession':
        $('#slbCheckSetting').hide();
        if (!$("input[data-attr=" + key + "]:checked").length) {
          value = 'off';
          $('#slbSessionSetting').hide();
        } else {
          if ($('#hd_slbprotocol').val() === 'http') {
            $('.for-tcp').hide();
            $('.for-http').show();
          } else {
            $('.for-tcp').show();
            $('.for-http').hide();
          }
          $('#slbSessionSetting').css({
            top: 50,
            left: -240
          }).show();
        }
        break;
      case 'xForwardedFor':
        if (!$("input[data-attr=" + key + "]:checked").length) {
          value = 'off';
        }
        break;
      case 'interval':
        value = Number(value);
        break;
      case 'unhealthyThreshold':
      case 'healthyThreshold':
      case 'healthCheckTimeout':
      case 'cookieTimeout':
      case 'connectTimeout':
      case 'persitenceTimeout':
        value = Number(value);
    }
    canFunc.setSlbListenerAttr(key, value, port);
  },
  changeLineType: function() {
    var type, _this;
    _this = $(this);
    type = _this.data('type');
    tools.setLineType(def.lineType[type]);
    if (type === 'rightAngle') {
      _this.data('type', 'bight');
      $('#img_linestyle').attr('src', '/img/top_line.png');
      _this.attr('title', '转为曲线');
    } else {
      _this.data('type', 'rightAngle');
      $('#img_linestyle').attr('src', '/img/top_curveline.png');
      _this.attr('title', '转为折线');
    }
  },
  previewBtnClickEvent: function() {
    var k, need_break, slb_item;
    if (!tools.isAllOk('ecs')) {
      $.notify({
        msg: '画布上存在未设置镜像的ECS，请先设置镜像',
        type: 'warning'
      });
      $('#canvasExportBtn').removeClass('eye-close');
      return false;
    }
    $('#preview a[href="#preview-pic"]').tab('show');
    $('#preview .modal-dialog').css({
      'width': '1000px'
    });
    need_break = 0;
    for (k in data.slb) {
      slb_item = data.slb[k];
      if ("undefined" === typeof slb_item.openList.listener || slb_item.openList.listener.length === 0) {
        $.notify({
          msg: 'SLB(' + slb_item.name + ')未设置服务端口,请设置服务端口',
          type: 'warning'
        });
        need_break = 1;
      }
      if ("undefined" === typeof slb_item.openList.backendServer || slb_item.openList.backendServer.length === 0) {
        $.notify({
          msg: 'SLB(' + slb_item.name + ')没有后端服务器,请添加后端服务器',
          type: 'warning'
        });
        need_break = 1;
      }
    }
    if (need_break === 1) {
      return false;
    } else {
      $('#preview .modal-body #preview-list').html(render.process.preview(data));
      domFunc.perfromCreateExcelExport();
      if (false === $('#preview .modal-body').animate({
        scrollTop: 0
      }, 1000)) {
        $('#preview .modal-body').scrollTo(0, 0);
      }
      return true;
    }
  },
  setSlbPortStyle: function() {
    var arr, attr, currObj, i, o_port, port, _i, _len;
    currObj = global.selectObj;
    o_port = $('#hd_slbport').val();
    port = o_port.substr(4);
    arr = currObj.data.openList.listener;
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      attr = arr[i];
      if (attr.listenerPort === Number(port)) {
        $('#slb-transmitReg').val(attr.scheduler);
        if (attr.xForwardedFor === 'on') {
          $('#slb-getRealIp').iCheck('check');
        } else {
          $('#slb-getRealIp').iCheck('uncheck');
        }
        if (attr.stickySession === 'on') {
          $('#slb-keepSession').iCheck('check');
        } else {
          $('#slb-keepSession').iCheck('uncheck');
        }
        if (attr.healthCheck === 'on') {
          $('#slb-checkHealth').iCheck('check');
        } else {
          $('#slb-checkHealth').iCheck('uncheck');
        }
        $('#slb-httpCookieMethod').val(attr.stickySessionType);
        $('#slb-httpExpiredTime').val(attr.cookieTimeout);
        $('#slb-checkDomain').val(attr.domain);
        $('#slb-checkPath').val(attr.uri);
        $('#slb-checkResponseTime').val(attr.healthCheckTimeout);
        $('#slb-checkHangupTime').val(attr.interval);
        $('#slb-checkIllThreshold').val(attr.unhealthyThreshold);
        $('#slb-checkHealthThreshold').val(attr.healthyThreshold);
        $('#slb-tcpConnectTime').val(attr.connectTimeout);
        $('#slb-tcpPersitenceTime').val(attr.persitenceTimeout);
        $('#slbSessionSetting').hide();
        $('#slbCheckSetting').hide();
        break;
      }
    }
  },
  onEcsOsChange: function() {
    var currObj, ecsOs;
    ecsOs = $('#ecs-os option:selected').val();
    currObj = global.selectObj;
    currObj.setOsVal(ecsOs);
    layer.batchDraw();
  },
  onStructNameInputBlur: function() {},
  onStructNameClick: function() {
    var structName, structNameInput;
    $(this).hide();
    structName = $('#structname').attr('title');
    structNameInput = $('#structNameInput');
    structNameInput.val(structName).show().focus();
  },
  setStructName: function() {
    var displayName, name, structName;
    name = $('#structNameInput').val();
    displayName = domFunc.showOverflowText(name, 14);
    if (name) {
      structName = $('#structname');
      structName.text(displayName).attr('title', name).show();
      $.cookie('structname', name);
      $(this).hide();
      domFunc.initTopWidth();
    } else {
      $.notify({
        msg: "项目名不能为空",
        type: 'warning'
      });
    }
  },
  onStructNameInputClick: function(e) {
    if (e.keyCode === 13) {
      return $(this).blur();
    }
  },
  onSaveRemark: function() {
    var comObj, com_desc, com_name, line, lineDesc, lineId, lineName, old_desc, old_name, validResult, _com, _comObj, _comObjIndex, _i, _len, _ref;
    _com = stage.find('#' + $('input[name="com_id"]').not(':visible').val());
    if (_com.length > 0) {
      comObj = _com[0];
      if (!comObj) {
        return;
      }
      com_name = $.trim($('.description-dialog #com_name').val());
      com_desc = $.trim($('.description-dialog textarea[name="com_desc"]').val());
      validResult = $.validate(com_name, ['name_require', 'name_available_en_cn_len64']);
      if (validResult) {
        old_name = comObj.data.name;
        old_desc = comObj.data.remark;
        if (com_name !== old_name || com_desc !== old_desc) {
          comObj.setTitleText(com_name);
          comObj.setData('remark', com_desc);
          if (comObj.kind === 'ecs' && comObj.data.openLists.length > 1) {
            _ref = comObj.data.openLists;
            for (_comObjIndex = _i = 0, _len = _ref.length; _i < _len; _comObjIndex = ++_i) {
              _comObj = _ref[_comObjIndex];
              _comObj.instanceName = com_name + (_comObjIndex + 1);
            }
          }
          domFunc.showRemark(comObj);
          $.notify({
            msg: '名称和描述已保存!',
            type: 'success',
            timeout: 1000
          });
          canFunc.saveHistory();
          layer.batchDraw();
        }
      } else {
        $('.description-dialog').remove();
      }
    }
    if ($('#dialog-line-tips:visible').size() > 0) {
      lineId = $('#dialog-line-tips #line-id').val();
      lineName = $.trim($('#dialog-line-tips #line-name').val());
      lineDesc = $.trim($('#dialog-line-tips #line-desc').val());
      line = data.line[lineId];
      if (line && lineName) {
        if (line.name !== lineName || line.desc !== lineDesc) {
          line.name = lineName;
          line.desc = lineDesc;
          $.notify({
            msg: '名称和描述已保存!',
            type: 'success',
            timeout: 1000
          });
          global.isChangeRemark = 0;
          canFunc.saveHistory();
        }
      }
      $('#dialog-line-tips').hide();
    }
  },
  onLayerSaveRemark: function() {
    var currObj, desc, name, _currObj;
    if (!global.isChangeRemark) {
      return;
    }
    if (parseInt($('#right-board').css('margin-right')) >= 0) {
      name = $.trim($("#layer_name").val());
      desc = $.trim($("#layer_desc").val());
      _currObj = stage.find("#" + $('#layer_id').val());
      if (_currObj.length > 0) {
        currObj = _currObj[0];
        if (currObj.data.kind !== "layer") {
          return false;
        }
        if (name !== "") {
          currObj.setTitleText(name);
        }
        currObj.setData('remark', desc);
        global.isChangeRemark = 0;
        canFunc.saveHistory();
        layer.batchDraw();
      }
    }
  },
  onCreateSnapshotTrigger: function() {
    var disk;
    disk = "1006-600756";
    $.msg.prompt("快照名称: ", "", "创建快照", function(name) {
      return $.notify({
        msg: "进度: 1% " + "正在给" + disk + "创建快照:" + name
      });
    }, "快照名称为2-15个字符");
  },
  onListCustomImage: function() {
    $.getJSON('api/image/list/self', function(json) {});
  },
  onRegionCheckClick: function() {
    var regionCheck;
    regionCheck = $(this).val();
    $.cookie('regionId', regionCheck);
  },
  onComListModelBtnClick: function(e, isFromStruct) {
    var isStruct, postData, regionCheck;
    domFunc.clearSelectComList();
    isStruct = false;
    if (tools.isMapped() && (Object.size(global.selectComObjList) === Object.size(global.comList)) && !isFromStruct) {
      postData = {
        accessKeyId: global.accessKeyId,
        accessKeySec: global.accessKeySec,
        regionId: $.cookie('regionId'),
        ownerAccount: def.ownerAccount
      };
      domFunc.getAllCom(postData, '3', domFunc.getComList);
    } else {
      if (isFromStruct) {
        isStruct = true;
        $('#btn-struct-accessKey').show();
        $('#btn-accessKey').hide();
      } else {
        $('#btn-struct-accessKey').hide();
        $('#btn-accessKey').show();
      }
      $('#comListModel li[data-select=img] a').trigger('click');
      $('#img-view li[data-init=selected] a').trigger('click');
      $('#access-error,#selectModalError').text('');
      $('#accessKeyId').val(global.accessKeyId);
      $('#accessKeySec').val(global.accessKeySec);
      if (global.comlistData) {
        domFunc.getComList(global.comlistData, '1');
      } else {
        regionCheck = $.cookie('regionId') != null ? $.cookie('regionId') : 'cn-hangzhou';
        $("input[name=regionCheck][value='" + regionCheck + "']").iCheck('check');
        $('input[name=regionCheck]').iCheck('disable');
        if ($.cookie('loginMail') != null) {
          if (tools.isMapped()) {
            if (isStruct) {
              domFunc.postDataToGetComList(global.accessKeyId, global.accessKeySec, $.cookie('loginMail'), $.cookie('regionId'), 'struct');
            } else {
              domFunc.postDataToGetComList(global.accessKeyId, global.accessKeySec, $.cookie('loginMail'), $.cookie('regionId'));
            }
          } else {
            $('#accessKeyModal').modal('show');
          }
        } else {
          $('#loginModal').modal('show');
        }
      }
    }
  },
  onReBindComListBtnClick: function() {
    $('#selectModalError').text('');
    global.comlistData = '';
    domFunc.setTimeoutFunc(true);
  },
  onAccessSubmit: function() {
    var accessKeyId, accessKeySec;
    accessKeyId = $('#accessKeyId').val().trim();
    accessKeySec = $('#accessKeySec').val().trim();
    if (!(accessKeyId || accessKeySec)) {
      $('#access-error').text('密钥信息填写完整');
      return;
    }
    if (!tools.isMapped()) {
      domFunc.postDataToGetComList(accessKeyId, accessKeySec, $.cookie('loginMail'), $.cookie('regionId'));
    }
  },
  onStructAccessSubmit: function() {
    var accessKeyId, accessKeySec;
    accessKeyId = $('#accessKeyId').val().trim();
    accessKeySec = $('#accessKeySec').val().trim();
    if (!(accessKeyId || accessKeySec)) {
      $('#access-error').text('密钥信息填写完整');
      return;
    }
    domFunc.postDataToGetComList(accessKeyId, accessKeySec, $.cookie('loginMail'), $.cookie('regionId'), 'struct');
  },
  postDataToGetComList: function(accessKeyId, accessKeySec, ownerAccount, regionId, isRunInBack) {
    var postData;
    postData = {
      accessKeyId: accessKeyId,
      accessKeySec: accessKeySec,
      regionId: regionId
    };
    if (isRunInBack) {
      if (isRunInBack === 'struct') {
        domFunc.getAllCom(postData, '3', domFunc.getComList);
      } else {
        domFunc.getAllCom(postData, '2', domFunc.getComList);
      }
    } else {
      if ($.cookie('synchrotype') === 'task_confirm') {
        domFunc.getAllCom(postData, '3', domFunc.getComList);
      } else {
        domFunc.getAllCom(postData, '1', domFunc.getComList);
      }
    }
  },
  getAllCom: function(postData, parm, callback, isback) {
    var successCallback;
    successCallback = function(data) {
      global.timeoutHandle = setTimeout(function() {
        domFunc.setTimeoutFunc();
      }, 10000);
      if (parm) {
        callback(data, parm);
        return;
      }
      callback(data);
    };
    if (isback) {
      $.post('/api/allcom', postData, successCallback);
    } else {
      tools.post('/api/allcom', postData, successCallback, '正在同步阿里云产品信息，请稍后...', 120000, '', function(err) {
        if (err.statusText === 'timeout') {
          $.notify({
            msg: '同步阿里云产品信息超时',
            type: 'warning'
          });
        } else {
          $('#access-error').text('密钥信息不正确');
        }
      });
    }
  },
  onComListModelShow: function() {
    $('#comListModelLabel').text('已关联组件');
    $('#comListModel_step1').show();
    $('#comListModel_step2').hide();
    global.isOpenComListModal = true;
  },
  onComListModelHide: function() {
    global.isOpenComListModal = false;
    global.comSelectedInComListModal = {};
    global.tabPaneActive = {};
  },
  updateSelectComStatus: function(selectComObjList) {
    var nodeCom, tmpStatus, _com, _comindex, _ecs, _ecsid, _i, _len, _ol, _olindex, _ref, _ref1, _status;
    for (_comindex in selectComObjList) {
      _com = selectComObjList[_comindex];
      nodeCom = layer.find("#" + (tools.getNodeIdByInstanceId(_comindex)))[0];
      if (global.comList[_comindex]) {
        if (nodeCom.kind === 'ecs') {
          _status = _com.Status ? _com.Status : _com.status;
          nodeCom.setStatusStyle(_status);
        } else {
          nodeCom.setStatusStyle('Running');
        }
      } else {
        canFunc.destroyObj(nodeCom);
      }
    }
    tmpStatus = '';
    _ref = data.ecs;
    for (_ecsid in _ref) {
      _ecs = _ref[_ecsid];
      if (_ecs.openList.isOpen && _ecs.openLists.length > 1) {
        _ref1 = _ecs.openLists;
        for (_olindex = _i = 0, _len = _ref1.length; _i < _len; _olindex = ++_i) {
          _ol = _ref1[_olindex];
          if (_olindex === 0) {
            tmpStatus = _ol.status;
          }
          if (tmpStatus !== _ol.status) {
            layer.find("#" + _ecsid)[0].setStatusStyle('');
            break;
          }
        }
      }
    }
  },
  getComList: function(_data, type) {
    var comImgListHtml, comList, comListHtml, count, rs, _com, _scom;
    global.comList = {};
    rs = $.evalJSON(_data);
    comList = rs.data;
    comListHtml = '';
    comImgListHtml = '';
    switch (type) {
      case '1':
        if (!comList || comList.code) {
          $('#access-error').text('密钥信息不正确');
          return;
        }
        $('#accessKeyModal').modal('hide');
        $('#comListModel').modal('show');
        if (!global.accessKeyId) {
          global.accessKeyId = $('#accessKeyId').val().trim();
          global.accessKeySec = $('#accessKeySec').val().trim();
        }
        break;
      case '2':
        if (comList.code) {
          $.notify({
            msg: "密钥信息不正确",
            type: 'warning'
          });
          return;
        }
        break;
      case '3':
        if (comList.code) {
          $('#access-error').text('密钥信息不正确');
          return;
        }
        $('#accessKeyModal').modal('hide');
        if (!global.accessKeyId) {
          global.accessKeyId = $('#accessKeyId').val().trim();
          global.accessKeySec = $('#accessKeySec').val().trim();
        }
        break;
      default:
        if (!comList || comList.code) {
          $('#access-error').text('密钥信息不正确');
          return;
        }
        $('#accessKeyModal').modal('hide');
        $('#comListModel').modal('show');
    }
    domFunc.updateSelectComStatus(global.selectComObjList);
    domFunc.listComlist(_data, global.isOpenComListModal);
    tools.addIcheckStyle($('#comListModel input'));
    count = 0;
    for (_com in global.comList) {
      count++;
    }
    for (_scom in global.selectComObjList) {
      count--;
    }
    if (count > 0) {
      $('#selectAll').removeAttr('disabled');
    } else {
      $('#selectAll').attr('disabled', 'disabled');
    }
    domFunc.getSecgroupList();
    domFunc.displayComListNum();
    switch (type) {
      case '1':
        if ($.cookie('synchrotype') === 'task_confirm') {
          $('#task-confirm-btn').trigger('click');
        }
        break;
      case '2':
        return;
      case '3':
        if ($.cookie('synchrotype') === 'task_confirm') {
          $.notify({
            msg: '开始同步任务，请留意通知中心的消息。'
          });
          $('#task-confirm-btn').trigger('click');
          $.removeCookie('synchrotype');
        }
    }
  },
  listComlist: function(_data, isOpenComListModal) {
    var comImgListHtml, comList, comListHtml, cpu, cpu_mem, ecsArr, mem, monitorPostData, monitorPostDataArr, ossArr, rdsArr, rs, slbArr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _val;
    global.comlistData = _data;
    global.comList = {};
    rs = $.evalJSON(_data);
    comList = rs.data;
    comListHtml = '';
    comImgListHtml = '';
    if ((!isOpenComListModal) || (Object.size(global.tabPaneActive) <= 0)) {
      global.tabPaneActive['ecs'] = 'active';
    }
    comListHtml += "<div id='ecs-comlist' class='tab-pane " + global.tabPaneActive['ecs'] + "'>";
    comListHtml += "<div class='comList-index comList-index-title'><div class='col-md-1 comlist-index-right-line'>&nbsp;</div><div class='col-md-4 comlist-index-right-line t-align-center font14'>名称</div><div class='col-md-7 font14'>公网IP/内网IP</div></div>";
    comImgListHtml += "<div id='ecs-comimglist' class='tab-pane " + global.tabPaneActive['ecs'] + "'>";
    comImgListHtml += "<ul class='ul-comimglist'>";
    ecsArr = comList.ecs;
    monitorPostDataArr = [];
    for (_i = 0, _len = ecsArr.length; _i < _len; _i++) {
      _val = ecsArr[_i];
      monitorPostData = {
        instanceId: _val.InstanceId,
        accessKeyId: global.accessKeyId,
        accessKeySec: global.accessKeySec,
        ownerAccount: def.ownerAccount
      };
      monitorPostDataArr.push(monitorPostData);
      if (!global.selectComObjList[_val.InstanceId]) {
        comListHtml += "<div><div class='col-md-1 comList-index comlist-index-right-line'><input type='checkbox' name='comcheck' data-type='ecs' data-value='" + _val.InstanceId + "' " + (global.comSelectedInComListModal[_val.InstanceId] ? 'checked' : void 0) + " /></div><div class='col-md-4 comList-index comlist-index-right-line t-align-center'><label><div class='font12 comList-font-color'>" + _val.InstanceName + "</div></label></div><div class='col-md-7 comList-index font12 comList-font-color'>" + (!_val.PublicIpAddress[0] ? '无' : _val.PublicIpAddress[0]) + "/" + _val.InnerIpAddress[0] + "</div></div><div class='clearfix'></div>";
        cpu_mem = def.counterInstanceType[_val.InstanceType].split('-');
        cpu = cpu_mem[0];
        mem = tools.getAutoUnit(Number(cpu_mem[1]) * 1024, 1024);
        comImgListHtml += "<li class='li-comimg " + global.comSelectedInComListModal[_val.InstanceId] + "'> <div data-value='" + _val.InstanceId + "' class='com-img com-ecs-img'> <div class='ecs-comimg-status'></div> <div class='ecs-comimg-op'><img src='" + resources.loadImages[tools.getOsType(_val.ImageId) + 'Icon'] + "' /></div> <div class='ecs-comimg-bit'><img src='" + resources.loadImages['com' + tools.getOsBit(_val.ImageId, true).toString() + 'bits'] + "' /></div> <div class='ecs-comimg-code'><img src='" + resources.loadImages['comCode'] + "' /></div> <div class='ecs-comimg-instanceType'>" + cpu + "核" + mem + "</div> <div class='ecs-comimg-bandwidth'>" + _val.InternetMaxBandwidthOut + "M</div> <div class='ecs-comimg-disknum'>" + _val.Disk.length + "</div> <p class='font12 com-img-info com-img-title com-img-title-top' title='" + _val.InstanceName + "'>" + _val.InstanceName + "</p> </div> </li>";
      } else {
        global.selectComObjList[_val.InstanceId].status = _val.Status;
      }
      global.comList[_val.InstanceId] = {
        type: 'ecs',
        info: _val
      };
    }
    comListHtml += "</div><div id='rds-comlist' class='tab-pane " + global.tabPaneActive['rds'] + "'>";
    comListHtml += "<div class='comList-index comList-index-title'><div class='col-md-1 comlist-index-right-line'>&nbsp;</div><div class='col-md-4 comlist-index-right-line t-align-center font14'>名称</div><div class='col-md-7 font14'>实例ID</div></div>";
    comImgListHtml += "</ul></div><div id='rds-comimglist' class='tab-pane " + global.tabPaneActive['rds'] + "'>";
    comImgListHtml += "<ul class='ul-comimglist'>";
    $.post('/monitor/create', {
      monitors: monitorPostDataArr
    });
    rdsArr = comList.rds;
    for (_j = 0, _len1 = rdsArr.length; _j < _len1; _j++) {
      _val = rdsArr[_j];
      if (!global.selectComObjList[_val.DBInstanceId]) {
        comListHtml += "<div><div class='col-md-1 comList-index comlist-index-right-line'><input type='checkbox' name='comcheck' data-type='rds' data-value='" + _val.DBInstanceId + "' " + (global.comSelectedInComListModal[_val.DBInstanceId] ? 'checked' : void 0) + "/></div><div class='col-md-4 comList-index comlist-index-right-line t-align-center '><label><div class='font12 comList-font-color'>" + _val.DBInstanceId + "</div></label></div><div class='col-md-7 comList-index font12 comList-font-color'>" + _val.DBInstanceId + "</div></div><div class='clearfix'></div>";
        comImgListHtml += "<li class='li-comimg " + global.comSelectedInComListModal[_val.DBInstanceId] + "'><div data-value='" + _val.DBInstanceId + "' class='com-img com-rds-img'><p class='font12 com-img-info com-img-title com-img-title-top' title='" + _val.DBInstanceId + "'>" + _val.DBInstanceId + "</p></div></li>";
      }
      global.comList[_val.DBInstanceId] = {
        type: 'rds',
        info: _val
      };
    }
    comListHtml += "</div><div id='slb-comlist' class='tab-pane " + global.tabPaneActive['slb'] + "'>";
    comListHtml += "<div class='comList-index comList-index-title'><div class='col-md-1 comlist-index-right-line'>&nbsp;</div><div class='col-md-4 comlist-index-right-line t-align-center font14'>名称</div><div class='col-md-7 font14'>负载均衡ID</div></div><div class='clearfix'></div>";
    comImgListHtml += "</ul></div><div id='slb-comimglist' class='tab-pane " + global.tabPaneActive['slb'] + "'>";
    comImgListHtml += "<ul class='ul-comimglist'>";
    slbArr = comList.slb;
    for (_k = 0, _len2 = slbArr.length; _k < _len2; _k++) {
      _val = slbArr[_k];
      if (!global.selectComObjList[_val.LoadBalancerId]) {
        comListHtml += "<div><div class='col-md-1 comList-index comlist-index-right-line'><input type='checkbox' name='comcheck' data-type='slb' data-value='" + _val.LoadBalancerId + "' " + (global.comSelectedInComListModal[_val.LoadBalancerId] ? 'checked' : void 0) + "/></div><div class='col-md-4 comList-index comlist-index-right-line t-align-center'><label><div class='font12 comList-font-color'>" + _val.LoadBalancerName + "</div></label></div><div class='col-md-7 comList-index font12 comList-font-color'>" + _val.LoadBalancerId + "</div></div><div class='clearfix'></div>";
        comImgListHtml += "<li class='li-comimg " + global.comSelectedInComListModal[_val.LoadBalancerId] + "'><div data-value='" + _val.LoadBalancerId + "' class='com-img com-slb-img'><p class='font12 com-img-info com-img-title com-img-title-top' title='" + _val.LoadBalancerName + "'>" + _val.LoadBalancerName + "</p></div></li>";
      }
      global.comList[_val.LoadBalancerId] = {
        type: 'slb',
        info: _val
      };
    }
    comListHtml += "</div><div id='oss-comlist' class='tab-pane " + global.tabPaneActive['oss'] + "'>";
    comListHtml += "<div class='comList-index comList-index-title'><div class='col-md-1 comlist-index-right-line'>&nbsp;</div><div class='col-md-11 font14'>名称</div></div><div class='clearfix'></div>";
    comImgListHtml += "</ul></div><div id='oss-comimglist' class='tab-pane " + global.tabPaneActive['oss'] + "'>";
    comImgListHtml += "<ul class='ul-comimglist'>";
    ossArr = comList.oss;
    for (_l = 0, _len3 = ossArr.length; _l < _len3; _l++) {
      _val = ossArr[_l];
      if (!global.selectComObjList[_val.Name]) {
        comListHtml += "<div><div class='col-md-1 comList-index comlist-index-right-line'><input type='checkbox' name='comcheck' data-type='oss' data-value='" + _val.Name + "' " + (global.comSelectedInComListModal[_val.Name] ? 'checked' : void 0) + "/></div><div class='col-md-11 comList-index'><label><div class='font12 comList-font-color'>" + _val.Name + "</div></label></div></div><div class='clearfix'></div>";
        comImgListHtml += "<li class='li-comimg " + global.comSelectedInComListModal[_val.Name] + "'><div data-value='" + _val.Name + "' class='com-img com-oss-img'><p class='font12 com-img-info com-img-title com-img-title-top' style='height:14px;' title='" + _val.Name + "'>" + _val.Name + "</p></div></li>";
      }
      global.comList[_val.Name] = {
        type: 'oss',
        info: _val
      };
    }
    comListHtml += "</div>";
    comImgListHtml += "</ul></div>";
    $('#modalComListFrame').html(comListHtml);
    $('#modalComImgListFrame').html(comImgListHtml);
    $.post('/comlogininfo/list', domFunc.setComLoginInfo);
    domFunc.getImageList();
    domFunc.getSnapshotsList();
    global.synchronized = true;
  },
  ulViewSelectClick: function() {
    var instanceId, selected, type, _ref;
    global.comSelectedInComListModal;
    global.tabPaneActive;
    if ($(this).data('select') === 'list') {
      $("#modalComListFrame input[name=comcheck]").iCheck('uncheck');
      for (type in global.tabPaneActive) {
        $("#list-view ul.nav-pills a[href=#" + type + "-comlist]").trigger('click');
      }
      for (instanceId in global.comSelectedInComListModal) {
        $("#modalComListFrame input[name=comcheck][data-value=" + instanceId + "]").iCheck('check');
      }
    } else {
      $("#modalComImgListFrame .com-img").parent().removeClass('com-img-selected');
      for (type in global.tabPaneActive) {
        $("#img-view ul.nav-pills a[href=#" + type + "-comimglist]").trigger('click');
      }
      _ref = global.comSelectedInComListModal;
      for (instanceId in _ref) {
        selected = _ref[instanceId];
        $("#modalComImgListFrame .com-img[data-value=" + instanceId + "]").parent().addClass(selected);
      }
    }
  },
  imgViewTabClick: function() {
    var tabPaneType;
    tabPaneType = $(this).children('a').attr('href').substring(1).split('-')[0];
    global.tabPaneActive = {};
    global.tabPaneActive[tabPaneType] = 'active';
  },
  onComCheckClick: function() {
    var instanceId;
    $('#access-error,#selectModalError').text('');
    instanceId = $(this).data('value');
    global.comSelectedInComListModal[instanceId] = 'com-img-selected';
    if ($(this).filter(':checked').length) {
      delete global.comSelectedInComListModal[instanceId];
    }
  },
  setComLoginInfo: function(_data) {
    var jsond, _i, _len;
    for (_i = 0, _len = _data.length; _i < _len; _i++) {
      jsond = _data[_i];
      global.comlistinfoData[jsond.instanceid] = jsond;
    }
  },
  onSelectAllClick: function() {
    $('#selectLayer').removeAttr('disabled');
    $('#access-error,#selectModalError').text('');
    domFunc.onSelectLayer(global.comList, true);
  },
  onSelectComClick: function() {
    var select, selectComArr;
    $('#selectLayer').removeAttr('disabled');
    select = $('#ul-view-select li.active').data('select');
    selectComArr = [];
    if (select === 'list') {
      selectComArr = $('input[name=comcheck]:checked');
    } else {
      selectComArr = $('.com-img-selected .com-img');
    }
    if (selectComArr.length === 0) {
      $('#selectModalError').text('请选择组件');
    } else {
      domFunc.onSelectLayer(selectComArr);
    }
  },
  onSelectLayer: function(comlist, isAll) {
    var com, comid, needOldLayer, selectCom, _i, _len;
    needOldLayer = true;
    domFunc.clearSelectComList();
    if (isAll) {
      needOldLayer = false;
      for (comid in comlist) {
        com = comlist[comid];
        if (!global.selectComObjList[comid]) {
          global.selectComList.push(com);
        }
      }
    } else {
      for (_i = 0, _len = comlist.length; _i < _len; _i++) {
        selectCom = comlist[_i];
        global.selectComList.push(global.comList[$(selectCom).data('value')]);
      }
    }
    $('#comListModelLabel').text('选择层');
    $('#comListModel_step1').hide();
    $('#comListModel_step2').show();
    domFunc.loadOldLayer(needOldLayer);
    domFunc.selectLayerModelInit();
  },
  selectLayerModelInit: function() {
    $('input[name=rd_selectLayer][data-value=newlayer]').iCheck('check');
    $('#selectLayer_layerName').val('未命名层');
    $('#selectLayerModalError').text('');
    if (!$('#combineEcs:checked').length) {
      $('#combineEcs').trigger('click');
    }
  },
  loadOldLayer: function(needOldLayer) {
    var layer, layerArr, layerId, oldLayerListHtml;
    oldLayerListHtml = '';
    if (needOldLayer && Object.size(data.layer) > 0) {
      $('.select-oldLayer').show();
      layerArr = data.layer;
      for (layerId in layerArr) {
        layer = layerArr[layerId];
        oldLayerListHtml += "<option data-layerid='" + layer.id + "' data-layername='" + layer.name + "'>" + layer.name + "</option>";
      }
    } else {
      $('.select-oldLayer').hide();
    }
    $('#selectLayer_layerNameList').html(oldLayerListHtml);
    tools.addIcheckStyle($('#selectLayer_layerNameList input'), 'radio');
  },
  onLayerNameListClick: function() {
    $('input[name=rd_selectLayer][data-value=oldlayer]').iCheck('check');
  },
  onRdSelectLayerClick: function() {
    var selectVal;
    selectVal = $(this).data('value');
    if (selectVal === 'newlayer') {
      $('#selectLayer_layerName').removeAttr('disabled');
      $('#selectLayer_layerNameList').attr('disabled', 'disabled');
    } else {
      $('#selectLayer_layerName').attr('disabled', 'disabled');
      $('#selectLayer_layerNameList').removeAttr('disabled');
    }
  },
  onComImgClick: function() {
    var instanceId;
    $('#access-error,#selectModalError').text('');
    $(this).toggleClass('com-img-selected');
    instanceId = $(this).children('.com-img').data('value');
    global.comSelectedInComListModal[instanceId] = 'com-img-selected';
    if (!$(this).hasClass('com-img-selected')) {
      delete global.comSelectedInComListModal[instanceId];
    }
  },
  go2comListModelStep1Click: function() {
    $('#comListModel_step2').hide();
    $('#comListModel_step1').show();
  },
  onSelectLayerClick: function() {
    var isCombine, isNewLayer, layerForm, layerId, layerName, oldlayer;
    layerForm = $('input[name=rd_selectLayer]:checked').data('value');
    isCombine = $('#combineEcs:checked').length;
    isNewLayer = true;
    layerId = '';
    layerName = '';
    if (layerForm === 'newlayer') {
      layerId = "layer_" + (tools.rand());
      layerName = $('#selectLayer_layerName').val().trim();
    } else {
      oldlayer = $('#selectLayer_layerNameList option:selected');
      layerId = oldlayer.data('layerid');
      layerName = oldlayer.data('layername');
      isNewLayer = false;
    }
    if (!layerId) {
      $('#selectLayerModalError').text('选择已有层');
      return;
    } else {
      canFunc.comListAddCanvas(global.selectComList, isCombine, layerId, layerName, isNewLayer);
      $('#selectLayerModel').modal('hide');
      $('#comListModel').modal('hide');
    }
    domFunc.displayComListNum();
    $(this).attr('disabled', 'disabled');
  },
  clearSelectComList: function() {
    global.selectComList = [];
  },
  showSearch: function() {
    domFunc.initSearch();
    $('.topBtn,#userinfoBar,#notifyBtn').removeClass('visible').addClass('unvisible');
    $('#search-wrap').show();
    $('#search-text').focus();
  },
  hideSearch: function() {
    $('.topBtn,#userinfoBar,#notifyBtn').removeClass('unvisible').addClass('visible');
    $('#search-wrap').stop(true, true).fadeOut();
  },
  onClickSearchBtn: function(e) {
    e.stopPropagation();
    domFunc.showSearch();
  },
  onClickSearchWrap: function(e) {
    e.stopPropagation();
  },
  initSearchSource: function() {
    var addEcsMappedSource, addNormalSource, i, k, map, obj, sourceArr, sourceObj, _ref;
    sourceObj = $.extend({}, data.ecs, data.rds, data.slb, data.oss, data.layer);
    sourceArr = [];
    addNormalSource = function(obj) {
      var _temp;
      _temp = {
        id: obj.id,
        name: obj.name,
        kind: obj.kind,
        category: obj.kind,
        value: obj.name,
        label: obj.kind + obj.name,
        ip: ''
      };
      return sourceArr.push(_temp);
    };
    addEcsMappedSource = function(obj, map) {
      var _ip, _label, _temp;
      if (Object.size(map.PublicIpAddress) > 0) {
        _label = obj.kind + obj.name + map.PublicIpAddress[0] + map.InnerIpAddress[0];
        _ip = map.PublicIpAddress[0] + ' / ' + map.InnerIpAddress[0];
      } else {
        _label = obj.kind + obj.name;
        _ip = '';
      }
      _temp = {
        id: obj.id,
        name: obj.name,
        kind: obj.kind,
        category: obj.kind,
        value: obj.name,
        ip: _ip,
        label: _label
      };
      return sourceArr.push(_temp);
    };
    for (i in sourceObj) {
      obj = sourceObj[i];
      switch (obj.kind) {
        case 'ecs':
          if (tools.isMapped() && Object.size(obj.maps) > 0) {
            _ref = obj.maps;
            for (k in _ref) {
              map = _ref[k];
              addEcsMappedSource(obj, map);
            }
          } else {
            addNormalSource(obj);
          }
          break;
        default:
          addNormalSource(obj);
      }
    }
    global.searchSource = sourceArr;
  },
  searchFocus: function(e, ui) {
    $('#search-text').val(ui.item.name);
    return false;
  },
  searchSelect: function(e, ui) {
    var id, node;
    $('#search-text').val(ui.item.name);
    id = ui.item.id;
    node = layer.find("#" + id);
    if (node.length > 0) {
      canFunc.selectNode(node[0]);
      canFunc.blinkNode(node[0]);
      tools.setCanvasCenter(node[0]);
      setTimeout(function() {
        return node[0].corners.leftTop.fire('mouseover');
      }, 500);
    }
    return false;
  },
  initSearch: function() {
    domFunc.initSearchSource();
    $('#search-text').val('');
    $('#search-text').autocomplete({
      source: global.searchSource,
      focus: domFunc.searchFocus,
      select: domFunc.searchSelect
    }).data('ui-autocomplete')._renderItem = function(ul, item) {
      var content_append;
      content_append = "<div><b>" + (item.kind.toUpperCase()) + ": </b><span class=\"info_search\">" + item.name + "</span></div>";
      if (item.ip) {
        content_append += "<div><span>IP: </span><span class=\"info_search\">" + item.ip + "</span></div>";
      }
      return $('<li>').append("<a>" + content_append + "</a>").appendTo(ul);
    };
  },
  bindSearchAutoComplete: function() {
    domFunc.initSearch();
  },
  getSecgroupList: function() {
    var data;
    if (tools.isMapped() && $.cookie('loginMail')) {
      data = {
        accessKeyId: global.accessKeyId,
        accessKeySec: global.accessKeySec,
        regionId: $.cookie('regionId'),
        ownerAccount: def.ownerAccount
      };
      $.post('/api/secgrouplist', data, domFunc.getSecgroupListCallback);
    }
  },
  getSecgroupListCallback: function(_data) {
    var json;
    json = $.evalJSON(_data);
    switch (json.code) {
      case 200:
        if (!json.data.ErrorMsg) {
          domFunc.showSecgroupList(json.data);
        }
        break;
      default:
        return;
    }
  },
  showSecgroupList: function(_data) {
    var colorString, com, comArr, i, item, listItem, listWrap, _i, _j, _len, _len1, _ref;
    if (!_data || !_data.SecurityGroups) {
      return;
    }
    global.secGroupList = _data.SecurityGroups;
    comArr = entities.components;
    for (_i = 0, _len = comArr.length; _i < _len; _i++) {
      com = comArr[_i];
      canFunc.secGroupAddEcs(com);
    }
    $('#secgroup-list-wrap').html('');
    listWrap = $('#secgroup-list-wrap');
    _ref = _data.SecurityGroups;
    for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
      item = _ref[i];
      colorString = i === 0 ? 'green' : '#' + md5(item.SecurityGroupId).substr(0, 6);
      listItem = '<li class="clear" id="sg-list-' + item.SecurityGroupId + '"><span class="secgroup-color" style="background-color:' + colorString + '"></span><input type="radio" value="' + item.SecurityGroupId + '" name="secgroupoption" id="sg-' + item.SecurityGroupId + '"><label class="toe" for="sg-' + item.SecurityGroupId + '">' + item.Description + '</label><a href="javascript:void(0);" class="fright sgdel icon-del-row" data-sid="' + item.SecurityGroupId + '">-</a></li>';
      listWrap.append(listItem);
      $('#secgroup-list-wrap input:first').iCheck('check');
    }
  },
  onAddSecGroupBtn: function() {
    var data, secGArr, secGroupName, secGroupNameValue, _i, _len, _secG;
    secGroupName = $('#secGroupName');
    secGroupNameValue = secGroupName.val();
    secGArr = $('#secgroup-list-wrap li .toe');
    for (_i = 0, _len = secGArr.length; _i < _len; _i++) {
      _secG = secGArr[_i];
      if (secGroupNameValue === $(_secG).text()) {
        $.notify({
          msg: "安全组名字不能重复",
          type: 'warning'
        });
        return;
      }
    }
    data = {
      accessKeyId: global.accessKeyId,
      accessKeySec: global.accessKeySec,
      regionId: $.cookie('regionId'),
      secgroupName: secGroupNameValue,
      ownerAccount: def.ownerAccount
    };
    tools.post('/api/secgroupcreate', data, domFunc.addSecGroupCallback);
  },
  addSecGroupCallback: function(_data) {
    var colorString, json, listItem, listWrap, secGroupName, secGroupNameValue, _secId;
    json = $.evalJSON(_data);
    secGroupName = $('#secGroupName');
    listWrap = $('#secgroup-list-wrap');
    secGroupNameValue = secGroupName.val();
    switch (json.code) {
      case 200:
        _secId = json.data.SecurityGroupId;
        colorString = '#' + md5(_secId).substr(0, 6);
        listItem = '<li class="clear" id="sg-list-' + _secId + '"><span class="secgroup-color" style="background-color:' + colorString + '"></span><input type="radio" value="' + _secId + '" name="secgroupoption" id="sg-' + _secId + '"><label class="toe" for="sg-' + _secId + '">' + secGroupNameValue + '</label><a href="javascript:void(0);" class="fright sgdel icon-del-row" data-sid="' + _secId + '">-</a></li>';
        listWrap.append(listItem).find('li:last').slideDown();
        secGroupName.val('');
        return $.notify({
          msg: "安全组创建成功",
          type: 'success'
        });
    }
  },
  onSelectSecGroupItem: function() {
    var data, instanceId, instanceIds, self, sid, _i, _len;
    self = global.selectObj;
    sid = $(this).val();
    if (self.data.securityGroupId[0] && self.data.securityGroupId[0] === sid) {
      return;
    }
    self.data.securityGroupId[0] = sid;
    if (!self.isOpen()) {
      domFunc.updateSecGroupStyle();
      return;
    }
    instanceIds = self.getInstanceIds();
    for (_i = 0, _len = instanceIds.length; _i < _len; _i++) {
      instanceId = instanceIds[_i];
      data = {
        accessKeyId: global.accessKeyId,
        accessKeySec: global.accessKeySec,
        secgroupId: sid,
        instanceId: instanceId,
        ownerAccount: def.ownerAccount
      };
      $.post('/api/secgroupmoveto', data, domFunc.moveToSecGroupCallback);
    }
  },
  moveToSecGroupCallback: function(_data) {
    var json;
    json = $.evalJSON(_data);
    if (json.code === 200) {
      domFunc.updateSecGroupStyle();
    }
  },
  updateSecGroupStyle: function() {
    if (global.selectObj && global.selectObj.kind === 'ecs') {
      global.selectObj.elements.secgroup.setFill($('#secgroup-list-wrap input:radio:checked').prev().css('background-color'));
      layer.batchDraw();
    }
  },
  onDelSelectSecGroupItem: function() {
    var data, sid;
    global.delSecgroupId = sid = $(this).attr('data-sid');
    data = {
      accessKeyId: global.accessKeyId,
      accessKeySec: global.accessKeySec,
      regionId: $.cookie('regionId'),
      secgroupId: sid,
      ownerAccount: def.ownerAccount
    };
    tools.post('/api/secgroupdel', data, domFunc.delSecGroupCallback);
  },
  delSecGroupCallback: function(_data) {
    var delSecgroupItem, json;
    json = $.evalJSON(_data);
    switch (json.code) {
      case 200:
        if (json.data.Code) {
          $.notify({
            msg: "当前安全组被实例或其它安全组所引用，不能删除",
            type: 'danger'
          });
        } else {
          delSecgroupItem = $("#sg-list-" + global.delSecgroupId);
          delSecgroupItem.slideUp('slow', function() {
            return $(this).remove();
          });
          global.delSecgroupId = 0;
          $.notify({
            msg: "安全组删除成功",
            type: 'success'
          });
        }
        break;
      default:
        return;
    }
  },
  onListCustomImage: function() {
    var ownerAccount;
    ownerAccount = def.ownerAccount;
    $.getJSON('api/ecs/image/list/private?accessKeyId=' + global.accessKeyId + '&accessKeySec=' + global.accessKeySec + "&regionId=" + $.cookie('area'), function(json) {
      var data;
      data = {};
      data.images = json;
      $('#customImageListContent').html(render.imageCustomeList(data));
    });
  },
  onTakeSnapshot: function() {
    var disk;
    disk = "1006-600756";
    $.msg.prompt("快照名称: ", "", "创建快照", function(name) {
      if (name != null) {
        $.notify({
          msg: "进度: 1% " + "正在给" + disk + "创建快照:" + name
        });
      }
    }, "快照名称为2-15个字符");
  },
  onRDSListDatabases: function() {
    var dbInstanceId;
    dbInstanceId = "rdsi7fmiefmnfij";
    $.getJSON('api/rds/list/db?accessKeyId=' + global.accessKeyId + '&accessKeySec=' + global.accessKeySec + "&dbInstanceId=" + dbInstanceId, function(json) {
      var i, j, key, _i, _ref;
      if ((json.data != null) && json.data.length > 0) {
        for (i = _i = 0, _ref = json.data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          for (j in json.data[i]) {
            key = j.replace(/^[A-Z]+/, function(a) {
              if (a.length > 1) {
                return a.substr(0, a.length - 1).toLowerCase() + a.substr(a.length - 1, 1);
              } else {
                return a.toLowerCase();
              }
            });
            json.data[i][key] = json.data[i][j];
            delete json.data[i][j];
          }
        }
        $('.databases.list-inner').html(render.rdsListDatabases(json));
      }
    });
  },
  onRDSListUsers: function() {
    var dbInstanceId;
    dbInstanceId = "rdsi7fmiefmnfij";
    $.getJSON('api/rds/list/user?accessKeyId=' + global.accessKeyId + '&accessKeySec=' + global.accessKeySec + "&dbInstanceId=" + dbInstanceId, function(json) {
      var i, j, key, _i, _ref;
      if ((json.data != null) && json.data.length > 0) {
        for (i = _i = 0, _ref = json.data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          for (j in json.data[i]) {
            key = j.replace(/^[A-Z]+/, function(a) {
              if (a.length > 1) {
                return a.substr(0, a.length - 1).toLowerCase() + a.substr(a.length - 1, 1);
              } else {
                return a.toLowerCase();
              }
            });
            json.data[i][key] = json.data[i][j];
            delete json.data[i][j];
          }
        }
        $('.users.list-inner').html(render.rdsListUsers(json));
      }
    });
  },
  bindMoveEvent: function(e) {
    var direction;
    if (document.activeElement.tagName !== 'BODY') {

    } else {
      direction = 'l';
      switch (e.keyCode) {
        case 37:
          direction = 'l';
          break;
        case 38:
          direction = 't';
          break;
        case 39:
          direction = 'r';
          break;
        case 40:
          direction = 'b';
          break;
        case 8:
        case 46:
          tools.deleteNode();
          return;
        default:
          return;
      }
      if (global.selectObj != null) {
        console.log('tools.moveNode');
        return tools.moveNode(global.selectObj, direction);
      }
    }
  },
  onSaveIpModifyClick: function() {},
  saveIpModifyCallback: function(_data) {},
  getScriptList: function() {
    var postData;
    if (tools.checkLogin(1)) {
      postData = {
        account: $.cookie('loginMail')
      };
      tools.post('/script/list', postData, domFunc.initScriptList);
    }
  },
  initScriptList: function(_data) {
    var _i, _len, _script;
    $('#bottomBoardScriptList').html('');
    for (_i = 0, _len = _data.length; _i < _len; _i++) {
      _script = _data[_i];
      domFunc.showScriptList(_script);
    }
    $('#upload-script-bottom-board').css({
      'min-width': "" + (Object.size(_data) * 100 + 300) + "px"
    });
  },
  getScriptModelList: function() {
    var postData;
    if (tools.checkLogin(1)) {
      postData = {
        loginName: $.cookie('loginMail')
      };
      tools.post('/scriptmodellist/list', postData, domFunc.initScriptModelList);
    }
  },
  initScriptModelList: function(_data) {
    var newData, _scriptdata, _scriptdataName;
    $('#bottomBoardSaveScriptList').html('');
    if (_data) {
      newData = _data.groupBy(function(d) {
        return d.scriptModelName;
      });
      for (_scriptdataName in newData) {
        _scriptdata = newData[_scriptdataName];
        domFunc.showScriptModelList(_scriptdataName);
      }
      $('#script-bottom-board').css({
        'min-width': "" + (Object.size(newData) * 100) + "px"
      });
    }
  },
  showScriptList: function(scriptObj) {
    var html, _sid, _sname;
    _sid = scriptObj._id;
    _sname = scriptObj.fileName;
    html = "<a href='javascript:void(0)' title='" + _sname + "' data-sid='" + _sid + "' class='script-file saved-file'>" + (domFunc.showOverflowText(_sname, 5)) + "</a>";
    $('#bottomBoardScriptList').append(html);
  },
  showScriptModelList: function(scriptdataName) {
    var html;
    html = "<a href='javascript:void(0)' title='" + scriptdataName + "' data-smn='" + scriptdataName + "' class='script-file script-model-file'>" + (domFunc.showOverflowText(scriptdataName, 5)) + "</a>";
    $('#bottomBoardSaveScriptList').append(html);
  },
  showScript: function(e) {
    var pos, postData, sid;
    sid = $(this).data('sid');
    pos = {
      x: $(this)[0].offsetLeft - $(this)[0].scrollLeft
    };
    postData = {
      sid: sid
    };
    $.post('/script/get', postData, function(_data) {
      domFunc.showScriptCallback(_data, pos);
    });
  },
  showScriptCallback: function(_data, pos) {
    var content, name;
    name = _data.fileName;
    content = _data.fileContent;
    $('#delScriptBtn,#doScriptBtn').data('sid', _data._id);
    $('#showScriptName').val(name);
    $('#showScriptContent').val(content);
    $('#showScript').css({
      bottom: '105px',
      left: +pos.x + 130 - ($('#left-board').width() - $('#upload-script-bottom-board').offset().left) + 'px'
    }).show();
  },
  clearScriptComList: function() {
    var ecs_doScript_com, id, tempImage, _ref, _scriptCom, _scriptComId;
    _ref = global.scriptComList;
    for (_scriptComId in _ref) {
      _scriptCom = _ref[_scriptComId];
      id = tools.getNodeIdByInstanceId(_scriptComId);
      ecs_doScript_com = stage.find("." + id)[0];
      tempImage = new Image();
      tempImage.src = resources.loadImages['ecs_unlogin'];
      ecs_doScript_com.corners.rightTop.icon.setImage(tempImage);
      ecs_doScript_com.attrs.isLogin = false;
    }
    stage.batchDraw();
    global.scriptComList = {};
  },
  showScriptModel: function(e) {
    var pos, postData, scriptModelName;
    domFunc.clearScriptComList();
    scriptModelName = $(this).data('smn');
    pos = {
      x: $(this)[0].offsetLeft
    };
    postData = {
      scriptModelName: scriptModelName,
      loginName: $.cookie('loginMail')
    };
    $.post('/scriptmodellist/get', postData, function(_data) {
      domFunc.showScriptModelCallback(_data, pos);
    });
  },
  showScriptModelCallback: function(rs_data, pos) {
    var content, ecs_doScript_com, id, name, scriptModelName, tempImage, _data, _i, _len, _rs_data;
    global.scriptComList = {};
    for (_i = 0, _len = rs_data.length; _i < _len; _i++) {
      _rs_data = rs_data[_i];
      id = tools.getNodeIdByInstanceId(_rs_data.instancid);
      ecs_doScript_com = stage.find("." + id)[0];
      if (!ecs_doScript_com) {
        continue;
      }
      tempImage = new Image();
      tempImage.src = resources.loadImages['ecs_login'];
      ecs_doScript_com.corners.rightTop.icon.setImage(tempImage);
      ecs_doScript_com.attrs.isLogin = true;
      global.scriptComList[_rs_data.instancid] = {};
      global.scriptComList[_rs_data.instancid] = {
        host: _rs_data.host,
        username: _rs_data.username,
        pwd: _rs_data.pwd,
        name: _rs_data.name,
        port: _rs_data.port
      };
    }
    stage.batchDraw();
    _data = rs_data[0];
    name = _data.scriptName;
    content = _data.scriptContent;
    scriptModelName = _data.scriptModelName;
    $('#delScriptModelBtn,#doScriptModelBtn').data('sname', scriptModelName);
    $('#showScriptModelName').val(name);
    $('#showScriptModelContent').val(content);
    $('#showScriptModel').css({
      bottom: '105px',
      left: +pos.x + 130 - ($('#left-board').width() - $('#script-bottom-board').offset().left) + 'px'
    }).show();
  },
  initScript: function(isUploadFile) {
    $('#scriptName').val('');
    $('#fileUploadFile').val('');
    $('#upload-error').text('');
    $('#scriptContent').val('');
    $('#progressNumber').text('');
    $('#btnUploadFile').removeAttr('disabled');
    if (isUploadFile) {
      $('#row_file_input_upload').show();
      $('#row_file_input_text').hide();
      $('#hd_upload').val('1');
      $('#myUploadModalLabel').text('上传脚本');
    } else {
      $('#row_file_input_upload').hide();
      $('#row_file_input_text').show();
      $('#hd_upload').val('');
      $('#myUploadModalLabel').text('新建脚本');
    }
    $('#UploadFileModal').modal('show');
  },
  onUploadFileClick: function() {
    domFunc.initScript(true);
  },
  onNewFileClick: function() {
    domFunc.initScript(false);
  },
  fileSelected: function() {
    var file, fileSize;
    file = document.getElementById('fileUploadFile').files[0];
    if (file) {
      fileSize = 0;
      if (file.size > 1024 * 1024) {
        fileSize = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
      } else {
        fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';
      }
    }
  },
  uploadFile: function() {
    var fd, fileName, xhr;
    $('#btnUploadFile').attr('disabled', 'disabled');
    xhr = new XMLHttpRequest();
    fd = new FormData(document.getElementById('form1'));
    xhr.upload.addEventListener("progress", domFunc.uploadProgress, false);
    xhr.addEventListener("load", domFunc.uploadComplete, false);
    xhr.addEventListener("error", domFunc.uploadFailed, false);
    fd.append('loginMail', $.cookie('loginMail'));
    fileName = $('#scriptName').val();
    fd.append('fileName', fileName);
    if ($('#hd_upload').val() === '') {
      fd.append('scriptContent', $('#scriptContent').val());
      fd.append('t', '1');
    } else {
      fd.append('t', '');
    }
    if (fileName === '') {
      $('#upload-error').text('脚本名字不能为空');
      $('#btnUploadFile').removeAttr('disabled');
    } else {
      xhr.open("POST", "/script/upload", true);
      xhr.send(fd);
    }
  },
  uploadProgress: function(evt) {
    var percentComplete;
    if (evt.lengthComputable) {
      percentComplete = Math.round(evt.loaded * 100 / evt.total);
      $('#progressNumber').text("完成 " + percentComplete + " %");
    }
  },
  uploadComplete: function(evt) {
    var responseText, scriptObj;
    $('#btnUploadFile').removeAttr('disabled');
    responseText = evt.target.responseText;
    if (responseText === '2') {
      $('#upload-error').text('脚本名字重复了');
    } else if (responseText === '0') {
      domFunc.uploadFailed(evt);
    } else if (responseText === '3') {
      $('#upload-error').text('上传内容不能为空');
    } else if (responseText === 'nosession') {
      $('#upload-error').text('请重新登录');
    } else {
      $('#UploadFileModal').modal('hide');
      scriptObj = $.evalJSON(evt.target.responseText);
      domFunc.getScriptList();
    }
  },
  uploadFailed: function(evt) {
    $('#btnUploadFile').removeAttr('disabled');
    $('#upload-error').text('上传失败，请刷新后重试');
  },
  onScriptNameBlur: function() {
    $('#upload-error').text('');
  },
  onSaveScriptBottomBoardClick: function() {
    domFunc.clearScriptComList();
    domFunc.onBottomBoardClick();
  },
  onBottomBoardClick: function() {
    $('#showScript,#showScriptModel').hide();
  },
  onBoardClick: function() {
    domFunc.onBottomBoardClick();
    domFunc.onRightBoardClick();
  },
  onDelScriptBtnClick: function() {
    var sid;
    domFunc.onBottomBoardClick();
    sid = $(this).data('sid');
    bootbox.confirm("确定删除这个脚本？", function(callback) {
      var postData;
      if (callback === true) {
        postData = {
          sid: sid
        };
        return tools.post('/script/del', postData, domFunc.onDelScriptBtnCallback);
      }
    });
  },
  onDelScriptBtnCallback: function(_data) {
    var minWidth;
    if (_data === '0') {
      $('#showScript-err').text('删除失败');
    } else if (_data === 'nosession') {
      $('#showScript-err').text('删除失败,请重新登录');
    } else {
      $("a.saved-file[data-sid=" + _data + "]").remove();
      minWidth = $('#upload-script-bottom-board').css('min-width').split('px')[0];
      $('#upload-script-bottom-board').css({
        'min-width': "" + (minWidth - 100) + "px"
      });
    }
  },
  onDelScriptModelBtnClick: function() {
    var sname;
    sname = $(this).data('sname');
    bootbox.confirm("确定删除这个脚本模板？", function(callback) {
      var postData;
      if (callback === true) {
        postData = {
          loginName: $.cookie('loginMail'),
          scriptModelName: sname
        };
        tools.post('/scriptmodellist/del', postData, domFunc.onDelScriptModelBtnCallback);
      }
    });
  },
  onDelScriptModelBtnCallback: function(_data) {
    var minWidth;
    if (_data === '0') {
      $('#showScriptModel-err').text('删除失败');
    } else {
      $("a.script-model-file[data-smn=" + _data + "]").remove();
      minWidth = $('#script-bottom-board').css('min-width').split('px')[0];
      $('#script-bottom-board').css({
        'min-width': "" + (+minWidth - 100) + "px"
      });
    }
    domFunc.onSaveScriptBottomBoardClick();
  },
  onDoScriptModelBtnClick: function() {
    var count;
    $('#div_scriptModel').hide();
    count = Object.size(global.scriptComList);
    if (count <= 0) {
      $.notify({
        msg: '选择要执行脚本的组件',
        type: 'warning'
      });
      return;
    }
    global.scriptCount = count;
    canFunc.maskBackLayerDestroy();
    domFunc.onBottomBoardClick();
    $('#doScriptModal').modal('show');
    $('#hd_filename').val($('#showScriptName').val());
    $('#hd_filecontent').val($('#showScriptContent').val());
  },
  onScriptLoginModalShow: function() {
    var id, instanceid, port, pwd, username;
    if ($('#save-script-bottom-board').css('bottom') !== '0px') {
      domFunc.onBottomBoardClick();
    } else {
      domFunc.onSaveScriptBottomBoardClick();
    }
    username = '';
    pwd = '';
    port = 22;
    $('#scriptlogin-error').text('');
    id = $('#ins_id').val();
    instanceid = layer.find("#" + id)[0].data.openList.instanceId;
    if (global.scriptComList[instanceid]) {
      username = global.scriptComList[instanceid].username;
      pwd = global.scriptComList[instanceid].pwd;
      port = global.scriptComList[instanceid].port;
    } else if (global.comlistinfoData[instanceid]) {
      username = global.comlistinfoData[instanceid].username;
      pwd = global.comlistinfoData[instanceid].pwd;
      port = global.comlistinfoData[instanceid].port;
    }
    $('#script-username').val(username);
    $('#script-pwd').val(pwd);
    $('#script-port').val(port);
  },
  onDoScriptBtnClick: function() {
    var count;
    $('#div_scriptModel').show();
    count = Object.size(global.scriptComList);
    if (count <= 0) {
      $.notify({
        msg: '选择要执行脚本的组件',
        type: 'warning'
      });
      return;
    }
    global.scriptCount = count;
    canFunc.maskBackLayerDestroy();
    domFunc.onBottomBoardClick();
    $('#doScriptModal').modal('show');
    $('#hd_filename').val($('#showScriptName').val());
    $('#hd_filecontent').val($('#showScriptContent').val());
  },
  doScriptModalShow: function() {
    $('#cb_scriptModel').iCheck('uncheck');
    $('#div_scriptmodelname').hide();
  },
  checkboxScriptModelCheck: function() {
    if ($(this)[0].checked) {
      $('#scriptmodelname').val('');
      $('#div_scriptmodelname').show();
    } else {
      $('#div_scriptmodelname').hide();
    }
  },
  onDoScriptModalShow: function() {
    $('input[name=rd_exectime]:first').iCheck('check');
    $('#timeout_start').val('');
    $('#timeout_hou').val('');
    $('#timeout_min').val('');
  },
  onDoScriptConfirm: function() {
    var exeType, fileContent, fileName, postData;
    exeType = $('input[name=rd_exectime]:checked').data('value');
    fileContent = $('#hd_filecontent').val();
    fileName = $('#hd_filename').val();
    if ($('#cb_scriptModel:checked').length) {
      if ($('#scriptmodelname').val().trim() === '' || ($('#scriptmodelname').val() == null)) {
        $.notify({
          msg: '模板名称不能为空',
          type: 'warning'
        });
        return;
      }
      postData = {
        loginName: $.cookie('loginMail'),
        scriptModelName: $('#scriptmodelname').val().trim()
      };
      tools.post('/scriptmodellist/get', postData, function(_rs) {
        var _instanceId, _ref, _results, _scriptCom;
        if (_rs.length) {
          $.notify({
            msg: '模板名称不能重复',
            type: 'warning'
          });
          $('#scriptmodelname').val('');
          return;
        }
        domFunc.doScript(exeType, fileName, fileContent);
        _ref = global.scriptComList;
        _results = [];
        for (_instanceId in _ref) {
          _scriptCom = _ref[_instanceId];
          postData = {
            instancid: _instanceId,
            loginName: $.cookie('loginMail'),
            scriptModelName: $('#scriptmodelname').val().trim(),
            host: _scriptCom.host,
            username: _scriptCom.username,
            pwd: _scriptCom.pwd,
            port: _scriptCom.port,
            scriptName: fileName,
            scriptContent: fileContent
          };
          _results.push(tools.post('/scriptmodellist/add', postData, function(_rs) {
            if (_rs !== '1') {
              $.notify({
                msg: '保存模板失败',
                type: 'warning'
              });
            }
          }));
        }
        return _results;
      });
    } else {
      domFunc.doScript(exeType, fileName, fileContent);
    }
  },
  doScript: function(exeType, fileName, fileContent) {
    var date, hour, minute, postData, scriptCom, scriptComId, second, time, _ref, _ref1;
    if (exeType === 'now') {
      _ref = global.scriptComList;
      for (scriptComId in _ref) {
        scriptCom = _ref[scriptComId];
        domFunc.setCodeIcon(layer.find("#" + (tools.getNodeIdByInstanceId(scriptComId)))[0]);
        postData = {
          execName: $.cookie('loginMail'),
          id: scriptComId,
          username: scriptCom.username,
          pwd: scriptCom.pwd,
          host: scriptCom.host,
          fileName: fileName,
          fileContent: fileContent,
          port: scriptCom.port
        };
        tools.post('/ssh/nowdoscript', postData, domFunc.nowdoscriptCallback);
        global.scriptCount--;
        if (global.scriptCount === 0) {
          $('#doScriptModal').modal('hide');
          canFunc.maskBackLayerDestroy();
        }
      }
    } else {
      date = $('#timeout_start').val();
      hour = $('#timeout_hou').val();
      minute = $('#timeout_min').val();
      second = 0;
      if (!(hour || minute || second) || !date || isNaN(hour) || isNaN(minute) || isNaN(second)) {
        $.notify({
          msg: '正确选择预约时间',
          type: 'warning'
        });
        return;
      }
      time = date + ' ' + hour + ':' + minute + ':' + second;
      if ((new Date(time)) < (new Date())) {
        $.notify({
          msg: '预约时间不能早于当前时间',
          type: 'warning'
        });
        return;
      }
      _ref1 = global.scriptComList;
      for (scriptComId in _ref1) {
        scriptCom = _ref1[scriptComId];
        domFunc.setCodeIcon(layer.find("#" + (tools.getNodeIdByInstanceId(scriptComId)))[0]);
        postData = {
          execName: $.cookie('loginMail'),
          id: scriptComId,
          username: scriptCom.username,
          pwd: scriptCom.pwd,
          host: scriptCom.host,
          execDate: time,
          fileName: fileName,
          fileContent: fileContent,
          port: scriptCom.port,
          instanceid: scriptComId
        };
        tools.post('/ssh/delaydoscript', postData, domFunc.saveScript);
      }
      $('#doScriptModal').modal('hide');
    }
  },
  setCodeIcon: function(obj) {
    var tempImage;
    tempImage = new Image();
    tempImage.src = resources.loadImages['comHasCode'];
    obj.images.code.setImage(tempImage);
    layer.batchDraw();
  },
  nowdoscriptCallback: function(_data) {
    var data_arr, ip, rs;
    domFunc.getScriptModelList();
    data_arr = _data.split('_');
    rs = data_arr[0];
    ip = data_arr[1];
    if (rs === '0') {
      $.notify({
        msg: "" + ip + "执行失败",
        type: 'warning'
      });
      console.log('err');
    } else if (rs === '-1') {
      $.notify({
        msg: "" + ip + "登录失败",
        type: 'warning'
      });
      console.log('login err');
    } else {
      console.log("" + ip + "执行完成");
    }
  },
  saveScript: function() {
    var instanceid, nodeId, obj, tempImage;
    domFunc.getScriptModelList();
    for (instanceid in global.scriptComList) {
      nodeId = tools.getNodeIdByInstanceId(instanceid);
      obj = layer.find("#" + nodeId)[0];
      tempImage = new Image();
      tempImage.src = resources.loadImages['comMore'];
      obj.corners.rightBottom.icon.setImage(tempImage);
      layer.batchDraw();
      obj.corners.rightBottom.off('mousedown touchstart');
      obj.corners.rightBottom.on('mousedown touchstart', canFunc.newRightBottomClick);
    }
  },
  setNewRightBottom: function() {
    var hostListArr, ip, nodeId, obj, postData, tempImage, _com, _comdata, _i, _len, _nodeid, _ref, _ref1;
    global.scriptExecList = {};
    hostListArr = [];
    _ref = data.ecs;
    for (_nodeid in _ref) {
      _com = _ref[_nodeid];
      _ref1 = _com.openLists;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _comdata = _ref1[_i];
        if (!_comdata.isOpen) {
          continue;
        }
        nodeId = tools.getNodeIdByInstanceId(_comdata.instanceId);
        obj = layer.find("#" + nodeId)[0];
        tempImage = new Image();
        tempImage.src = resources.loadImages['comWDisk'];
        obj.corners.rightBottom.icon.setImage(tempImage);
        layer.batchDraw();
        obj.corners.rightBottom.off('mousedown touchstart');
        obj.corners.rightBottom.on('mousedown touchstart', canFunc.onComRightBottomMouseDown);
        ip = _comdata.publicIpAddress;
        if (ip) {
          postData = {
            host: ip
          };
          hostListArr.push(postData);
        }
      }
    }
    $.post('ssh/getbyip', {
      hostList: hostListArr
    }, function(_data) {
      var scriptinfo, _j, _len1, _scriptinfo;
      for (_j = 0, _len1 = _data.length; _j < _len1; _j++) {
        scriptinfo = _data[_j];
        _scriptinfo = global.scriptExecList[scriptinfo.instanceid];
        if (!_scriptinfo) {
          global.scriptExecList[scriptinfo.instanceid] = [];
        }
        global.scriptExecList[scriptinfo.instanceid].push(scriptinfo);
        nodeId = tools.getNodeIdByInstanceId(scriptinfo.instanceid);
        obj = layer.find("#" + nodeId)[0];
        tempImage = new Image();
        tempImage.src = resources.loadImages['comMore'];
        obj.corners.rightBottom.icon.setImage(tempImage);
        obj.corners.rightBottom.off('mousedown touchstart');
        obj.corners.rightBottom.on('mousedown touchstart', canFunc.newRightBottomClick);
      }
    });
  },
  rdsUserWizLoadDb: function() {
    var rds_id;
    if ((global.selectObj.kind != null) && global.selectObj.kind === "rds") {
      rds_id = global.selectObj.data.openList.dbInstanceId;
    }
  },
  onRdsCreateUser: function() {
    console.log('onRdsCreateUser');
  },
  onMonitorBtnClick: function() {
    if (Object.size(global.selectComObjList) > 0) {
      return domFunc.loadMonitorEcsData();
    } else {
      return $.notify({
        msg: '架构图上还没有任何已关联的云产品',
        type: 'warning'
      });
    }
  },
  loadMonitorEcsData: function() {
    var ecs, key, liHtml, monitorListWrap, monitorModal, tempEcs, value, _i, _len, _ref, _ref1;
    monitorListWrap = $('#monitorListWrap');
    monitorListWrap.empty();
    _ref = data.ecs;
    for (key in _ref) {
      value = _ref[key];
      if (value.openList.isOpen) {
        if (value.amount === 1) {
          liHtml = domFunc.createMonitorEcsHtml(value);
          monitorListWrap.append(liHtml);
        } else {
          _ref1 = value.openLists;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            ecs = _ref1[_i];
            tempEcs = Object.clone(ecs, 1);
            tempEcs.memory = value.memory;
            tempEcs.osVal = value.osVal;
            tempEcs.cpu = value.cpu;
            liHtml = domFunc.createMonitorEcsHtml(tempEcs);
            monitorListWrap.append(liHtml);
          }
        }
      }
    }
    monitorModal = $('#monitorModal');
    monitorModal.modal('show');
  },
  createMonitorEcsHtml: function(ecs) {
    var innerIpAddress, instanceName, openParams, osBitStr, osType, publicIpAddress, tempHtml, tempMemory;
    openParams = ecs.openList || ecs;
    tempMemory = tools.getAutoUnit(ecs.memory);
    publicIpAddress = openParams.publicIpAddress[0] || '未分配公网 IP';
    innerIpAddress = openParams.innerIpAddress[0] || '未分配内网 IP';
    osType = tools.getOsType(ecs.osVal);
    osBitStr = tools.getOsBit(ecs.osVal, true);
    instanceName = openParams.instanceName;
    tempHtml = '<li class="monitorListItem" id="monitor-host-' + openParams.instanceId + '" data-id="' + openParams.instanceId + '"> <div> <div class="header clearfix"> <b class="title toe">' + ecs.name + '</b> <div class="config"> <img src="/img/com-plugin/os_' + osType + '.png"> <img src="/img/com-plugin/ico_' + osBitStr + 'bit_s.png"> <span>' + ecs.cpu + '核/' + tempMemory + '</span> </div> </div> <div class="bandWidth"> <p>公网/内网 : ' + publicIpAddress + '/' + innerIpAddress + '</p> </div> <div class="stopwatch clearfix" id="monitor-stopwatch-' + openParams.instanceId + '"> <div class="stopwatch-item"> <div class="labelText" id="stopwatch-title-' + openParams.instanceId + '-1">0%</div> <div><canvas id="stopwatch-canvas-' + openParams.instanceId + '-1" width="70" height="57"></canvas></div> <div class="labelText">CPU</div> </div> <div class="stopwatch-item"> <div class="labelText" id="stopwatch-title-' + openParams.instanceId + '-3">0MB</div> <div><canvas id="stopwatch-canvas-' + openParams.instanceId + '-3" width="70" height="57"></canvas></div> <div class="labelText">带宽</div> </div> <div class="stopwatch-item stopwatch-item-last"> <div class="labelText" id="stopwatch-title-' + openParams.instanceId + '-2"><b></b></div> <div class="labelContent" id="stopwatch-content-' + openParams.instanceId + '-2"></div> <div class="labelText"></div> </div> </div> </div> </li><!--li end-->';
    return tempHtml;
  },
  onMonitorItemClick: function() {
    var instanceId, monitorDetailModal, monitorModal;
    monitorModal = $('#monitorModal');
    monitorDetailModal = $('#monitorDetailModal');
    global.currMonitorEcs = instanceId = $(this).attr('data-id');
    domFunc.loadMonitorDetailData(instanceId);
    monitorModal.modal('hide');
    monitorDetailModal.modal('show');
  },
  loadMonitorDetailData: function(instanceId) {
    var ecs, innerIpAddress, key, leftEcsListWrap, liHtml, publicIpAddress, value, _i, _len, _ref, _ref1;
    leftEcsListWrap = $('#monitorDetailModal #leftEcsListWrap');
    leftEcsListWrap.empty();
    _ref = data.ecs;
    for (key in _ref) {
      value = _ref[key];
      if (value.openList.isOpen) {
        if (value.amount === 1) {
          publicIpAddress = value.openList.publicIpAddress[0] || '未分配公网 IP';
          innerIpAddress = value.openList.innerIpAddress[0] || '未分配内网 IP';
          liHtml = '<li data-id=' + value.openList.instanceId + '><p>' + publicIpAddress + '/' + innerIpAddress + '</p></li>';
          leftEcsListWrap.append(liHtml);
        } else {
          _ref1 = value.openLists;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            ecs = _ref1[_i];
            publicIpAddress = ecs.publicIpAddress[0] || '未分配公网 IP';
            innerIpAddress = ecs.innerIpAddress[0] || '未分配内网 IP';
            liHtml = '<li data-id=' + ecs.instanceId + '><p>' + publicIpAddress + '/' + innerIpAddress + '</p></li>';
            leftEcsListWrap.append(liHtml);
          }
        }
      }
    }
  },
  onBackMonitorModalBtnClick: function() {
    var monitorDetailModal, monitorModal;
    monitorModal = $('#monitorModal');
    monitorDetailModal = $('#monitorDetailModal');
    monitorDetailModal.modal('hide');
    monitorModal.modal('show');
  },
  onDetailEcsListItemClick: function() {
    var instanceId, monitorDetailModal;
    monitorDetailModal = $('#monitorDetailModal');
    $('#leftEcsListWrap li').removeClass('active');
    $(this).addClass('active');
    global.currMonitorEcs = instanceId = $(this).attr('data-id');
    global.currMonitorEcsData = null;
    return domFunc.showEcsMonitorDetailForId(instanceId);
  },
  showEcsMonitorDetailForId: function(instanceId) {
    var postData;
    postData = {
      instanceId: instanceId
    };
    return tools.post('/monitor/search', postData, domFunc.getEcsMonitorDataCallback);
  },
  getEcsMonitorDataCallback: function(_dataStr, type) {
    var _data;
    _data = $.evalJSON(_dataStr);
    _data.forEach(function(n) {
      return n.date = Date.create(n.created * 1000);
    });
    global.currMonitorEcsData = _data;
    domFunc.buildMonitorChart();
  },
  buildMonitorChart: function(type) {
    var axis_band, axis_cpu, axis_io, height, line_band_down, line_band_up, line_cpu, line_io_r, line_io_w, margin, panel_band, panel_cpu, panel_io, setAxis, setContent, setSvg, svg_band, svg_cpu, svg_io, width, _data;
    _data = global.currMonitorEcsData;
    margin = {
      top: 30,
      right: 30,
      bottom: 30,
      left: 70
    };
    width = 630;
    height = 320;
    panel_cpu = d3.select('#monitorCpuPanel').html('');
    panel_io = d3.select('#monitorIoPanel').html('<div class="fleft colorInfo"><span class="steelblue">IO写</span><span class="orange">IO读</span></div>');
    panel_band = d3.select('#monitorBwPanel').html('<div class="fleft colorInfo"><span class="steelblue">下行</span><span class="orange">上行</span></div>');
    svg_cpu = panel_cpu.append('svg');
    svg_io = panel_io.append('svg');
    svg_band = panel_band.append('svg');
    setSvg = function(_svg) {
      _svg.attr('width', width).attr('height', height).append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    };
    setSvg(svg_cpu);
    setSvg(svg_io);
    setSvg(svg_band);
    setAxis = function(type) {
      var extent1, extent2, result, x, xAxis, y, yAxis;
      result = {};
      x = d3.time.scale().range([0, width]);
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x).orient('bottom');
      yAxis = d3.svg.axis().scale(y).orient('left');
      x.domain(d3.extent(_data, function(d) {
        return d.date;
      }));
      switch (type) {
        case 'cpu':
          y.domain(d3.extent(_data, function(d) {
            return d.cpu;
          }));
          break;
        case 'io':
          extent1 = d3.extent(_data, function(d) {
            return d.iopsRead;
          });
          extent2 = d3.extent(_data, function(d) {
            return d.iopsWrite;
          });
          y.domain(d3.extent(extent1.add(extent2)));
          break;
        case 'band':
          extent1 = d3.extent(_data, function(d) {
            return d.internetRX;
          });
          extent2 = d3.extent(_data, function(d) {
            return d.internetTX;
          });
          y.domain(d3.extent(extent1.add(extent2)));
      }
      return result = {
        x: x,
        y: y,
        xAxis: xAxis,
        yAxis: yAxis
      };
    };
    axis_cpu = setAxis('cpu');
    axis_io = setAxis('io');
    axis_band = setAxis('band');
    line_cpu = d3.svg.line().interpolate('monotone').x(function(d) {
      return axis_cpu.x(d.xData);
    }).y(function(d) {
      return axis_cpu.y(d.yData);
    });
    line_io_r = d3.svg.line().interpolate('monotone').x(function(d) {
      return axis_io.x(d.xData);
    }).y(function(d) {
      return axis_io.y(d.yData);
    });
    line_io_w = d3.svg.line().interpolate('monotone').x(function(d) {
      return axis_io.x(d.xData);
    }).y(function(d) {
      return axis_io.y(d.yData);
    });
    line_band_down = d3.svg.line().interpolate('monotone').x(function(d) {
      return axis_band.x(d.xData);
    }).y(function(d) {
      return axis_band.y(d.yData);
    });
    line_band_up = d3.svg.line().interpolate('monotone').x(function(d) {
      return axis_band.x(d.xData);
    }).y(function(d) {
      return axis_band.y(d.yData);
    });
    setContent = function(_svg, _axis, _lines, _type) {
      var circles, focus, item_data, lines_h, lines_v, mousemove, rate, svgText, _data_line, _i, _item, _item_sub, _j, _len, _len1, _line, _lineKey;
      _svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(_axis.xAxis);
      svgText = _svg.append("g").attr("class", "y axis").call(_axis.yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
      switch (_type) {
        case 'cpu':
          svgText.text('百分比');
          break;
        default:
          svgText.text('kbps');
      }
      _data_line = [];
      for (_i = 0, _len = _lines.length; _i < _len; _i++) {
        _lineKey = _lines[_i];
        _line = eval("(line_" + _lineKey + ")");
        _item = [];
        for (_j = 0, _len1 = _data.length; _j < _len1; _j++) {
          item_data = _data[_j];
          _item_sub = {
            xData: item_data.date
          };
          switch (_lineKey) {
            case 'cpu':
              _item_sub.yData = item_data.cpu;
              _item_sub.title = 'CPU';
              _item_sub.unit = '%';
              break;
            case 'io_r':
              _item_sub.yData = item_data.iopsRead;
              _item_sub.title = 'IO读';
              _item_sub.unit = 'kbps';
              break;
            case 'io_w':
              _item_sub.yData = item_data.iopsWrite;
              _item_sub.title = 'IO写';
              _item_sub.unit = 'kbps';
              break;
            case 'band_up':
              _item_sub.yData = item_data.internetTX;
              _item_sub.title = '上行带宽';
              _item_sub.unit = 'kbps';
              break;
            case 'band_down':
              _item_sub.yData = item_data.internetRX;
              _item_sub.title = '下行带宽';
              _item_sub.unit = 'kbps';
          }
          _item.push(_item_sub);
        }
        _data_line.push(_item);
        _svg.append("path").datum(_item).attr("class", "line " + _lineKey).attr("d", _line);
      }
      focus = _svg.append("g").attr("class", "focus").style("display", "none");
      circles = focus.selectAll('circle').data(_data_line).enter().append('circle').attr('class', 'circle').attr('r', 3).attr('fill', 'red');
      lines_h = focus.selectAll('line').data(_data_line).enter().append('line').attr('x1', '0').attr('y1', '0').attr('x2', width).attr('y2', '0').attr('class', 'line-refer').attr('stroke', '#999');
      lines_v = focus.append('line').data(_data_line).attr('x1', '0').attr('y1', '0').attr('x2', '0').attr('y2', height).attr('class', 'line-refer').attr('stroke', '#999');
      mousemove = function(e) {
        var pos_mouse, x0;
        pos_mouse = d3.mouse(this);
        x0 = _axis.x.invert(pos_mouse[0]);
        $('#tips-monitor').html("时间：" + (x0.format('{yyyy}-{MM}-{dd} {hh}:{mm}')));
        circles.attr('transform', function(d) {
          var point, scale_x, scale_y;
          point = d.find(function(n) {
            return n.xData.getTime() / 1000 - 60 < x0.getTime() / 1000;
          });
          if (point) {
            scale_x = _axis.x(point.xData);
            scale_y = _axis.y(point.yData);
            if (scale_x > 300) {
              $('#tips-monitor').css('right', '420px');
            } else {
              $('#tips-monitor').css('right', '0');
            }
            $('#tips-monitor').html("" + ($('#tips-monitor').html()) + "<br/>" + point.title + "：" + point.yData + " " + point.unit);
            return "translate(" + scale_x + ", " + scale_y + ")";
          } else {

          }
        });
        lines_h.attr('transform', function(d) {
          var point, scale_x, scale_y;
          point = d.find(function(n) {
            return n.xData.getTime() / 1000 - 60 < x0.getTime() / 1000;
          });
          if (point) {
            scale_x = _axis.x(point.xData);
            scale_y = _axis.y(point.yData);
            return "translate(0, " + scale_y + ")";
          } else {

          }
        });
        lines_v.attr('transform', function(d) {
          var point, scale_x, scale_y;
          point = d.find(function(n) {
            return n.xData.getTime() / 1000 - 60 < x0.getTime() / 1000;
          });
          if (point) {
            scale_x = _axis.x(point.xData);
            scale_y = _axis.y(point.yData);
            return "translate(" + scale_x + ", 0)";
          } else {

          }
        });
      };
      rate = _svg.append('rect').attr("class", "overlay").attr("width", width).attr("height", height).on("mouseover", function() {
        focus.style('display', null);
        return $('#tips-monitor').show();
      }).on("mouseout", function() {
        focus.style('display', 'none');
        return $('#tips-monitor').hide();
      }).on("mousemove", mousemove);
    };
    setContent(svg_cpu, axis_cpu, ['cpu'], 'cpu');
    setContent(svg_io, axis_io, ['io_r', 'io_w'], 'io');
    setContent(svg_band, axis_band, ['band_up', 'band_down'], 'band');
  },
  getEcsMonitorDataArray: function(_data, type) {
    var datas, ecs, _i, _len;
    type = type || 'date';
    datas = [];
    for (_i = 0, _len = _data.length; _i < _len; _i++) {
      ecs = _data[_i];
      switch (type) {
        case 'date':
          datas.push(Date.create(ecs.created * 1000).format('{M}-{d} {h}:{m}'));
          break;
        case 'cpu':
          datas.push(ecs.cpu);
          break;
        case 'bpsRead':
          datas.push(ecs.bpsRead / 1024);
          break;
        case 'bpsWrite':
          datas.push(ecs.bpsWrite / 1024);
          break;
        case 'internetTX':
          datas.push(ecs.internetTX);
          break;
        case 'internetRX':
          datas.push(ecs.internetRX);
          break;
        default:
          return [];
      }
    }
    return datas;
  },
  convertEcsMonitorDataToCanvas: function(_data, type) {
    var datas, datasets, ecsMonitorCanvasData, labels, rDatas, rxDatas, txDatas, wDatas;
    labels = domFunc.getEcsMonitorDataArray(_data, 'date');
    switch (type) {
      case 'cpu':
        datas = domFunc.getEcsMonitorDataArray(_data, 'cpu');
        datasets = [
          {
            fillColor: "rgba(240, 173, 78, 0.5)",
            strokeColor: "rgba(238, 162, 54, 1)",
            pointColor: "rgba(240, 173, 78, 1)",
            pointStrokeColor: "#fff",
            data: datas
          }
        ];
        break;
      case 'io':
        rDatas = domFunc.getEcsMonitorDataArray(_data, 'bpsRead');
        wDatas = domFunc.getEcsMonitorDataArray(_data, 'bpsWrite');
        datasets = [
          {
            fillColor: "rgba(151,187,205,0.5)",
            strokeColor: "rgba(151,187,205,1)",
            pointColor: "rgba(151,187,205,1)",
            pointStrokeColor: "#fff",
            data: wDatas
          }, {
            fillColor: "rgba(240, 173, 78, 0.5)",
            strokeColor: "rgba(238, 162, 54, 1)",
            pointColor: "rgba(240, 173, 78, 1)",
            pointStrokeColor: "#fff",
            data: rDatas
          }
        ];
        break;
      case 'bw':
        rxDatas = domFunc.getEcsMonitorDataArray(_data, 'internetRX');
        txDatas = domFunc.getEcsMonitorDataArray(_data, 'internetTX');
        datasets = [
          {
            fillColor: "rgba(151,187,205,0.5)",
            strokeColor: "rgba(151,187,205,1)",
            pointColor: "rgba(151,187,205,1)",
            pointStrokeColor: "#fff",
            data: rxDatas
          }, {
            fillColor: "rgba(240, 173, 78, 0.5)",
            strokeColor: "rgba(238, 162, 54, 1)",
            pointColor: "rgba(240, 173, 78, 1)",
            pointStrokeColor: "#fff",
            data: txDatas
          }
        ];
        break;
      default:
        datasets = [];
    }
    ecsMonitorCanvasData = {
      labels: labels,
      datasets: datasets
    };
    return ecsMonitorCanvasData;
  },
  showEcsMonitorCanvasForData: function(datas, kind) {
    var ctx, cvs;
    kind = kind || 'cpu';
    ctx = $("#" + kind + "Canvas").get(0).getContext('2d');
    cvs = new Chart(ctx).Line(datas, config.chartLine);
  },
  onMonitorDetailModalTabClick: function() {
    var ecsMonitorData, kind;
    global.currMonitorEcsPanel = kind = $(this).attr('data-kind');
    if (global.currMonitorEcsData) {
      ecsMonitorData = domFunc.convertEcsMonitorDataToCanvas(global.currMonitorEcsData, kind);
      return domFunc.showEcsMonitorCanvasForData(ecsMonitorData, kind);
    } else {
      return domFunc.showEcsMonitorDetailForId(global.currMonitorEcs);
    }
  },
  onMonitorDetailModalShow: function() {
    domFunc.setCurrentMonitorEcsHighlight();
    return domFunc.showEcsMonitorDetailForId(global.currMonitorEcs);
  },
  setCurrentMonitorEcsHighlight: function() {
    var ecsDetailLeftListItem;
    ecsDetailLeftListItem = $('#leftEcsListWrap li');
    ecsDetailLeftListItem.removeClass('active');
    return ecsDetailLeftListItem.each(function(i, self) {
      if ($(self).attr('data-id') === global.currMonitorEcs) {
        return $(self).addClass('active');
      }
    });
  },
  onCreateUserClick: function() {
    $('#createUserModal').modal('show');
  },
  onCreateDatabaseClick: function() {
    $('#createDatabaseModal').modal('show');
  },
  onBtnBindUser: function() {
    var currObj, db, dbName, isok, _i, _len, _ref;
    currObj = global.selectObj;
    dbName = $('#dbName').val().trim().toString();
    if (dbName === '') {
      $('#createDatabase-error').text('填写数据库名称');
    } else {
      $('#creatDbStep2-error').text('');
      isok = true;
      if (currObj.data.openList.databases) {
        _ref = currObj.data.openList.databases;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          db = _ref[_i];
          if (db.dbname === dbName) {
            isok = false;
            break;
          }
        }
      }
      if (!isok) {
        $('#createDatabase-error').text('该数据库名称已存在');
      } else {
        domFunc.createDbShowUserList(currObj);
        $('#myCreateDatabaseModalLabel').text('绑定帐号');
        $('#creatDbStep1, #creatDbStep1-footer').hide();
        $('#creatDbStep2, #creatDbStep2-footer').show();
      }
    }
  },
  createDbShowUserList: function(currObj) {
    var html, user, _i, _len, _ref;
    html = '';
    if (currObj.data.openList) {
      if (currObj.data.openList.users) {
        if (currObj.data.openList.users.length === 0) {
          $('#creatDbUserList').html('暂无帐号');
          return;
        }
        _ref = currObj.data.openList.users;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          html += "<li data-user='" + user.accountName + "' class='fleft createdb-userlist title-height' title='" + user.accountName + "'>" + (domFunc.showOverflowText(user.accountName, 10)) + "</li>";
        }
        $('#creatDbUserList').html(html);
      } else {
        $('#creatDbUserList').html('暂无帐号');
      }
    }
  },
  onCreateDbNewUserClick: function() {
    $('#isCreate').val('1');
    $('#createUserModal').modal('show');
  },
  onBtnBindDb: function() {
    var accountName, createUserPwd, currObj, isok, reCreateUserPwd, user, _i, _len, _ref;
    currObj = global.selectObj;
    accountName = $('#accountName').val().trim().toString();
    createUserPwd = $('#createUserPwd').val().toString();
    reCreateUserPwd = $('#reCreateUserPwd').val().toString();
    if (!(accountName && createUserPwd && reCreateUserPwd)) {
      $('#createUser-error').text('信息填写完整');
    } else if (createUserPwd.length < 6) {
      $('#createUser-error').text('密码位数不小于6位');
    } else if (!(createUserPwd === reCreateUserPwd)) {
      $('#createUser-error').text('密码与确认密码必须一致');
    } else {
      isok = true;
      if (currObj.data.openList.users) {
        _ref = currObj.data.openList.users;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          if (user.accountName === accountName) {
            isok = false;
            break;
          }
        }
      }
      if (!isok) {
        $('#createUser-error').text('该帐号名称已存在');
      } else {
        $('#createUser-error,#creatUserStep2-error').text('');
        domFunc.createDbShowDbList(currObj);
        $('#myCreateUserModalLabel').text('绑定数据库');
        $('#creatUserStep1, #creatUserStep1-footer').hide();
        $('#creatUserStep2, #creatUserStep2-footer').show();
      }
    }
  },
  createDbShowDbList: function(currObj, isModify) {
    var creatUserDbList, createdb_dblist, db, html, _i, _len, _ref;
    html = '';
    createdb_dblist = 'createdb-dblist';
    creatUserDbList = $('#creatUserDbList');
    if (isModify) {
      createdb_dblist = 'modifydb-dblist';
      creatUserDbList = $('#modifyUserDbList');
    }
    if (currObj.data.openList) {
      if (currObj.data.openList.databases) {
        if (currObj.data.openList.databases.length === 0) {
          creatUserDbList.html('暂无数据库');
          return;
        }
        _ref = currObj.data.openList.databases;
        for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
          db = _ref[_i];
          html += "<li data-dbname='" + db.dbname + "' class='fleft " + createdb_dblist + " title-height' title='" + db.dbname + "'>" + (domFunc.showOverflowText(db.dbname, 10)) + "</li>";
        }
        creatUserDbList.html(html);
      } else {
        creatUserDbList.html('暂无数据库');
      }
    }
  },
  onCreateNewUserBtnClick: function() {
    var account, accountDescription, accountName, accountStatus, charsetCheck, createUserPwd, currObj, database, databasePrivilege, dbInstanceId, dbName, dbStatus, description, engine, isok, reCreateUserPwd, readOnlyCheck, user, _i, _len, _ref;
    currObj = global.selectObj;
    accountName = $('#accountName').val().trim();
    createUserPwd = $('#createUserPwd').val();
    reCreateUserPwd = $('#reCreateUserPwd').val();
    readOnlyCheck = $('input[name=readOnlyCheck]:checked').val();
    accountDescription = $('#accountDescription').val();
    engine = currObj.data.engine;
    if (!(accountName && createUserPwd && reCreateUserPwd)) {
      $('#createUser-error').text('信息填写完整');
    } else if (createUserPwd.length < 6) {
      $('#createUser-error').text('密码位数不小于6位');
    } else if (!(createUserPwd === reCreateUserPwd)) {
      $('#createUser-error').text('密码与确认密码必须一致');
    } else {
      isok = true;
      if (currObj.data.openList.users) {
        _ref = currObj.data.openList.users;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          if (user.accountName === accountName) {
            isok = false;
            break;
          }
        }
      }
      if (!isok) {
        $('#createUser-error').text('帐号名称已存在');
      } else {
        dbName = $('#dbName').val().trim();
        charsetCheck = $('input[name=charsetCheck]:checked').val();
        dbStatus = 'Running';
        description = '';
        accountStatus = 'Available';
        dbInstanceId = currObj.data.id;
        database = {
          charset: charsetCheck,
          description: description,
          dbInstanceId: dbInstanceId,
          dbname: dbName,
          dbstatus: dbStatus,
          engine: engine
        };
        databasePrivilege = [];
        databasePrivilege.push({
          accountPrivilege: readOnlyCheck,
          dbName: dbName
        });
        account = {
          accountName: accountName,
          accountPwd: createUserPwd,
          accountDescription: accountDescription,
          accountStatus: accountStatus,
          dbInstanceId: dbInstanceId,
          databasePrivilege: databasePrivilege
        };
        if (!currObj.data.openList.databases) {
          currObj.data.openList.databases = [];
        }
        currObj.data.openList.databases.push(database);
        if (!currObj.data.openList.users) {
          currObj.data.openList.users = [];
        }
        currObj.data.openList.users.push(account);
        $('#createUserModal').modal('hide');
        $('#createDatabaseModal').modal('hide');
        $.notify({
          msg: '数据库创建成功',
          type: 'success',
          timeout: 2000
        });
        domFunc.showCreatedList(currObj, 'user');
        domFunc.showCreatedList(currObj, 'db');
      }
    }
  },
  onCreateDbBtnClick: function() {
    var accountName, charsetCheck, currObj, db, dbInstanceId, dbName, dbStatus, description, dp, engine, user, _i, _len, _ref;
    currObj = global.selectObj;
    dbName = $('#dbName').val();
    charsetCheck = $('input[name=charsetCheck]:checked').val();
    description = '';
    dbStatus = 'Running';
    engine = currObj.data.dbType;
    dbInstanceId = currObj.data.id;
    if ($('.createdb-userlist.active').length === 0) {
      $('#creatDbStep2-error').text('选择绑定帐号');
      return;
    }
    accountName = $('.createdb-userlist.active').data('user');
    _ref = currObj.data.openList.users;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user = _ref[_i];
      if (accountName.toString() === user.accountName) {
        dp = {
          accountPrivilege: user.databasePrivilege[0].accountPrivilege,
          dbName: dbName
        };
        user.databasePrivilege.push(dp);
        break;
      }
    }
    db = {
      charset: charsetCheck,
      description: description,
      dbInstanceId: dbInstanceId,
      dbname: dbName,
      dbstatus: dbStatus,
      engine: engine
    };
    currObj.data.openList.databases.push(db);
    $('#createDatabaseModal').modal('hide');
    $.notify({
      msg: '数据库创建成功',
      type: 'success',
      timeout: 2000
    });
    domFunc.showCreatedList(currObj, 'db');
  },
  onCreateUserBtnClick: function() {
    var accountDescription, accountName, accountStatus, createUserPwd, currObj, databasePrivilege, dbInstanceId, dbName, engine, readOnlyCheck, user;
    currObj = global.selectObj;
    accountName = $('#accountName').val().trim();
    createUserPwd = $('#createUserPwd').val();
    readOnlyCheck = $('input[name=readOnlyCheck]:checked').val();
    accountDescription = $('#accountDescription').val();
    engine = currObj.data.dbType;
    accountStatus = 'Available';
    dbInstanceId = currObj.data.id;
    if ($('.createdb-dblist.active').length === 0) {
      $('#creatUserStep2-error').text('选择绑定的数据库');
      return;
    }
    dbName = $('.createdb-dblist.active').data('dbname');
    databasePrivilege = [];
    databasePrivilege.push({
      accountPrivilege: readOnlyCheck,
      dbName: dbName
    });
    user = {
      accountName: accountName,
      accountPwd: createUserPwd,
      accountDescription: accountDescription,
      accountStatus: accountStatus,
      dbInstanceId: dbInstanceId,
      databasePrivilege: databasePrivilege
    };
    currObj.data.openList.users.push(user);
    $('#createUserModal').modal('hide');
    $.notify({
      msg: '帐号创建成功',
      type: 'success',
      timeout: 2000
    });
    domFunc.showCreatedList(currObj, 'user');
  },
  onCreateUserModalShow: function() {
    var isCreate;
    isCreate = $('#isCreate').val();
    $('#isCreate').val('0');
    $('#createUser-error').text('');
    $('#createUserModal').find('input[type=text],input[type=password],textarea').val('');
    $('input[name=readOnlyCheck]:first').iCheck('check');
    $('#myCreateUserModalLabel').text('创建帐号');
    $('#creatUserStep1, #creatUserStep1-footer').show();
    $('#creatUserStep2, #creatUserStep2-footer').hide();
    if (isCreate === '1') {
      $('#btn-bindDb').hide();
      $('#btn-createNewUser-ok').show();
    } else {
      $('#btn-createNewUser-ok').hide();
      $('#btn-bindDb').show();
    }
    $('.createdb-dblist').removeClass('active');
  },
  onCreateDatabaseModalShow: function() {
    $('#createDatabase-error').text('');
    $('#createDatabaseModal').find('input[type=text],input[type=password],textarea').val('');
    $('input[name=charsetCheck]:first').iCheck('check');
    $('#myCreateDatabaseModalLabel').text('创建数据库');
    $('#creatDbStep1, #creatDbStep1-footer').show();
    $('#creatDbStep2, #creatDbStep2-footer').hide();
    $('.createdb-userlist').removeClass('active');
  },
  onCreateListClick: function() {
    $(this).siblings().removeClass('active');
    $(this).toggleClass('active');
  },
  onDiskPopListMousedown: function(e) {
    e.stopPropagation();
  },
  onDiskPopListClick: function(e) {
    e.stopPropagation();
    if (!$(e.target).hasClass('diskListItem')) {
      return $('.disk-option').hide();
    }
  },
  onDiskListItemClick: function(e) {
    var dataDisk, diskOption, obj, pos, sWidth, self, sysDisk;
    e.stopPropagation();
    self = $(this);
    pos = self.offset();
    global.selectDisk = obj = self.data('data');
    diskOption = $('.disk-option');
    diskOption.hide();
    if (!obj.diskId) {
      return;
    }
    sWidth = self.width();
    sysDisk = $('#sys-disk-option');
    dataDisk = $('#data-disk-option');
    if (global.selectObj.data.amount > 1 && global.selectObj.isOpen()) {
      return;
    }
    if (obj.isSystem) {
      sysDisk.css({
        left: pos.left - sWidth / 2 + 10,
        top: pos.top + 60
      }).show();
    } else {
      if (global.selectObj.data.openList.isOpen) {
        dataDisk.find('.local').hide().end().find('.online').show();
      } else {
        dataDisk.find('.online').hide().end().find('.local').show();
      }
      if (obj.category === 'snapshot') {
        dataDisk.find('.setting').hide().end().find('.create').hide();
      }
      dataDisk.css({
        left: pos.left - sWidth / 2 + 10,
        top: pos.top + 60
      }).show();
    }
  },
  onDiskOptionListItemMousedown: function(e) {
    e.stopPropagation();
  },
  onDiskOptionListItemClick: function(e) {
    var flag;
    e.stopPropagation();
    canFunc.hidePopover();
    flag = parseInt($(this).attr('data-flag'));
    canFunc.hideScriptPopover(e);
    canFunc.hideDiskPopover(e);
    if (flag === 1) {
      bootbox.confirm("删除操作是不可恢复的，确认要继续吗？", domFunc.deleteEcsDisk);
    } else if (flag === 2) {
      $('#createSnapshotModal').modal('show');
    } else if (flag === 3) {
      $('#createOSImageModal').modal('show');
    } else if (flag === 4) {
      domFunc.diskInit(global.selectDisk.size);
      domFunc.showDiskModal(global.selectDisk.category);
    }
  },
  createDiskSnapshot: function(_data) {},
  deleteEcsDisk: function(result) {
    var self;
    if (!result) {
      return;
    }
    self = global.selectObj;
    domFunc.delDisk(global.selectDisk.diskId, self.data.chargeType);
  },
  createdListHtml: function(currObj, type) {
    var db, html, user, _i, _j, _len, _len1, _ref, _ref1;
    html = '';
    if (type === 'user') {
      if (currObj.data.openList) {
        if (currObj.data.openList.users) {
          if (currObj.data.openList.users.length === 0) {
            html += '暂无帐号';
          } else {
            _ref = currObj.data.openList.users;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              user = _ref[_i];
              html += "<li data-user='" + user.accountName + "' class='fleft usersList4Rds-userlist title-height' title='" + user.accountName + "'>" + (domFunc.showOverflowText(user.accountName, 10)) + "</li>";
            }
          }
        } else {
          html += '暂无帐号';
        }
      }
    } else {
      if (currObj.data.openList) {
        if (currObj.data.openList.databases) {
          if (currObj.data.openList.databases.length === 0) {
            html += '暂无数据库';
          } else {
            _ref1 = currObj.data.openList.databases;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              db = _ref1[_j];
              html += "<li data-dbname='" + db.dbname + "' class='fleft databaseList4Rds-dblist title-height' title='" + db.dbname + "'>" + (domFunc.showOverflowText(db.dbname, 10)) + "</li>";
            }
          }
        } else {
          html += '暂无数据库';
        }
      }
    }
    return html;
  },
  showCreatedList: function(currObj, type) {
    var html;
    html = '';
    html = domFunc.createdListHtml(currObj, type);
    if (type === 'user') {
      $('#usersList4Rds').html(html);
    } else {
      $('#databaseList4Rds').html(html);
    }
  },
  onDestoryDatabaseClick: function() {
    var dbActive;
    dbActive = $('.databaseList4Rds-dblist.active');
    if (dbActive.length === 0) {
      $.notify({
        msg: '选择一个数据库',
        type: 'danger',
        timeout: 2000
      });
      return;
    }
    bootbox.confirm('删除数据库的同时,会把绑定在该数据库上的帐号一起删除,确定删除吗?', function(callback) {
      var currObj, dbArr, dbName, dbObj, dp, uid, uid1, user, user1, userArr, userObj, _i, _j;
      if (callback === true) {
        dbName = (dbActive.data('dbname')).toString();
        currObj = global.selectObj;
        dbArr = currObj.data.openList.databases;
        dbObj = dbArr.find(function(_db) {
          return _db.dbname === dbName;
        });
        if (dbObj) {
          dbArr.remove(dbObj);
        }
        userArr = currObj.data.openList.users;
        for (uid = _i = userArr.length - 1; _i >= 0; uid = _i += -1) {
          user = userArr[uid];
          dp = user.databasePrivilege.find(function(dp) {
            return dp.dbName.toString() === dbName;
          });
          if (dp) {
            user.databasePrivilege.remove(dp);
          }
        }
        for (uid1 = _j = userArr.length - 1; _j >= 0; uid1 = _j += -1) {
          user1 = userArr[uid1];
          userObj = userArr.find(function(_user) {
            return _user.databasePrivilege.length === 0;
          });
          if (userObj) {
            userArr.remove(userObj);
          }
        }
        $.notify({
          msg: '删除成功',
          type: 'success',
          timeout: 2000
        });
        domFunc.showCreatedList(currObj, 'db');
        domFunc.showCreatedList(currObj, 'user');
      }
    });
  },
  onModifyUserClick: function() {
    var dbName, userActive;
    userActive = $('.usersList4Rds-userlist.active');
    if (userActive.length === 0) {
      $.notify({
        msg: '选择一个帐号',
        type: 'danger',
        timeout: 2000
      });
      return;
    }
    dbName = userActive.data('user');
    $('#modifyAccountName').val(dbName);
    $('#modifyUserModal').modal('show');
  },
  onModifyUserModalShow: function() {
    var accountName, currObj, user, userArr, _i, _len;
    currObj = global.selectObj;
    userArr = currObj.data.openList.users;
    accountName = $('#modifyAccountName').val();
    for (_i = 0, _len = userArr.length; _i < _len; _i += 1) {
      user = userArr[_i];
      if (user.accountName.toString() === accountName) {
        $("input[name=modifyReadOnlyCheck][value=" + user.databasePrivilege[0].accountPrivilege + "]").iCheck('check');
        $('#modifyAccountDescription').val(user.accountDescription);
        $('#modifyUser-error').text('');
        $('#modifyUserModal').find('input[type=password]').val('');
        $('#myModifyUserModalLabel').text('修改帐号');
        $('.modifydb-dblist').removeClass('active');
        $('#modifyUserStep1, #modifyUserStep1-footer').show();
        $('#modifyUserStep2, #modifyUserStep2-footer').hide();
        break;
      }
    }
  },
  checkModifyUser: function(currObj) {
    var isok, modifyAccountName, modifyCreateUserPwd;
    isok = true;
    modifyAccountName = $('#modifyAccountName').val().trim();
    modifyCreateUserPwd = $('#modifyCreateUserPwd').val();
    return isok;
  },
  onBtnModifyUserClick: function() {
    var currObj;
    currObj = global.selectObj;
    if (domFunc.checkModifyUser(currObj)) {
      domFunc.modifyUser(currObj);
      $.notify({
        msg: '修改成功',
        type: 'success',
        timeout: 2000
      });
      $('#modifyUserModal').modal('hide');
    }
  },
  modifyUser: function(currObj) {
    var dp, modifyAccountDescription, modifyAccountName, modifyReadOnlyCheck, user, _i, _j, _len, _len1, _ref, _ref1;
    modifyAccountName = $('#modifyAccountName').val().trim();
    modifyAccountDescription = $('#modifyAccountDescription').val();
    modifyReadOnlyCheck = $('input[name=modifyReadOnlyCheck]:checked').val();
    _ref = currObj.data.openList.users;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user = _ref[_i];
      if (modifyAccountName === user.accountName) {
        user.accountDescription = modifyAccountDescription;
        _ref1 = user.databasePrivilege;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          dp = _ref1[_j];
          dp.accountPrivilege = modifyReadOnlyCheck;
        }
        break;
      }
    }
  },
  onBtnModifyBindDbClick: function() {
    var currObj;
    currObj = global.selectObj;
    if (domFunc.checkModifyUser(currObj)) {
      domFunc.createDbShowDbList(currObj, true);
      domFunc.selectDbList(currObj);
      $('#myModifyUserModalLabel').text('修改数据库绑定');
      $('#modifyUserStep1, #modifyUserStep1-footer').hide();
      $('#modifyUserStep2, #modifyUserStep2-footer').show();
    }
  },
  selectDbList: function(currObj) {
    var dp, modifyAccountName, user, _i, _j, _len, _len1, _ref, _ref1;
    modifyAccountName = $('#modifyAccountName').val().trim();
    _ref = currObj.data.openList.users;
    for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
      user = _ref[_i];
      if (modifyAccountName === user.accountName) {
        _ref1 = user.databasePrivilege;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j += 1) {
          dp = _ref1[_j];
          $(".modifydb-dblist[data-dbname='" + dp.dbName + "']").addClass('active');
        }
        break;
      }
    }
  },
  onModifyListClick: function() {
    $(this).toggleClass('active');
  },
  onBtnModifyUserBindClick: function() {
    var accountName, accountPrivilege, currObj, dbName, dpArr, modifydb, modifydbArr, uid, user, userArr, _i, _j, _k, _len, _len1, _len2;
    currObj = global.selectObj;
    if (domFunc.checkModifyUser(currObj)) {
      domFunc.modifyUser(currObj);
      accountName = $('#modifyAccountName').val();
      modifydbArr = $('#modifyUserDbList .modifydb-dblist.active');
      userArr = currObj.data.openList.users;
      if (modifydbArr.length > 0) {
        for (_i = 0, _len = userArr.length; _i < _len; _i += 1) {
          user = userArr[_i];
          if (accountName === user.accountName) {
            accountPrivilege = user.databasePrivilege[0].accountPrivilege;
            dpArr = [];
            for (_j = 0, _len1 = modifydbArr.length; _j < _len1; _j += 1) {
              modifydb = modifydbArr[_j];
              dbName = $(modifydb).data('dbname');
              dpArr.push({
                accountPrivilege: accountPrivilege,
                dbName: dbName
              });
            }
            user.databasePrivilege = dpArr;
            break;
          }
        }
      } else {
        userArr = currObj.data.openList.users;
        for (uid = _k = 0, _len2 = userArr.length; _k < _len2; uid = ++_k) {
          user = userArr[uid];
          if (user.accountName === accountName) {
            userArr.splice(uid, 1);
          }
        }
      }
      domFunc.showCreatedList(currObj, 'db');
      domFunc.showCreatedList(currObj, 'user');
      $.notify({
        msg: '修改成功',
        type: 'success',
        timeout: 2000
      });
      $('#modifyUserModal').modal('hide');
    }
  },
  batchBtnStatus: function() {
    if (Object.size(global.batchSelectComList) > 0) {
      $('.batch-text').css({
        'color': '#FFF'
      });
      $('.batch-icon,.batch-queue').removeClass('batch-unactive');
    } else {
      $('.batch-text').css({
        'color': '#979FAC'
      });
      $('.batch-icon,.batch-queue').addClass('batch-unactive');
    }
  },
  batchAllSelectStatus: function() {
    if ($('#batchAllSelect:checked').length) {
      $('#batchAllSelect').parent().removeClass('checked');
      $('#batchAllSelect').removeAttr('checked');
    }
  },
  batchSelectEcs: function(e) {
    var ecs_com, id, instanceId, isLayer, layer_com, layerid, origin_ecs_com, origin_layer, tempImage, _com, _ecs_com, _i, _ins, _ins_com, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _tempImage;
    e.cancelBubble = 1;
    id = $(this)[0].attrs.originId;
    ecs_com = stage.find("." + id)[0];
    isLayer = $(this)[0].attrs.isLayer;
    if (isLayer) {
      origin_layer = layer.find("#" + id)[0];
      tempImage = new Image();
      if (ecs_com.attrs.isSelect) {
        domFunc.batchAllSelectStatus();
        tempImage.src = resources.loadImages['ecs_unselect'];
        ecs_com.children[2].icon.setImage(tempImage);
        ecs_com.attrs.isSelect = false;
        _tempImage = new Image();
        _ref = origin_layer.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _com = _ref[_i];
          if (_com.category === 'component' && _com.kind === 'ecs' && Object.size(_com.data.maps) !== 0) {
            _ecs_com = stage.find("." + (_com.getId()))[0];
            _tempImage.src = resources.loadImages['ecs_unselect'];
            _ecs_com.children[2].icon.setImage(tempImage);
            _ecs_com.attrs.isSelect = false;
            _ref1 = _com.data.maps;
            for (_ins in _ref1) {
              _ins_com = _ref1[_ins];
              delete global.batchSelectComList[_ins];
            }
          }
        }
      } else {
        tempImage.src = resources.loadImages['ecs_login'];
        ecs_com.children[2].icon.setImage(tempImage);
        ecs_com.attrs.isSelect = true;
        _tempImage = new Image();
        _ref2 = origin_layer.children;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          _com = _ref2[_j];
          if (_com.category === 'component' && _com.kind === 'ecs' && Object.size(_com.data.maps) !== 0) {
            _ecs_com = stage.find("." + (_com.getId()))[0];
            _tempImage.src = resources.loadImages['ecs_login'];
            _ecs_com.children[2].icon.setImage(tempImage);
            _ecs_com.attrs.isSelect = true;
            _ref3 = _com.data.maps;
            for (_ins in _ref3) {
              _ins_com = _ref3[_ins];
              global.batchSelectComList[_ins] = {};
              global.batchSelectComList[_ins] = _ins_com;
            }
          }
        }
      }
    } else {
      origin_ecs_com = layer.find("#" + id)[0];
      instanceId = origin_ecs_com.data.openLists[0].instanceId;
      tempImage = new Image();
      if (ecs_com.attrs.isSelect) {
        domFunc.batchAllSelectStatus();
        tempImage.src = resources.loadImages['ecs_unselect'];
        ecs_com.children[2].icon.setImage(tempImage);
        ecs_com.attrs.isSelect = false;
        delete global.batchSelectComList[instanceId];
        layerid = origin_ecs_com.parent.getId();
        layer_com = stage.find("." + layerid)[0];
        _tempImage = new Image();
        _tempImage.src = resources.loadImages['ecs_unselect'];
        layer_com.children[2].icon.setImage(_tempImage);
        layer_com.attrs.isSelect = false;
      } else {
        tempImage.src = resources.loadImages['ecs_login'];
        ecs_com.children[2].icon.setImage(tempImage);
        ecs_com.attrs.isSelect = true;
        global.batchSelectComList[instanceId] = {};
        global.batchSelectComList[instanceId] = origin_ecs_com.data.maps[instanceId];
      }
    }
    stage.batchDraw();
    domFunc.batchBtnStatus();
  },
  batchSelectEcss: function(e) {
    var com, cpu, cpu_mem, ecs_select_name, html, mem, status, _com, _i, _len, _ref;
    e.cancelBubble = 1;
    ecs_select_name = $(this)[0].attrs.originId;
    $('#ecs_select_name').val(ecs_select_name);
    com = layer.find("#" + ecs_select_name)[0];
    html = "<div class='panel panel-default'> <div class='panel-heading' style='padding:0px;'> <h4 class='panel-title'> <a style='background-color:#ECEFF2;width:100%;'> <span class='panel-title-name'>服务器名</span> <span class='panel-title-type'>配置</span> <span class='panel-title-ip'>IP</span> <span class='panel-title-status'>选择状态</span> </a> </h4> </div> </div>";
    _ref = com.data.openLists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _com = _ref[_i];
      cpu_mem = def.counterInstanceType[_com.instanceType].split('-');
      cpu = cpu_mem[0];
      mem = tools.getAutoUnit(Number(cpu_mem[1]) * 1024, 1024);
      status = '';
      if (global.batchSelectComList[_com.instanceId]) {
        status = "checked";
      }
      html += "<div class='panel panel-default'> <div class='panel-heading' style='padding:0px'> <h4 class='panel-title'> <label data-parent='#bServerList' href='javascript:void(0)' class='collapsed' style='width:100%;'> <span class='panel-title-name' id='" + _com.instanceId + "_instanceName' title='" + _com.instanceName + "'>" + (domFunc.showOverflowText(_com.instanceName, 10)) + "</span> <span class='panel-title-type'>" + cpu + "核 / " + mem + " " + (tools.getOsType(_com.imageId)) + " " + _com.internetMaxBandwidthOut + "M带宽</span> <span class='panel-title-ip'><label id='" + _com.instanceId + "_ip'>" + _com.publicIpAddress[0] + "</label>/" + _com.innerIpAddress[0] + "</span> <span id='" + _com.instanceId + "_status' class='panel-title-status' style='color:#FFA500;'><input type='checkbox' name='batch_status' data-ins='" + _com.instanceId + "' " + status + " /></span> </label> </h4> </div> </div>";
    }
    $('#bServerList').html(html);
    tools.addIcheckStyle($('#batchServerListModal input'));
    $('#batchServerListModal').modal('show');
  },
  onBatchServerSelectConfirm: function() {
    var ecsListArr, ecsListSelectArr, ecs_com, ecs_select_name, ins, layer_com, layerid, nodeid, tempImage, _com, _ecs, _i, _j, _len, _len1, _secs, _tempImage;
    ecsListArr = $('input[name=batch_status]');
    ecsListSelectArr = $('input[name=batch_status]:checked');
    for (_i = 0, _len = ecsListArr.length; _i < _len; _i++) {
      _ecs = ecsListArr[_i];
      delete global.batchSelectComList[$(_ecs).data('ins')];
    }
    tempImage = new Image();
    tempImage.src = resources.loadImages['ecs_unselect'];
    for (_j = 0, _len1 = ecsListSelectArr.length; _j < _len1; _j++) {
      _secs = ecsListSelectArr[_j];
      tempImage.src = resources.loadImages['ecs_login'];
      ins = $(_secs).data('ins');
      _com = layer.find("#" + (tools.getNodeIdByInstanceId(ins)))[0];
      global.batchSelectComList[$(_secs).data('ins')] = {};
      global.batchSelectComList[$(_secs).data('ins')] = _com.data.maps[ins];
    }
    ecs_select_name = $('#ecs_select_name').val();
    ecs_com = stage.find("." + ecs_select_name)[0];
    ecs_com.children[2].icon.setImage(tempImage);
    if (ecsListArr.length > ecsListSelectArr.length) {
      domFunc.batchAllSelectStatus();
      nodeid = tools.getNodeIdByInstanceId($(_ecs).data('ins'));
      layerid = layer.find("#" + nodeid)[0].parent.getId();
      layer_com = stage.find("." + layerid)[0];
      _tempImage = new Image();
      _tempImage.src = resources.loadImages['ecs_unselect'];
      layer_com.children[2].icon.setImage(_tempImage);
      layer_com.attrs.isSelect = false;
    }
    stage.batchDraw();
    $('#batchServerListModal').modal('hide');
    domFunc.batchBtnStatus();
  },
  batchAllSelectClick: function() {
    var com, ecs_com, instanceId, isSelect, map, tempImage, _childindex, _i, _ref, _ref1;
    isSelect = $('#batchAllSelect:checked').length;
    global.batchSelectComList = {};
    tempImage = new Image();
    for (_childindex = _i = 1, _ref = maskBackLayer.children.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; _childindex = 1 <= _ref ? ++_i : --_i) {
      ecs_com = maskBackLayer.children[_childindex];
      if (isSelect) {
        com = layer.find("#" + ecs_com.attrs.originId)[0];
        if (com.kind === 'ecs') {
          _ref1 = com.data.maps;
          for (instanceId in _ref1) {
            map = _ref1[instanceId];
            global.batchSelectComList[instanceId] = map;
          }
        }
        tempImage.src = resources.loadImages['ecs_login'];
        ecs_com.attrs.isSelect = true;
      } else {
        tempImage.src = resources.loadImages['ecs_unselect'];
        ecs_com.attrs.isSelect = false;
      }
      ecs_com.children[2].icon.setImage(tempImage);
    }
    stage.batchDraw();
    domFunc.batchBtnStatus();
  },
  batchAllSelectTextClick: function() {},
  onBatchIconClick: function(e, op) {
    var bs, bscom, loadingStatus, msg, needConfirm, oper, succmsg, _batchSelectComList, _ref;
    if ($(this).hasClass('batch-unactive')) {
      return;
    }
    oper = op ? op : $(this).data('op');
    _batchSelectComList = {};
    _ref = global.batchSelectComList;
    for (bs in _ref) {
      bscom = _ref[bs];
      _batchSelectComList[bs] = tools.getNodeIdByInstanceId(bs);
    }
    if (Object.size(_batchSelectComList) === 0) {
      $.notify({
        type: 'warning',
        msg: '选择要执行的组件'
      });
      return;
    }
    msg = '';
    succmsg = '';
    needConfirm = true;
    loadingStatus = 'Starting';
    switch (oper) {
      case 'start':
        msg = '确定启动所选的服务器?';
        break;
      case 'shutdown':
        msg = '确定停止所选的服务器?';
        loadingStatus = 'Stopping';
        break;
      case 'restart':
        msg = '确定重启所选的服务器?';
        break;
      case 'snap':
        needConfirm = false;
        $('#snapTimingModal').modal('show');
        break;
      default:
        msg = '确定操作所选的服务器?';
    }
    if (needConfirm) {
      bootbox.dialog({
        message: msg,
        buttons: {
          success: {
            label: '确认',
            className: 'btn-success',
            callback: function() {
              var _batchSelectCom, _batchSelectInstanceId;
              task.now(_batchSelectComList, oper);
              domFunc.updateAllOpenComStatus();
              setTimeout(function() {
                $.notify({
                  type: 'success',
                  msg: '命令已执行,请等待'
                });
              }, 2000);
              for (_batchSelectInstanceId in _batchSelectComList) {
                _batchSelectCom = _batchSelectComList[_batchSelectInstanceId];
                layer.find("#" + _batchSelectCom)[0].setStatusStyle(loadingStatus);
              }
              layer.batchDraw();
              canFunc.maskBackLayerDestroy();
              domFunc.setTimeoutFunc();
            }
          },
          cancel: {
            label: '取消',
            className: 'btn-default',
            callback: function() {}
          }
        }
      });
    }
  },
  onSnapTimingConfirmClick: function() {
    var diskId, ecsobj, instanceid, interval, postData, val, _disk, _i, _len, _ref, _ref1;
    val = $('input[name=snap_timingtype]:checked').val();
    interval = 1 * 60 * 60 * 1000;
    switch (val) {
      case 'hour':
        interval = 1 * 60 * 60 * 1000;
        break;
      case 'day':
        interval = 24 * 60 * 60 * 1000;
        break;
      case 'week':
        interval = 7 * 24 * 60 * 60 * 1000;
    }
    _ref = global.batchSelectComList;
    for (instanceid in _ref) {
      ecsobj = _ref[instanceid];
      diskId = '';
      _ref1 = ecsobj.Disk;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _disk = _ref1[_i];
        if (_disk.Type === 'system') {
          diskId = _disk.DiskId;
          break;
        }
      }
      postData = {
        comIp: ecsobj.PublicIpAddress[0],
        instanceid: instanceid,
        interval: interval,
        type: val,
        accessKeyId: global.accessKeyId,
        accessKeySec: global.accessKeySec,
        regionId: $.cookie('regionId'),
        diskId: diskId
      };
      tools.post('/snaptiming/add', postData, domFunc.addSnapTimingCallBack, '正在配置定时生成快照...');
    }
  },
  addSnapTimingCallBack: function(_data) {
    if (!_data) {
      $('#snapTimingModal').modal('hide');
    } else {
      $('#snapTimingModalError').text('配置失败,请刷新重试');
    }
  },
  onSnapTimingModalShow: function() {
    $('#snapTimingModalError').text('');
    $('input[name=snap_timingtype]:first').parent().trigger('click');
  },
  onBatchPwdHtmlshow: function(batchSelectComList) {
    var cpu, cpu_mem, html, instanceid, mem, pwd, status, _com;
    html = "<div class='panel panel-default'> <div class='panel-heading' style='padding:0px;'> <h4 class='panel-title'> <a style='background-color:#ECEFF2;width:100%;'> <span class='panel-title-name'>服务器名</span> <span class='panel-title-type'>配置</span> <span class='panel-title-ip'>IP</span> <span class='panel-title-status'>验证状态</span> </a> </h4> </div> </div>";
    for (instanceid in batchSelectComList) {
      _com = batchSelectComList[instanceid];
      cpu_mem = def.counterInstanceType[_com.InstanceType].split('-');
      cpu = cpu_mem[0];
      mem = tools.getAutoUnit(Number(cpu_mem[1]) * 1024, 1024);
      status = '未验证';
      if (task.queue_pwd_ecs[instanceid]) {
        status = "<img src='/img/ecs_login.png' style='margin-top:3px;' />";
      }
      pwd = '';
      if (task.queue_pwd_ecs[instanceid]) {
        pwd = task.queue_pwd_ecs[instanceid].Password;
      }
      html += "<div class='panel panel-default'> <div class='panel-heading' style='padding:0px'> <h4 class='panel-title'> <a data-toggle='collapse' data-parent='#pwdServerList' href='#" + instanceid + "' class='collapsed' style='width:100%;'> <span class='panel-title-name' id='" + instanceid + "_instanceName' title='" + _com.InstanceName + "'>" + (domFunc.showOverflowText(_com.InstanceName, 10)) + "</span> <span class='panel-title-type'>" + cpu + "核 / " + mem + " " + (tools.getOsType(_com.ImageId)) + " " + _com.InternetMaxBandwidthOut + "M带宽</span> <span class='panel-title-ip'><label id='" + instanceid + "_ip'>" + (_com.PublicIpAddress[0] ? _com.PublicIpAddress[0] : '无') + "</label>/" + _com.InnerIpAddress[0] + "</span> <span id='" + instanceid + "_repwd_status' class='panel-title-status' style='color:#FFA500;'>" + status + "</span> </a> </h4> </div> <div id='" + instanceid + "' class='panel-collapse'> <div class='panel-body'> <span><input type='password' id='" + instanceid + "_pwd_first' style='width:130px;' value='" + pwd + "' class='form-control' placeholder='密码' /></span> <span><input type='password' id='" + instanceid + "_repwd' style='width:130px;' value='" + pwd + "' class='form-control' placeholder='确认密码' /></span> <span><button id='" + instanceid + "_batchpwd' data-id='" + instanceid + "' class='batchcheckpwd btn btn-warning' style='width:50px;'>验证</button></span> <span><button id='" + instanceid + "_batchreset' data-id='" + instanceid + "' class='batchcheckpwdreset btn btn-default' style='width:50px;'>取消</button></span> <span id='" + instanceid + "_error' style='width:140px;height:30px;line-height:30px;' class='labelerror font14'></span> </div> </div> </div>";
    }
    $('#pwdServerList').html(html);
    $('#batchServerListPwdModal .modal-body').attr({
      'style': 'max-height:500px!important'
    });
    if (+$(window).innerHeight() <= 650) {
      $('#batchServerListPwdModal .modal-body').attr({
        'style': 'max-height:400px!important'
      });
    }
    $('#batchPwdError').text('');
    $('#batchServerListPwdModal').modal('show');
  },
  onBatchCheckPwdClick: function() {
    var id, pwd, repwd, status;
    id = $(this).data('id');
    pwd = $("#" + id + "_pwd_first").val();
    repwd = $("#" + id + "_repwd").val();
    status = '未验证';
    $("#" + id + "_status").html(status);
    $('#batchPwdError').text('');
    delete global.batchSelectComList[id].Password;
    if ((!pwd) || (!repwd)) {
      $("#" + id + "_error").text('密码信息填写完整');
    } else if (pwd.length < 6) {
      $("#" + id + "_error").text('密码长度不小于6');
    } else if (pwd !== repwd) {
      $("#" + id + "_error").text('两个密码信息不一致');
    } else {
      $("#" + id + "_error").text('');
      status = "<img src='/img/ecs_login.png' style='margin-top:3px;' />";
      $("#" + id + "_repwd_status").html(status);
      global.batchSelectComList[id].Password = pwd;
      $("#" + id + "_batchreset").trigger('click');
    }
  },
  onBatchServerSelectPwdConfirm: function() {
    var instanceId, isAll, selectCom, _instanceId, _ref, _ref1, _selectCom;
    isAll = true;
    _ref = global.batchSelectComList;
    for (_instanceId in _ref) {
      _selectCom = _ref[_instanceId];
      if (!_selectCom.Password) {
        isAll = false;
        break;
      }
    }
    if (isAll) {
      _ref1 = global.batchSelectComList;
      for (instanceId in _ref1) {
        selectCom = _ref1[instanceId];
        task.queue_pwd_ecs[instanceId] = {
          InstanceId: instanceId,
          NodeId: tools.getNodeIdByInstanceId(instanceId),
          Password: selectCom.Password
        };
      }
      $('#batchServerListPwdModal').modal('hide');
      canFunc.maskBackLayerDestroy();
    } else {
      $('#batchPwdError').text('各台服务器新密码填写完全');
    }
  },
  onBatchCheckPwdResetClick: function() {
    var id;
    id = $(this).data('id');
    $("#" + id + "_status").parent().trigger('click');
  },
  onBatchQueueClick: function(e, op) {
    var amount, bs, bscom, node, oper, _ecs, _nodeid, _ref, _ref1, _ref2;
    if ($(this).hasClass('batch-unactive')) {
      return;
    }
    oper = op ? op : $(this).data('op');
    if (Object.size(global.batchSelectComList) === 0) {
      $.notify({
        type: 'warning',
        msg: '选择要执行的组件'
      });
      return;
    }
    switch (oper) {
      case 'pwd':
        domFunc.onBatchPwdHtmlshow(global.batchSelectComList);
        return;
      case 'release':
        _ref = global.batchSelectComList;
        for (bs in _ref) {
          bscom = _ref[bs];
          _nodeid = tools.getNodeIdByInstanceId(bs);
          task.queue_del_ecs[bs] = {
            NodeId: _nodeid,
            InstanceId: bs
          };
          node = layer.find("#" + _nodeid)[0];
          if (Object.size(node.data.maps) > 1) {
            amount = node.data.amount - 1;
            _ecs = node.data.openLists.find(function(_ol) {
              return _ol.instanceId === bs;
            });
            if (_ecs) {
              domFunc.delEcsInEcss(_ecs, node);
            }
          } else {
            canFunc.destroyObj(node);
          }
        }
        break;
      case 'resetos':
        _ref1 = global.batchSelectComList;
        for (bs in _ref1) {
          bscom = _ref1[bs];
          task.queue_reset_ecs[bs] = {
            NodeId: tools.getNodeIdByInstanceId(bs),
            InstanceId: bs,
            DiskType: 'system'
          };
        }
        break;
      case 'resetdisk':
        _ref2 = global.batchSelectComList;
        for (bs in _ref2) {
          bscom = _ref2[bs];
          task.queue_reset_ecs[bs] = {
            NodeId: tools.getNodeIdByInstanceId(bs),
            InstanceId: bs,
            DiskType: 'data'
          };
        }
        break;
      default:
        canFunc.maskBackLayerDestroy();
        return;
    }
    $.notify({
      type: 'success',
      msg: '已加入任务队列'
    });
    canFunc.maskBackLayerDestroy();
  },
  loginEcs: function(e) {
    var com, instanceId, postData, publicIp, _com, _i, _len, _ref;
    e.cancelBubble = 1;
    instanceId = $(this)[0].attrs.originId;
    $('#ins_id').val(instanceId);
    com = layer.find("#" + instanceId)[0];
    if (global.isAgent) {
      _ref = com.data.openLists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _com = _ref[_i];
        publicIp = _com.publicIpAddress[0];
        postData = {
          url: "http://" + publicIp + ":8000",
          parms: "findbygroup"
        };
        tools.post('/ssh/getGroupList', postData, function(rs) {
          if (!(rs === 'err')) {
            $('#myscriptLoginModalLabel').text("" + publicIp + "服务器登录");
            $('#scriptLoginModal').modal('show');
          } else {
            $.notify({
              msg: '该组件无法执行agent脚本',
              type: 'warning'
            });
          }
        }, '验证是否可执行agent脚本', 8000, '', function(err) {
          if (err.statusText === 'timeout') {
            $.notify({
              msg: '该组件无法执行agent脚本',
              type: 'warning'
            });
          }
        });
      }
    } else {
      publicIp = com.data.openList.publicIpAddress[0];
      $('#myscriptLoginModalLabel').text("" + publicIp + "服务器登录");
      $('#scriptLoginModal').modal('show');
    }
  },
  loginEcss: function(e) {
    var com, cpu, cpu_mem, html, instanceId, instanceid, mem, port, pwd, status, username, _com, _i, _len, _ref;
    e.cancelBubble = 1;
    instanceId = $(this)[0].attrs.originId;
    $('#ins_id').val(instanceId);
    com = layer.find("#" + instanceId)[0];
    html = "<div class='panel panel-default'> <div class='panel-heading' style='padding:0px;'> <h4 class='panel-title'> <a style='background-color:#ECEFF2;width:100%;'> <span class='panel-title-name'>服务器名</span> <span class='panel-title-type'>配置</span> <span class='panel-title-ip'>IP</span> <span class='panel-title-status'>登录状态</span> </a> </h4> </div> </div>";
    _ref = com.data.openLists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _com = _ref[_i];
      cpu_mem = def.counterInstanceType[_com.instanceType].split('-');
      cpu = cpu_mem[0];
      mem = tools.getAutoUnit(Number(cpu_mem[1]) * 1024, 1024);
      status = "<img src='/img/ecs_unlogin.png' style='margin-top:3px;' />";
      if (global.scriptComList[_com.instanceId]) {
        status = "<img src='/img/ecs_login.png' style='margin-top:3px;' />";
      }
      username = '';
      pwd = '';
      port = 22;
      instanceid = _com.instanceId;
      if (global.scriptComList[instanceid]) {
        username = global.scriptComList[instanceid].username;
        pwd = global.scriptComList[instanceid].pwd;
        port = global.scriptComList[instanceid].port;
      } else if (global.comlistinfoData[instanceid]) {
        username = global.comlistinfoData[instanceid].username;
        pwd = global.comlistinfoData[instanceid].pwd;
        port = global.comlistinfoData[instanceid].port;
      }
      html += "<div class='panel panel-default'> <div class='panel-heading' style='padding:0px'> <h4 class='panel-title'> <a data-toggle='collapse' data-parent='#dServerList' href='#" + instanceid + "' class='collapsed' style='width:100%;'> <span class='panel-title-name' id='" + instanceid + "_instanceName' title='" + _com.instanceName + "'>" + (domFunc.showOverflowText(_com.instanceName, 10)) + "</span> <span class='panel-title-type'>" + cpu + "核 / " + mem + " " + (tools.getOsType(_com.imageId)) + " " + _com.internetMaxBandwidthOut + "M带宽</span> <span class='panel-title-ip'><label id='" + instanceid + "_ip'>" + _com.publicIpAddress[0] + "</label>/" + _com.innerIpAddress[0] + "</span> <span id='" + instanceid + "_status' class='panel-title-status' style='color:#FFA500;'>" + status + "</span> </a> </h4> </div> <div id='" + instanceid + "' class='panel-collapse'> <div class='panel-body'> <span><input type='text' id='" + instanceid + "_username' style='width:150px;' value='" + username + "' class='form-control' placeholder='用户名'/></span> <span><input type='password' id='" + instanceid + "_pwd' style='width:150px;' value='" + pwd + "' class='form-control' placeholder='密码' /></span> <span><input type='text' id='" + instanceid + "_port' style='width:80px;' value='" + port + "' class='form-control' placeholder='端口'/></span> <span><button id='" + instanceid + "_login' data-id='" + instanceid + "' class='ecsslogin btn btn-warning' style='width:50px;'>确定</button></span> <span><button id='" + instanceid + "_reset' data-id='" + instanceid + "' class='ecssreset btn btn-default' style='width:50px;'>取消</button></span> </div> </div> </div>";
    }
    $('#dServerList').html(html);
    $('#scriptLoginListModal').modal('show');
  },
  onEcssresetClick: function() {
    var id;
    id = $(this).data('id');
    $("#" + id + "_status").parent().trigger('click');
  },
  onEcssloginClick: function() {
    var id, name, port, postData, publicIp, pwd, scriptObj, username;
    id = $(this).data('id');
    username = $("#" + id + "_username").val();
    pwd = $("#" + id + "_pwd").val();
    port = $("#" + id + "_port").val();
    if (!(username && pwd && port)) {
      $.notify({
        msg: '信息填写不完整',
        type: 'danger'
      });
    } else if (isNaN(port)) {
      $.notify({
        msg: '端口格式不正确',
        type: 'danger'
      });
    } else {
      publicIp = $("#" + id + "_ip").text();
      name = $("#" + id + "_instanceName").attr('title');
      if (global.isAgent) {
        postData = {
          url: "http://" + publicIp + ":8000",
          parms: "findbygroup"
        };
        tools.post('/ssh/getGroupList', postData, function(rs) {
          var scriptObj;
          if (!(rs === 'err')) {
            scriptObj = {
              id: id,
              host: publicIp,
              username: username,
              pwd: pwd,
              name: name,
              port: port
            };
            domFunc.onEcssCheckLogin(scriptObj);
          } else {
            $.notify({
              msg: '该组件无法执行agent脚本',
              type: 'warning'
            });
          }
        }, '验证是否可执行agent脚本', 8000, '', function(err) {
          if (err.statusText === 'timeout' || err) {
            $.notify({
              msg: '该组件无法执行agent脚本',
              type: 'warning'
            });
          }
        });
      } else {
        scriptObj = {
          id: id,
          host: publicIp,
          username: username,
          pwd: pwd,
          name: name,
          port: port
        };
        domFunc.onEcssCheckLogin(scriptObj);
      }
    }
  },
  onEcssCheckLogin: function(scriptObj) {
    var id;
    id = scriptObj.id;
    global.scriptComList[id] = {};
    global.scriptComList[id] = {
      host: scriptObj.host,
      username: scriptObj.username,
      pwd: scriptObj.pwd,
      name: scriptObj.name,
      port: scriptObj.port
    };
    global.tmpInstanceId = id;
    tools.post('/ssh/checklogin', global.scriptComList[id], function(_rs) {
      domFunc.ecssCheckLoginRs(_rs, scriptObj);
    }, null, 30000, '', function(err) {
      delete global.scriptComList[id];
      if (err.statusText === 'timeout') {
        $.notify({
          msg: '登录超时,检查端口是否开启',
          type: 'warning'
        });
      } else {
        $.notify({
          msg: '登录超时',
          type: 'warning'
        });
      }
    });
  },
  ecssCheckLoginRs: function(_rs, scriptObj) {
    var ecs_doScript_com, id, isSavePwd, postData, rs, scriptPort, scriptPwd, scriptUsername, tempImage;
    rs = _rs.split('_');
    if (rs[0] === '1') {
      $("#" + global.tmpInstanceId + "_status").html("<img src='/img/ecs_login.png' style='margin-top:3px;' />");
      $("#" + global.tmpInstanceId + "_status").parent().trigger('click');
      isSavePwd = $('#saveEcssPwd:checked').length;
      scriptUsername = $("#" + global.tmpInstanceId + "_username").val();
      scriptPwd = $("#" + global.tmpInstanceId + "_pwd").val();
      scriptPort = $("#" + global.tmpInstanceId + "_port").val();
      if (isSavePwd === 1) {
        postData = {
          instanceid: global.tmpInstanceId,
          username: scriptUsername,
          pwd: scriptPwd,
          port: scriptPort
        };
        $.post('/comlogininfo/add', postData);
        if (global.comlistinfoData[global.tmpInstanceId]) {
          global.comlistinfoData[global.tmpInstanceId].username = scriptUsername;
          global.comlistinfoData[global.tmpInstanceId].pwd = scriptPwd;
          global.comlistinfoData[global.tmpInstanceId].port = +scriptPort;
        } else {
          global.comlistinfoData[global.tmpInstanceId] = {
            username: scriptUsername,
            pwd: scriptPwd,
            port: +scriptPort
          };
        }
      }
      id = tools.getNodeIdByInstanceId(global.tmpInstanceId);
      ecs_doScript_com = stage.find("." + id)[0];
      tempImage = new Image();
      tempImage.src = resources.loadImages['ecs_login'];
      ecs_doScript_com.corners.rightTop.icon.setImage(tempImage);
      ecs_doScript_com.attrs.isLogin = true;
      stage.batchDraw();
      $('#save-script-bottom-board').stop(true, true).animate({
        'bottom': '-140px'
      }, 500);
      $('#bottom-board').stop(true, true).animate({
        'bottom': '0px'
      }, 500);
    } else {
      id = scriptObj.id;
      delete global.scriptComList[id];
      $.notify({
        msg: "" + rs[1] + "用户名或密码错误",
        type: 'warning'
      });
    }
  },
  onBtnScriptLoginClick: function() {
    var com, id, name, publicIp, scriptPort, scriptPwd, scriptUsername, _com, _i, _len, _ref;
    id = $('#ins_id').val();
    com = layer.find("#" + id)[0];
    global.checkScriptLoginNum = com.data.openLists.length;
    _ref = com.data.openLists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _com = _ref[_i];
      publicIp = _com.publicIpAddress[0];
      scriptUsername = $('#script-username').val();
      scriptPwd = $('#script-pwd').val();
      scriptPort = $('#script-port').val();
      name = _com.instanceName;
      if ((!(scriptUsername && scriptPwd && scriptPort)) || isNaN(scriptPort)) {
        $('#scriptlogin-error').text('信息填写正确完整');
        return;
      }
      global.scriptComList[_com.instanceId] = {};
      global.scriptComList[_com.instanceId] = {
        host: publicIp,
        username: scriptUsername,
        pwd: scriptPwd,
        name: name,
        port: scriptPort
      };
      global.tmpInstanceId = _com.instanceId;
      tools.post('/ssh/checklogin', global.scriptComList[_com.instanceId], function(_rs) {
        domFunc.checkLoginRs(_rs, _com);
      }, null, 30000, '', function(err) {
        delete global.scriptComList[_com.instanceId];
        $.notify({
          msg: '登录超时',
          type: 'warning'
        });
      });
    }
  },
  checkLoginRs: function(_rs, _com) {
    var ecs_doScript_com, id, isSavePwd, postData, rs, scriptPort, scriptPwd, scriptUsername, tempImage;
    global.checkScriptLoginNum--;
    rs = _rs.split('_');
    if (rs[0] === '1') {
      isSavePwd = $('#scriptLoginModal_savePwd:checked').length;
      scriptUsername = $('#script-username').val();
      scriptPwd = $('#script-pwd').val();
      scriptPort = $('#script-port').val();
      if (isSavePwd === 1) {
        postData = {
          instanceid: global.tmpInstanceId,
          username: scriptUsername,
          pwd: scriptPwd,
          port: scriptPort
        };
        $.post('/comlogininfo/add', postData);
        if (global.comlistinfoData[global.tmpInstanceId]) {
          global.comlistinfoData[global.tmpInstanceId].username = scriptUsername;
          global.comlistinfoData[global.tmpInstanceId].pwd = scriptPwd;
          global.comlistinfoData[global.tmpInstanceId].port = +scriptPort;
        } else {
          global.comlistinfoData[global.tmpInstanceId] = {
            username: scriptUsername,
            pwd: scriptPwd,
            port: +scriptPort
          };
        }
      }
      if (global.checkScriptLoginNum === 0) {
        id = $('#ins_id').val();
        ecs_doScript_com = stage.find("." + id)[0];
        tempImage = new Image();
        tempImage.src = resources.loadImages['ecs_login'];
        ecs_doScript_com.corners.rightTop.icon.setImage(tempImage);
        ecs_doScript_com.attrs.isLogin = true;
        stage.batchDraw();
        $('#scriptLoginModal').modal('hide');
        $('#save-script-bottom-board').stop(true, true).animate({
          'bottom': '-140px'
        }, 500);
        $('#bottom-board').stop(true, true).animate({
          'bottom': '0px'
        }, 500);
      }
    } else {
      delete global.scriptComList[_com.instanceId];
      $('#scriptlogin-error').text("" + rs[1] + "用户名或密码错误");
    }
  },
  onOSImageModalShow: function() {
    var post_data, self, snapshotList;
    self = global.selectObj;
    snapshotList = $('#snapshotList');
    $('.createOSImageModalText').val('');
    $('#createImageOption1').iCheck('check');
    snapshotList.hide();
    if (!self.data.openList.isOpen) {
      return;
    }
    post_data = {
      accessKeyId: global.accessKeyId,
      accessKeySec: global.accessKeySec,
      instanceId: self.data.openList.instanceId,
      diskId: self.data.disks[0].diskId,
      ownerAccount: def.ownerAccount
    };
    tools.post('/api/disk/snapshot/list', post_data, domFunc.getDiskSnapshotCallback, '正在获取当前系统盘的快照信息...');
  },
  getDiskSnapshotCallback: function(_data) {
    var imageSnapshotList, json, listHtml, obj, snapshotList, _i, _len, _ref;
    if (_data.code !== 1) {
      return;
    }
    imageSnapshotList = $('#createOSImageSnapshotList');
    snapshotList = $('#snapshotList');
    imageSnapshotList.empty();
    json = $.evalJSON(_data.body);
    _ref = json.data.Snapshots;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      listHtml = '<li><label for="snapshot-' + obj.SnapshotId + '"><input type="radio" name="snapshotListItem" id="snapshot-' + obj.SnapshotId + '" value="' + obj.SnapshotId + '" disabled> ' + obj.SnapshotId + '</label></li>';
      imageSnapshotList.append(listHtml);
    }
    if (json.data.Snapshots.length > 0) {
      snapshotList.show();
    }
  },
  showSlbPortsList: function(slbObj, ecsObj) {
    var html, _i, _len, _lisIndex, _listener, _ref;
    html = '';
    if (slbObj.data.openList.listener && slbObj.data.openList.listener.length) {
      $('#old_listen_div').show();
      _ref = slbObj.data.openList.listener;
      for (_lisIndex = _i = 0, _len = _ref.length; _i < _len; _lisIndex = ++_i) {
        _listener = _ref[_lisIndex];
        html += "<li><label for='lis_" + _lisIndex + "'><input type='radio' name='oldListenList' id='lis_" + _lisIndex + "' data-proto='" + _listener.protocol + "' data-lis='" + _listener.listenerPort + "' data-backlis='" + _listener.backendServerPort + "'/> " + _listener.listenerPort + " / " + _listener.backendServerPort + "</label></li>";
      }
    } else {
      $('#old_listen_div').hide();
    }
    $('#slbPortsList').html(html);
    tools.addIcheckStyle($('#slbPortsList input'), 'radio');
  },
  setSlbPortsShow: function() {
    domFunc.onNewListenChange();
  },
  onOldListenChange: function() {
    $('input[name=rd_listen][value=old]').iCheck('check');
  },
  onNewListenChange: function() {
    $('.slbPortsList.oldSlbPorts input').iCheck('uncheck');
    $('input[name=rd_listen][value=new]').iCheck('check');
  },
  onSlbListenerChange: function() {
    var listener;
    listener = $(this).val();
    if (listener !== 'old') {
      domFunc.onNewListenChange();
    }
  },
  showDiskModal: function(diskType, diskVal) {
    if (diskType === 'cloud') {
      diskType = '云磁盘';
    } else if ('ephemeral') {
      diskType = '临时磁盘';
    } else {
      return;
    }
    $('#diskModalLabel').text(diskType);
    $('#diskModal').modal('show');
  },
  diskInit: function(val) {
    var dVal;
    dVal = val ? val : 5;
    $('#diskname').val('');
    $('#txt_disk').val(dVal);
    $('#disk_value_slider').slider("option", "value", $('#txt_disk').val());
  },
  diskSliderInit: function() {
    $("#disk_value_slider").slider({
      range: "min",
      min: 5,
      max: 2048,
      step: 1,
      value: 5,
      create: function(event, ui) {
        $("#txt_disk").val($("#disk_value_slider").slider("option", "value"));
      },
      slide: function(event, ui) {
        $('#txt_disk').val(ui.value);
        global.selectDisk.size = parseInt(ui.value);
      },
      stop: function(event, ui) {
        return domFunc.verifyDiskSize();
      }
    });
    $("#disk_value_slider").addTouch();
  },
  onModalTxtDiskChange: function() {
    var disk_size;
    disk_size = Math.floor(+$('#txt_disk').val());
    if (!disk_size || isNaN(disk_size) || disk_size <= 4) {
      disk_size = 5;
    }
    $('#txt_disk').val(disk_size);
    $("#disk_value_slider").slider("option", "value", disk_size);
    global.selectDisk.size = disk_size;
    domFunc.verifyDiskSize();
  },
  verifyDiskSize: function() {
    var appropriate, currSize, currValue;
    currSize = tools.calculateEcsDiskSize(global.selectObj.data.disks);
    if (currSize > def.disk.maxSize) {
      currValue = parseInt($('#txt_disk').val());
      appropriate = currValue - (currSize - def.disk.maxSize);
      domFunc.diskInit(appropriate);
      global.selectDisk.size = appropriate;
      $.notify({
        msg: "磁盘总容量不得大于 2TB",
        type: 'danger'
      });
    }
    domFunc.showRemark(global.selectObj);
  },
  onMonitorModalShow: function() {
    var ecs, key, post_data, tempArray, value, _i, _len, _ref, _ref1;
    tempArray = [];
    _ref = data.ecs;
    for (key in _ref) {
      value = _ref[key];
      if (value.openList.isOpen) {
        if (value.amount === 1) {
          tempArray.push(value.openList.instanceId);
        } else {
          _ref1 = value.openLists;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            ecs = _ref1[_i];
            tempArray.push(ecs.instanceId);
          }
        }
      }
    }
    post_data = {
      instanceIds: tempArray
    };
    tools.post('/monitor/getLast', post_data, domFunc.getMonitorLastCallback);
  },
  getMonitorLastCallback: function(_data) {
    var defaultData, ecs, jsonArr, key, monitorHosts, value, _i, _len, _ref, _ref1;
    defaultData = {
      cpu: 0,
      bpsRead: 0,
      bpsWrite: 0,
      iopsRead: 0,
      iopsWrite: 0,
      internetRX: 0,
      internetTX: 0
    };
    jsonArr = $.evalJSON(_data);
    monitorHosts = {};
    jsonArr.each(function(val) {
      var tempId;
      tempId = val.instanceId;
      return monitorHosts[tempId] = val;
    });
    _ref = data.ecs;
    for (key in _ref) {
      value = _ref[key];
      if (value.openList.isOpen) {
        if (value.amount === 1) {
          domFunc.getMonitorLastHandle(value.openList, defaultData, monitorHosts, value.bandWidth);
        } else {
          _ref1 = value.openLists;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            ecs = _ref1[_i];
            domFunc.getMonitorLastHandle(ecs, defaultData, monitorHosts, value.bandWidth);
          }
        }
      }
    }
  },
  getMonitorLastHandle: function(openParams, defaultData, monitorHosts, bandWidth) {
    var content2, gauge1, gauge3, instanceId, monitorHost, opts, target1, target2, target3, tempMonitorData, title1, title2, title3;
    instanceId = openParams.instanceId;
    monitorHost = $('#monitor-stopwatch-' + openParams.instanceId);
    tempMonitorData = monitorHosts[instanceId] ? monitorHosts[instanceId] : defaultData;
    title1 = $('#stopwatch-title-' + openParams.instanceId + '-1');
    title2 = $('#stopwatch-title-' + openParams.instanceId + '-2');
    title3 = $('#stopwatch-title-' + openParams.instanceId + '-3');
    content2 = $('#stopwatch-content-' + openParams.instanceId + '-2');
    title1.text(tempMonitorData.cpu + '%');
    title3.text((tempMonitorData.internetTX / 1024).round(2) + 'MB');
    content2.html("<b>I/O读:</b> <span class='toe'>" + tempMonitorData.iopsRead + " 次</span><br> <b>I/O写:</b> <span class='toe'>" + tempMonitorData.iopsWrite + " 次</span><br> <b>BPS读:</b> <span class='toe'>" + ((tempMonitorData.bpsRead / 1024 / 1024).round(2)) + " MB</span><br> <b>BPS写:</b> <span class='toe'>" + ((tempMonitorData.bpsWrite / 1024 / 1024).round(2)) + " MB</span><br>");
    opts = {
      lines: 12,
      angle: 0.15,
      lineWidth: 0.44,
      pointer: {
        length: 0.9,
        strokeWidth: 0.035,
        color: '#000000'
      },
      limitMax: 'false',
      colorStart: '#6FADCF',
      colorStop: '#8FC0DA',
      strokeColor: '#E0E0E0',
      generateGradient: true
    };
    target1 = $('#stopwatch-canvas-' + openParams.instanceId + '-1').get(0);
    target2 = $('#stopwatch-canvas-' + openParams.instanceId + '-2').get(0);
    target3 = $('#stopwatch-canvas-' + openParams.instanceId + '-3').get(0);
    gauge1 = new Gauge(target1).setOptions(opts);
    gauge1.maxValue = 100;
    gauge1.animationSpeed = 32;
    gauge1.set(tempMonitorData.cpu);
    gauge3 = new Gauge(target3).setOptions(opts);
    gauge3.maxValue = parseInt(bandWidth);
    gauge3.animationSpeed = 32;
    gauge3.set((tempMonitorData.internetTX / 1024).round(2));
  },
  onExeTimeTypeChange: function() {
    var type;
    type = $(this).data('value');
    if (type === 'now') {
      $('#setTimeoutBar').hide();
    } else {
      $('#setTimeoutBar').show();
    }
  },
  onSynchroClick: function(e) {
    var html, source, template, toggleSubTask;
    if (!tools.isAllOk('ecs')) {
      $.notify({
        msg: '画布上存在未设置镜像的ECS，请先设置镜像',
        type: 'warning'
      });
      return false;
    }
    task.build();
    if (task.queue.length === 0) {
      $.notify({
        msg: '当前没有可同步的任务'
      });
      return false;
    }
    $('#export-xls,#task-confirm-btn,#download-pic-link').hide();
    $('#task-confirm-btn').show();
    if (task.isProcessing) {
      $('#preview .loading').show();
    } else {
      $('#preview .loading').hide();
    }
    source = $("#task-confirm-item-tpl").html();
    template = Handlebars.compile(source);
    html = template(task.queue);
    $('#preview-task').html('');
    $('#preview-task').html(html);
    if (task.isProcessing) {
      $('#preview .loading').show();
    } else {
      $('#preview .loading').hide();
    }
    toggleSubTask = function(taskId) {
      $("#toggle-" + taskId).toggleClass('glyphicon-chevron-down');
      $("#toggle-" + taskId).toggleClass('glyphicon-chevron-right');
      return $(".parent-" + taskId).toggle();
    };
    $('.list-table-item .arrow').on('click', function() {
      var _taskId, _this;
      _this = $(this);
      _taskId = _this.data('taskid');
      toggleSubTask(_taskId);
    });
    $('.list-table-item').on('dblclick', function() {
      var _taskId, _this;
      _this = $(this);
      _taskId = _this.attr('id');
      toggleSubTask(_taskId);
    });
  },
  onConfirmSynchro: function() {
    if (!$.cookie('loginMail')) {
      $('#loginModal').modal('show');
      $('#preview').modal('hide');
      $.cookie('savetype', 'task_confirm');
      return false;
    } else if (!global.synchronized) {
      $.cookie('synchrotype', 'task_confirm');
      $('#comListModelBtn').trigger('click');
      return $('#preview').modal('hide');
    } else {
      $('.task-status.run').attr('class', 'task-status wait');
      $('#preview .loading').show();
      task.exec();
      return false;
    }
  },
  onCopyEcsDialogShow: function() {
    $('input[name=ecsCopyOption][value=1]').iCheck('check');
    $('#ecsCopyNum').val(1);
    $('input[name=isCopyContent][value=1]').iCheck('check');
  },
  onEcsCopyConfrimClick: function() {
    var amount, copyNum, currObj, currObjChild, ecsCopyOption, i, isCopyContent, _i, _ref;
    currObj = global.selectObj;
    currObjChild = currObj.children[0];
    ecsCopyOption = $('input[name=ecsCopyOption]:checked').val();
    isCopyContent = $('input[name=isCopyContent]:checked').val();
    copyNum = $('#ecsCopyNum').val();
    amount = parseInt(currObj.data.amount) + parseInt(copyNum);
    if (ecsCopyOption - 0 === 1) {
      canFunc.changeEcsAmount(currObj, parseInt(amount));
      currObj.setAmount(amount);
    } else {
      for (i = _i = 1, _ref = parseInt(copyNum); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        canFunc.comCopy(currObjChild);
      }
    }
    $('#copyEcsDialog').modal('hide');
    layer.batchDraw();
    canFunc.saveHistory();
  },
  ecsServerListShow: function(currObj) {
    var ecsGroupLi;
    if (+currObj.data.amount > 1 && $('#remark4Ecs .nav-pills').children().length <= 2) {
      ecsGroupLi = "<li id='ecsGroup'><a href='#ecs-ecsgroup' data-toggle='tab' class='font12'>服务器组</a></li>";
      $('#remark4Ecs .nav-pills').show().append(ecsGroupLi);
    } else if (+currObj.data.amount <= 1) {
      $('#ecsGroup').remove();
      if ($('#secgroupTab').parent().css('display') === 'none') {
        console.log(1);
      }
    }
    domFunc.showServerList(currObj);
  },
  secgroupTabClick: function() {
    if (global.secGroupList.length > 0) {
      $('#secgroupTab').attr('data-toggle', 'tab');
    } else {
      $.notify({
        msg: "请先同步阿里云产品信息",
        type: 'warning'
      });
      $('#secgroupTab').removeAttr('data-toggle');
    }
  },
  showServerList: function(currObj) {
    var html, _ecs, _i, _len, _ref;
    html = "<div class='font14 clearfix ecs-server-col-title'> <div class='ecs-server-col ecs-server-name fleft'>名称</div> <div class='ecs-server-col ecs-server-id fleft'>ID</div> <div class='ecs-server-col ecs-server-ip fleft'>IP</div> <div class='ecs-server-col ecs-server-op fleft'>操作</div> </div>";
    _ref = currObj.data.openLists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ecs = _ref[_i];
      html += "<div class='font12 clearfix'> <div class='ecs-server-col ecs-server-name fleft' title='" + _ecs.instanceName + "'>" + (domFunc.showOverflowText(_ecs.instanceName, 7)) + "</div> <div class='ecs-server-col ecs-server-id fleft' title='" + _ecs.instanceId + "'>" + (domFunc.showOverflowText(_ecs.instanceId, 7)) + "</div> <div class='ecs-server-col ecs-server-ip fleft' title='" + _ecs.publicIpAddress + "'>" + (_ecs.publicIpAddress ? _ecs.publicIpAddress : '无') + "</div> <div class='ecs-server-col ecs-server-op fleft' title='移除'><a href='javascript:void(0)' data-id='" + _ecs.instanceId + "' class='ecs_in_ecss_remove fleft icon-del-row'>-</a></div> </div>";
    }
    $('#ecsServerList').html(html);
  },
  delEcsInEcss: function(_ecs, selectobj) {
    var amount, currObj, findbs, val, _ref, _slb, _slbid;
    currObj = selectobj || global.selectObj;
    amount = currObj.data.amount - 1;
    delete global.selectComObjList[_ecs.instanceId];
    delete currObj.data.maps[_ecs.instanceId];
    currObj.data.openLists.remove(_ecs);
    currObj.setAmount(amount);
    $('#ecs-buy-amount').val(amount);
    tools.renameOpenLists(currObj.data);
    _ref = data.slb;
    for (_slbid in _ref) {
      _slb = _ref[_slbid];
      findbs = _slb.openList.backendServer.find(function(bs) {
        return bs.serverId === instanceId;
      });
      if (findbs) {
        _slb.openList.backendServer.remove(findbs);
      }
      val = $('#slb-ecs-content .row').length;
      $('#addSLBNum').text(val);
    }
  },
  onEcsInEcssRemoveClick: function(e, obj, nodeid) {
    var currObj, instanceId, _ecs;
    instanceId = nodeid || $(this).data('id');
    currObj = obj || global.selectObj;
    _ecs = currObj.data.openLists.find(function(_ol) {
      return _ol.instanceId === instanceId;
    });
    if (_ecs) {
      if (tools.isMapped(currObj.data)) {
        currObj.peelOff(_ecs.instanceId);
        domFunc.ecsServerListShow(currObj);
      } else {
        domFunc.delEcsInEcss(_ecs);
        domFunc.ecsServerListShow(currObj);
        layer.batchDraw();
      }
    }
    if (currObj.data.openLists.length <= 1) {
      domFunc.setRightArrowShow(currObj);
    }
    domFunc.displayComListNum();
  },
  slbExpansionShow: function(currObj) {
    var ecsGroupInSlbLi, ecsListNum;
    if (tools.isMapped(currObj.data)) {
      ecsListNum = currObj.data.openList.backendServer ? currObj.data.openList.backendServer.length : 0;
      if (ecsListNum > 1 && $('#remark4Slb .nav-pills').children().length <= 2) {
        ecsGroupInSlbLi = "<li id='ecsGroupInSlb'><a href='#slb-expansion' data-toggle='tab' class='font12'>扩容计划</a></li>";
        $('#remark4Slb .nav-pills').append(ecsGroupInSlbLi);
      } else if (ecsListNum === 0 && $('#remark4Slb .nav-pills').children().length > 2) {
        $('#ecsGroupInSlb').remove();
      } else if ((!tools.isMapped(currObj.data)) && $('#remark4Slb .nav-pills').children().length > 2) {
        $('#ecsGroupInSlb').remove();
      }
      domFunc.showEcsInSlbList(currObj);
    } else {
      $('#ecsGroupInSlb').remove();
      $('#expansionEcsList').html('');
    }
  },
  showEcsInSlbList: function(currObj) {
    var html, _bs, _ecs, _ecsData, _i, _len, _ref;
    if (tools.isMapped(currObj.data)) {
      html = "<div class='font14 clearfix ecs-server-col-title'> <div style='border-right-width:1px;' class='ecs-server-col ecs-server-op fleft'>操作</div> <div class='ecs-server-col ecs-server-name fleft'>名称</div> <div class='ecs-server-col ecs-server-id fleft'>ID</div> <div style='border-right-width:0px;' class='ecs-server-col ecs-server-ip fleft'>IP</div> </div>";
      _ref = currObj.data.openList.backendServer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _bs = _ref[_i];
        _ecs = layer.find("#" + _bs.serverId)[0];
        if (!_ecs) {
          _ecs = layer.find("#" + (tools.getNodeIdByInstanceId(_bs.serverId)))[0];
        }
        if (_ecs) {
          _ecsData = _ecs.data.openList;
          if (tools.isMapped(currObj.data)) {
            html += "<div class='font12 clearfix'> <div style='border-right-width:1px;' class='ecs-server-col ecs-server-op fleft'><input type='checkbox' class='ecsinslb' data-id='" + _bs.serverId + "' /></div> <div class='ecs-server-col ecs-server-name fleft' title='" + (_ecs.getName()) + "'>" + (domFunc.showOverflowText(_ecs.getName(), 7)) + "</div> <div class='ecs-server-col ecs-server-id fleft' title='" + _ecsData.instanceId + "'>" + (domFunc.showOverflowText(_ecsData.instanceId, 7)) + "</div> <div style='border-right-width:0px;' class='ecs-server-col ecs-server-ip fleft' title='" + _ecsData.publicIpAddress + "'>" + (_ecsData.publicIpAddress ? _ecsData.publicIpAddress : '无') + "</div> </div>";
          }
        }
      }
      $('#expansionEcsList').html(html);
      tools.addIcheckStyle($('#expansionEcsList'));
    }
  },
  updateAllOpenComStatus: function(isShowLoading) {
    if (tools.isMapped()) {
      domFunc.getOpenComStatus(isShowLoading);
      domFunc.setNewRightBottom();
      layer.batchDraw();
    }
  },
  getOpenComStatus: function(isShowLoading) {
    var isBack, postData;
    postData = {
      accessKeyId: global.accessKeyId,
      accessKeySec: global.accessKeySec,
      regionId: $.cookie('regionId'),
      ownerAccount: def.ownerAccount
    };
    isBack = !isShowLoading;
    domFunc.getAllCom(postData, null, domFunc.updateAllOpenComStatusCallback, isBack);
  },
  updateAllOpenComStatusCallback: function(_data) {
    var comImgListHtml, comList, comListHtml, count, rs, _com, _scom;
    global.comlistData = _data;
    global.comList = {};
    rs = $.evalJSON(_data);
    comList = rs.data;
    comListHtml = '';
    comImgListHtml = '';
    if (!comList || comList.Code) {
      return;
    } else {
      domFunc.updateAllOpenComStyle(comList);
      domFunc.listComlist(_data, global.isOpenComListModal);
    }
    tools.addIcheckStyle($('#comListModel input'));
    count = 0;
    for (_com in global.comList) {
      count++;
    }
    for (_scom in global.selectComObjList) {
      count--;
    }
    if (count > 0) {
      $('#selectAll').removeAttr('disabled');
    } else {
      $('#selectAll').attr('disabled', 'disabled');
    }
    domFunc.getSecgroupList();
    domFunc.displayComListNum();
  },
  updateAllOpenComStyle: function(comList) {
    var com, com_params, data_com_arr, ecs, flag, openComLists, previous, tempStatus, _i, _instanceId, _j, _len, _len1, _ref, _tempStatus;
    openComLists = tools.getOpenCom();
    for (_i = 0, _len = openComLists.length; _i < _len; _i++) {
      com = openComLists[_i];
      switch (com.kind) {
        case 'ecs':
          if (com.data.amount === 1) {
            _instanceId = com.data.openList.instanceId;
            _tempStatus = global.comList[_instanceId];
            if ((!_tempStatus) && (global.newEcsInstanceId !== _instanceId)) {
              tools.clearDeletedComponent(_instanceId, com.kind);
              return;
            }
            if (!_tempStatus) {
              return;
            }
            tempStatus = _tempStatus.info;
            if (tempStatus.Status !== 'Deleted') {
              com.setStatusStyle(tempStatus.Status);
              com.data.maps[_instanceId] = tempStatus;
              global.selectComObjList[_instanceId] = tempStatus;
              if (global.newEcsInstanceId === _instanceId) {
                data_com_arr = {
                  info: tempStatus,
                  type: 'ecs'
                };
                com_params = canFunc.setEcssData([data_com_arr]);
                com.setData(com_params);
                com.setTitleText(tempStatus.InstanceName);
                global.newEcsInstanceId = '';
              }
            } else {
              canFunc.destroyObj(com);
            }
          } else {
            flag = false;
            previous = null;
            _ref = com.data.openLists;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              ecs = _ref[_j];
              if (ecs) {
                _instanceId = ecs.instanceId;
              } else {
                return;
              }
              _tempStatus = global.comList[_instanceId];
              if (!_tempStatus && (global.newEcsInstanceId !== _instanceId)) {
                tools.clearDeletedComponent(_instanceId, com.kind);
                return;
              }
              if (!_tempStatus) {
                return;
              }
              tempStatus = _tempStatus.info;
              if (tempStatus.Status === 'Deleted') {
                com.data.openLists.remove({
                  'instanceId': _instanceId
                });
                com.setAmount(com.data.openLists.length);
              } else {
                if (previous) {
                  if (previous !== tempStatus.Status) {
                    flag = true;
                  }
                }
                previous = tempStatus.Status;
              }
              com.data.maps[_instanceId] = tempStatus;
            }
            if (flag) {
              com.setStatusStyle('');
            } else {
              com.setStatusStyle(tempStatus.Status);
            }
          }
          break;
        case 'rds':
          _instanceId = com.data.openList.dbInstanceId;
          _tempStatus = global.comList[_instanceId];
          if (!_tempStatus) {
            tools.clearDeletedComponent(_instanceId, com.kind);
            return;
          }
          tempStatus = _tempStatus.info;
          if (tempStatus.DBInstanceStatus === 'Running') {
            com.setStatusStyle('Running');
            com.data.maps[_instanceId] = tempStatus;
          } else {
            canFunc.destroyObj(com);
          }
          break;
        case 'slb':
          _instanceId = com.data.openList.loadBalancerId;
          _tempStatus = global.comList[_instanceId];
          if (!_tempStatus) {
            tools.clearDeletedComponent(_instanceId, com.kind);
            return;
          }
          tempStatus = _tempStatus.info;
          if (tempStatus.LoadBalancerStatus === 'active') {
            com.setStatusStyle('Running');
            com.data.maps[_instanceId] = tempStatus;
          } else {
            canFunc.destroyObj(com);
          }
          break;
        case 'oss':
          _instanceId = com.data.openList.bucketName;
          _tempStatus = global.comList[_instanceId];
          if (!_tempStatus) {
            tools.clearDeletedComponent(_instanceId, com.kind);
            return;
          }
          com.setStatusStyle('Running');
          com.data.maps[_instanceId] = tempStatus;
      }
    }
    layer.batchDraw();
  },
  onCreateSnapshotModalBtnClick: function() {
    var currDisk, self, snapshotModal, snapshotModalText, snapshotName;
    self = global.selectObj;
    currDisk = global.selectDisk;
    snapshotModal = $('#createSnapshotModal');
    snapshotModalText = $('#createSnapshotModalText');
    snapshotName = $.trim(snapshotModalText.val());
    if (!/^([a-z]|[A-Z])+[\w-]{1,14}$/.test(snapshotName)) {
      $.notify({
        msg: '快照名称不正确,正确的名称2~15个字符，只能包含字母、数字、-，并且必须以字母开头',
        type: 'danger'
      });
    } else if (!snapshotName) {
      $.notify({
        msg: "快照名称不可为空",
        type: 'danger'
      });
    } else {
      task.ecs.pushSnapshot({
        instanceId: self.data.openList.instanceId,
        diskId: currDisk.diskId,
        snapshotName: snapshotName
      });
      snapshotModal.modal('hide');
      snapshotModalText.val('');
    }
  },
  onCreateImageOptionDivClick: function() {
    var createImageOptionVal, snapshotListItem;
    createImageOptionVal = parseInt($('input[name=createImageOption]:checked').val());
    if (createImageOptionVal) {
      snapshotListItem = $('input[name=snapshotListItem]');
      $('.createOSImageModalText').removeAttr('disabled');
      if (createImageOptionVal === 1) {
        $('#createOSImageModalText2').attr('disabled', 'disabled');
        snapshotListItem.removeAttr('checked');
        snapshotListItem.attr('disabled', 'disabled');
      } else if (createImageOptionVal === 2) {
        $('#createOSImageModalText1').attr('disabled', 'disabled');
        snapshotListItem.removeAttr('disabled');
      }
    }
  },
  onCreateOSImageModalBtnClick: function() {
    var createImageOptionVal, osName, self, snapshotId;
    self = global.selectObj;
    createImageOptionVal = parseInt($('input[name=createImageOption]:checked').val());
    if (createImageOptionVal === 1) {
      osName = $('#createOSImageModalText1').val();
      if (!domFunc.verifyImageName(osName)) {
        return;
      }
      console.log('task.ecs.pushImage : 1');
      task.ecs.pushImage({
        instanceId: self.data.openList.instanceId,
        description: osName,
        sysDiskId: self.data.disks[0].diskId,
        osName: osName,
        type: 1
      });
    } else if (createImageOptionVal === 2) {
      osName = $('#createOSImageModalText2').val();
      if (!domFunc.verifyImageName(osName)) {
        return;
      }
      snapshotId = $('input[name=snapshotListItem]:checked').val();
      if (!snapshotId) {
        $.notify({
          msg: "请选择您要从哪个系统快照创建镜像",
          type: 'danger'
        });
        return;
      }
      console.log('task.ecs.pushImage : 2');
      task.ecs.pushImage({
        instanceId: self.data.openList.instanceId,
        description: osName,
        osName: osName,
        snapshotId: snapshotId,
        type: 2
      });
    }
    $('#createOSImageModal').modal('hide');
  },
  verifyImageName: function(name) {
    if (!/^([a-z]|[A-Z])+[\w-]{1,39}$/.test(name)) {
      $.notify({
        msg: "自定义镜像ID的格式输入不正确",
        type: 'danger'
      });
      return false;
    } else {
      return true;
    }
  },
  displayComListNum: function() {
    var comlist, displayLen, len, selectComlist, selectLen;
    comlist = global.comList;
    selectComlist = global.selectComObjList;
    len = 0;
    selectLen = 0;
    len = Object.size(comlist);
    selectLen = Object.size(selectComlist);
    displayLen = len - selectLen;
    if (displayLen <= 0) {
      $('#comListNum').hide();
    } else {
      $('#comListNum').show();
    }
    $('#comListNum').text(displayLen);
  },
  onAdvanceOpaClick: function() {
    canFunc.hidePopover();
    $('.dropdown').dropdown();
  },
  onSearchCloseClick: function(e) {
    domFunc.hideSearch();
  },
  onPrevBtnClick: function() {
    var currentStep;
    currentStep = global.currentStep;
    if (global.isRedragStage) {
      $.notify({
        msg: "您操作过于频繁，请稍后再试 ...",
        type: 'warning'
      });
    } else if (currentStep && currentStep.prev) {
      global.isRedragStage = 1;
      global.lastBackHistory = tools.time();
      canFunc.initClearStage();
      global.currentStep = currentStep.prev;
      canFunc.setStage(currentStep.prev);
      global.isRedragStage = 0;
    } else {
      $.notify({
        msg: "历史纪录为空，不能返回上一步",
        type: 'warning'
      });
    }
  },
  onNextBtnClick: function() {
    var currentStep;
    currentStep = global.currentStep;
    if (global.isRedragStage) {
      $.notify({
        msg: "您操作过于频繁，请稍后再试 ...",
        type: 'warning'
      });
    } else if (currentStep && currentStep.next) {
      global.isRedragStage = 1;
      global.lastBackHistory = tools.time();
      canFunc.initClearStage();
      global.currentStep = currentStep.next;
      canFunc.setStage(currentStep.next);
      global.isRedragStage = 0;
    } else {
      $.notify({
        msg: "已经是最后一步，无法继续下一步",
        type: 'warning'
      });
    }
  },
  notifyBtnClick: function() {
    $('#userTabBtn1').trigger('click');
    $('#UserinfoModal').modal('show');
  },
  onShowLogClick: function() {
    var html, loginMail;
    html = '';
    loginMail = $.cookie('loginMail');
    domFunc.showLogHtml(loginMail, def.page.num, 1);
  },
  showLogHtml: function(loginMail, num, pageNum) {
    var postData;
    postData = {
      loginMail: loginMail,
      num: num,
      page: Number(pageNum)
    };
    $('#pcur').val(pageNum);
    $.post('/log/get', postData, domFunc.getShowLogHtml);
  },
  getShowLogHtml: function(_data) {
    var content, count, currPage, disk, html, o_record, o_time, o_type, o_user, obj, _i, _len, _log;
    html = "<div class='logTable'><table class='show-log-table'><tr style='background-color:#F5F7F9;'><td style='width:69px;height:40px;' class='font14 table-th'>操作时间</td><td style='width:150px;' class='font14 table-th'>操作人</td><td style='width:100px;' class='font14 table-th'>操作类型</td><td style= 'width:335px;text-align:left;' class='font14 table-th'>操作记录</td></tr>";
    for (_i = 0, _len = _data.length; _i < _len; _i++) {
      _log = _data[_i];
      count = 0;
      if (!isNaN(_log)) {
        count = _log;
        continue;
      }
      content = _log.content;
      o_time = tools.formateDate(new Date(_log.created));
      o_user = _log.loginmail;
      o_type = _log.type;
      o_record = '';
      switch (_log.type) {
        case 'login':
          o_type = '登录';
          break;
        case 'loginout':
          o_type = '登出';
          break;
        case 'create':
          obj = $.evalJSON($.evalJSON(content));
          o_record = "" + obj.attrs.kind + " : " + obj.attrs.id;
          o_type = '创建组件';
          break;
        case 'createModel':
          obj = $.evalJSON($.evalJSON(content));
          o_record = "" + obj.attrs.kind + " : " + obj.attrs.id;
          o_type = '导入模板';
          break;
        case 'createImage':
          obj = $.evalJSON(content);
          o_record = "" + obj.osVal + " : " + obj.id;
          o_type = '创建镜像';
          break;
        case 'createDisk':
          obj = $.evalJSON(content);
          disk = obj.disks[obj.disks.length - 1];
          o_record = "" + disk.category + " : " + disk.size + "G : " + obj.id;
          o_type = '创建磁盘';
          break;
        case 'del':
          obj = $.evalJSON($.evalJSON(content));
          o_record = "" + obj.attrs.kind + " : " + obj.attrs.id;
          o_type = '删除组件';
          break;
        case 'line':
          obj = $.evalJSON(content);
          o_record = "" + obj.startPos + " - " + obj.endPos;
          o_type = '划线';
          break;
        case 'delline':
          obj = $.evalJSON(content);
          o_record = "" + obj.startPos + " - " + obj.endPos;
          o_type = '删除线';
          break;
        case 'saveCanvas':
          o_type = '保存画布';
      }
      html += "<tr><td class='font12 comList-font-color'>" + (o_time.toString().split(' ')[0]) + "<br/>" + (o_time.toString().split(' ')[1]) + "</td><td class='font12 comList-font-color'>" + o_user + "</td><td class='font12 comList-font-color'>" + o_type + "</td><td class='font12 comList-font-color' style='text-align:left'>" + o_record + "</td></tr>";
    }
    html += "</table></div>";
    currPage = $('#pcur').val();
    html += domFunc.bindPage(count, def.page.num, currPage);
    $('#dShowLog').html(html);
    $('#showLogModal').modal('show');
    return html;
  },
  bindPage: function(count, num, strCurrPage) {
    var currPage, html, j, maxCount, pageCount, pageEnd, pageStart, style, _i;
    currPage = Number(strCurrPage);
    html = '';
    pageCount = Math.ceil(count / num);
    $('#log_maxCount').val(pageCount);
    html += "<div style='text-align:center'><ul id='log-pagination' class='pagination'>";
    if (pageCount > 1) {
      maxCount = pageCount;
      pageStart = (currPage - 2) < 1 ? 1 : currPage - 2;
      pageEnd = currPage + 2 > maxCount ? maxCount : currPage + 2;
      if (pageEnd < 5 && maxCount > 3) {
        pageEnd = pageStart + 4 > maxCount ? maxCount : pageStart + 4;
      }
      if (pageEnd - pageStart < 5 && maxCount > 3) {
        pageStart = pageEnd - 4 < 1 ? 1 : pageEnd - 4;
      }
      html += '<li><a href="javascript:void(0)" data-page="prev">&laquo;</a></li>';
      for (j = _i = pageStart; pageStart <= pageEnd ? _i <= pageEnd : _i >= pageEnd; j = pageStart <= pageEnd ? ++_i : --_i) {
        style = j === Number(strCurrPage) ? 'active' : '';
        html += "<li class='" + style + "'><a href='javascript:void(0)' data-page=" + j + ">" + j + "</a></li>";
      }
      html += '<li><a href="javascript:void(0)" data-page="next">&raquo;</a></li>';
    }
    html += '</ul></div>';
    return html;
  },
  logPagenumClick: function() {
    var loginMail, maxCount, pageNum;
    pageNum = $(this).data('page');
    if (isNaN(Number(pageNum))) {
      if (pageNum === 'prev') {
        if (Number($('#pcur').val()) - 1 < 1) {
          $.notify({
            msg: "已经是第一页",
            type: 'warning'
          });
          return;
        } else {
          pageNum = Number($('#pcur').val()) - 1;
        }
      } else if (pageNum === 'next') {
        maxCount = $('#log_maxCount').val();
        if (Number($('#pcur').val()) + 1 > Number(maxCount)) {
          $.notify({
            msg: "已经是最后一页",
            type: 'warning'
          });
          return;
        } else {
          pageNum = Number($('#pcur').val()) + 1;
        }
      } else {
        pageNum = $(this).data(pageNum);
      }
    }
    loginMail = $.cookie('loginMail');
    domFunc.showLogHtml(loginMail, def.page.num, pageNum);
  },
  getNotificationList: function() {
    global.notificationFlag = 1;
    if ($.cookie('loginMail')) {
      $.post('/notification/list', domFunc.getNotificationListCallback);
    }
  },
  getNotificationListCallback: function(_data) {
    if (_data === 'err') {
      console.log('拉取通知失败 ...');
    } else {
      global.notificationList = $.evalJSON(_data);
      domFunc.showNotifyListByData();
      global.notificationFlag = 0;
    }
  },
  showNotifyListByData: function(p) {
    var html, i, j, notiLength, notifyBtn, notifyTbody, notifylistNum, notipaginationWrap, pageCount, pageHtml, pageSize, row, startPos, style, unread, unreadCount, _i, _j, _p, _ref;
    notifyTbody = $('#notifyTbody');
    notipaginationWrap = $('#notipaginationWrap');
    notifylistNum = $('#notifylistNum');
    notifyBtn = $('#notifyBtn');
    global.notifyCurrentPage = _p = p || 1;
    unread = 0;
    notiLength = global.notificationList.length;
    pageSize = 10;
    global.notifyMaxPage = pageCount = Math.ceil(notiLength / pageSize);
    startPos = (_p - 1) * pageSize;
    notifyTbody.empty();
    for (i = _i = startPos, _ref = startPos + pageSize - 1; _i <= _ref; i = _i += 1) {
      row = global.notificationList[i];
      if (!row) {
        continue;
      }
      if (row.unread) {
        unread++;
      }
      html = domFunc.createNotificationRow(row);
      notifyTbody.append(html);
      notifyTbody.find('tr').last().data('info', row);
    }
    if (unread) {
      $('#notifylistNum').text(unread).show();
    }
    if (pageCount > 1) {
      pageHtml = '<li><a href="#" data-page="prev">&laquo;</a></li>';
      for (j = _j = 1; 1 <= pageCount ? _j <= pageCount : _j >= pageCount; j = 1 <= pageCount ? ++_j : --_j) {
        style = j === _p ? 'active' : '';
        pageHtml += "<li class='" + style + "'><a href='#' data-page=" + j + ">" + j + "</a></li>";
      }
      pageHtml += '<li><a href="#" data-page="next">&raquo;</a></li>';
      notipaginationWrap.html(pageHtml);
    }
    unreadCount = global.notificationList.findAll({
      unread: 1
    }).length;
    if (unreadCount > 0) {
      notifylistNum.text(unreadCount).show();
      notifyBtn.addClass('newMsg');
    } else {
      notifylistNum.text(0).hide();
      notifyBtn.removeClass('newMsg');
    }
    if (global.notificationFlag && unreadCount > 0) {
      tools.playSound();
    }
  },
  createNotificationRow: function(_row) {
    var unread;
    unread = _row.unread ? 'unread' : '';
    return "<tr class='" + unread + "'> <td class='type'>" + _row.type + "</td> <td>" + _row.from + "</td> <td class='title'>" + _row.title + "</td> <td>" + (tools.getDateBytime(_row.created)) + "</td> <td><a href='#' class='detail'>详细 <span class='glyphicon glyphicon-chevron-down'></span></a></td> </tr>";
  },
  onNotiPaginationItemClick: function() {
    var p, _p;
    p = $(this).data('page');
    if (p === 'prev') {
      if (global.notifyCurrentPage > 1) {
        _p = global.notifyCurrentPage - 1;
      } else {
        $.notify({
          msg: "已经是第一页",
          type: 'warning'
        });
        return;
      }
    } else if (p === 'next') {
      if (global.notifyCurrentPage >= global.notifyMaxPage) {
        $.notify({
          msg: "已经是最后一页",
          type: 'warning'
        });
        return;
      } else {
        _p = global.notifyCurrentPage + 1;
      }
    } else {
      _p = p;
    }
    domFunc.showNotifyListByData(_p);
  },
  onDiySelectTypeChange: function() {
    var val;
    val = parseInt($(this).val());
    global.selectObj.data.serviceType = val;
    canFunc.setDiyMainIcoImage(val);
  },
  onCstomComIpAdressBlur: function() {
    global.selectObj.data.serviceIP = $.trim($(this).val());
  },
  onNotifyRowClick: function(e) {
    var id, notifylistNum, tr, unreadCount;
    tr = $(this).closest('tr');
    id = tr.data('info')._id;
    tr.removeClass('unread');
    notifylistNum = $('#notifylistNum');
    $('tr.detailTr').remove();
    global.notificationList.find({
      _id: id
    }).unread = 0;
    unreadCount = global.notificationList.findAll({
      unread: 1
    }).length;
    if (unreadCount > 0) {
      notifylistNum.text(unreadCount).show();
    } else {
      notifylistNum.text(0).hide();
    }
    $.post('/notification/upread', {
      id: id
    }, domFunc.upreadNotifyCallback);
  },
  onNotifyMsgDetail: function(e) {
    var glyphicon, id, msg, newTr, notifyTbody, tr;
    tr = $(this);
    notifyTbody = $('#notifyTbody');
    notifyTbody.find('.glyphicon').attr('class', 'glyphicon glyphicon-chevron-down');
    glyphicon = tr.find('.glyphicon');
    glyphicon.attr('class', 'glyphicon glyphicon-chevron-up');
    try {
      id = tr.data('info')._id;
      msg = global.notificationList.find({
        _id: id
      });
      newTr = "<tr class='detailTr dnone'> <td colspan='5'>" + msg.content + "</td> </tr>";
      $('tr.detailTr').remove();
      tr.after(newTr);
      tr.next().slideDown(1500);
    } catch (_error) {
      e = _error;
      console.log(e);
    }
  },
  onUserinfoModalHide: function() {
    $('tr.detailTr').remove();
  },
  upreadNotifyCallback: function(_data) {},
  getImageList: function() {
    var postData;
    if (!$.cookie('loginMail' && !tools.isMapped())) {
      return;
    }
    postData = {
      accessKeyId: global.accessKeyId,
      accessKeySec: global.accessKeySec,
      regionId: $.cookie('regionId'),
      ownerAccount: def.ownerAccount
    };
    $.post('/ecs/getImageList', postData, domFunc.getImageListCallback);
  },
  getImageListCallback: function(_data) {
    var customImageDiv, customImageListContent, image, json, tempHtml, tempImage, _i, _len, _ref;
    customImageListContent = $('#customImageListContent');
    customImageDiv = $('.custom-image-div');
    json = $.evalJSON(_data);
    if (json.code === 200) {
      _ref = json.data.Images;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        tempImage = {
          osBit: image.Architecture === 'i386' ? 32 : 64,
          osType: tools.formatOsType(image.Platform),
          osName: image.OSName,
          imageId: image.ImageId,
          imageName: image.ImageName
        };
        if (!global.imageInfoList[image.ImageId]) {
          global.imageInfoList[image.ImageId] = tempImage;
          tempHtml = "<div class='com-div custom-image-div'> <div alt='' class='com-tpl com-" + tempImage.osType + tempImage.osBit + "-c need-tip' data-toggle='tooltip' data-category='def-tpl' data-kind='os' data-subtype='" + image.ImageId + "' data-placement='right' title='' data-original-title='" + image.OSName + "<br>" + image.ImageId + "'> <div class='cus-tpl-close'></div> </div> <div class='com-name toe'>" + image.ImageId + "_" + image.ImageName + "</div> </div>";
          customImageListContent.append(tempHtml);
          customImageListContent.find('.com-tpl:last').data('info', image);
        }
      }
    }
  },
  revertCustomImage: function(imageId) {
    var customImageListContent, image, tempHtml;
    if (!imageId) {
      return;
    }
    customImageListContent = $('#customImageListContent');
    image = global.imageInfoList[imageId];
    if (!image) {
      return;
    }
    tempHtml = "<div class='com-div custom-image-div'> <div alt='' class='com-tpl com-" + image.osType + image.osBit + "-c need-tip' data-toggle='tooltip' data-category='def-tpl' data-kind='os' data-subtype='" + image.ImageId + "' data-placement='right' title='' data-original-title='" + image.OSName + "<br>" + image.ImageId + "'> <div class='cus-tpl-close'></div> </div> <div class='com-name toe'>" + image.ImageId + "_" + image.ImageName + "</div> </div>";
    customImageListContent.append(tempHtml);
    customImageListContent.find('.com-tpl:last').data('info', image);
  },
  openDiskListAdd: function(maps) {
    var disk, k, v, _i, _len, _ref, _tempDisk;
    if (Object.size(maps) < 1) {
      return;
    }
    for (k in maps) {
      v = maps[k];
      if (!v.Disk) {
        return;
      }
      _ref = v.Disk;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        disk = _ref[_i];
        if (disk.Type !== 'system') {
          _tempDisk = {
            instanceId: v.InstanceId,
            diskId: disk.DiskId,
            category: disk.Category,
            isOpen: true,
            size: disk.Size,
            type: disk.Type,
            isSystem: false
          };
          global.openDiskList[disk.DiskId] = _tempDisk;
        }
      }
    }
  },
  getSnapshotsList: function() {
    var disk, k, post_data, _ref;
    if (!$.cookie('loginMail')) {
      return;
    }
    if (!Object.size(global.openDiskList)) {
      return;
    }
    _ref = global.openDiskList;
    for (k in _ref) {
      disk = _ref[k];
      post_data = {
        accessKeyId: global.accessKeyId,
        accessKeySec: global.accessKeySec,
        instanceId: disk.instanceId,
        diskId: disk.diskId,
        ownerAccount: def.ownerAccount
      };
      $.post('/api/disk/snapshot/list', post_data, function(_data) {
        domFunc.getSnapshotsListCallback(disk.instanceId, disk.diskId, _data);
      });
    }
  },
  getSnapshotsListCallback: function(instanceId, diskId, _data) {
    var customDiskListContent, json, obj, tempHtml, _i, _len, _ref;
    if ((_data.code !== 1) || (_data.body === '')) {
      return;
    }
    json = $.evalJSON(_data.body);
    customDiskListContent = $('#customDiskListContent');
    if (!json.data.Snapshots) {
      return;
    }
    _ref = json.data.Snapshots;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      obj.InstanceId = instanceId;
      obj.DiskId = diskId;
      if (!global.snapshotInfoList[obj.SnapshotId]) {
        global.snapshotInfoList[obj.SnapshotId] = obj;
        tempHtml = "<div class='com-div custom-disk'> <div alt='' class='com-tpl com-disk need-tip com-disk-snapshot' data-toggle='tooltip' data-category='def-tpl' data-kind='disk' data-subtype='" + obj.SnapshotId + "' data-placement='right' title='' data-original-title='快照ID：" + obj.SnapshotId + "'> <div class='cus-tpl-close'></div> </div> <div class='com-name toe'>" + obj.SnapshotId + "</div> </div>";
        customDiskListContent.append(tempHtml);
      }
    }
  },
  revertSnapshotDisk: function(snapshotId) {
    var customDiskListContent, obj, tempHtml;
    if (!snapshotId) {
      return;
    }
    obj = global.snapshotInfoList[snapshotId];
    if (!obj) {
      return;
    }
    customDiskListContent = $('#customDiskListContent');
    tempHtml = "<div class='com-div custom-disk'> <div alt='' class='com-tpl com-disk need-tip com-disk-snapshot' data-toggle='tooltip' data-category='def-tpl' data-kind='disk' data-subtype='" + obj.SnapshotId + "' data-placement='right' title='' data-original-title='快照ID：" + obj.SnapshotId + "'> <div class='cus-tpl-close'></div> </div> <div class='com-name toe'>" + obj.SnapshotId + "</div> </div>";
    customDiskListContent.append(tempHtml);
  },
  delNotifyCallback: function(_data) {},
  showUserinfoClick: function() {
    $('#userTabBtn1').trigger('click');
    $('#UserinfoModal').modal('show');
  },
  checkExpansion: function() {
    var check, len;
    check = false;
    len = $('#expansionEcsList input[type=checkbox]:checked').length;
    $('#expansion_timeout_start').val('');
    $('#expansion_timeout_hou').val('');
    $('#expansion_timeout_min').val('');
    $('#monitorEcsDisk').val('');
    $('#expandEcsNum').val('');
    $('#expandEcsNumModalError').text('');
    if (len) {
      check = true;
      $('#expansionErr').text('');
    } else {
      $('#expansionErr').text('请先选择云服务器');
    }
    return check;
  },
  expansionNowClick: function() {
    if (domFunc.checkExpansion()) {
      $('#expansionType').val('now');
      $('#expansionSlb').val(global.selectObj.getId());
      $('#monitorRow').hide();
      $('#delayExpansionRow').hide();
      $('#expansionModalLabel').text('立即扩容');
      $('#expansionModal').modal('show');
    }
  },
  expansionDelayClick: function() {
    if (domFunc.checkExpansion()) {
      $('#expansionType').val('delay');
      $('#expansionSlb').val(global.selectObj.getId());
      $('#monitorRow').hide();
      $('#delayExpansionRow').show();
      $('#expansionModalLabel').text('预约扩容');
      $('#expansionModal').modal('show');
    }
  },
  expansionMonitorClick: function() {
    if (domFunc.checkExpansion()) {
      $('#expansionType').val('monitor');
      $('#expansionSlb').val(global.selectObj.getId());
      $('#monitorRow').show();
      $('#delayExpansionRow').hide();
      $('#expansionModalLabel').text('监控扩容');
      $('#expansionModal').modal('show');
    }
  },
  onExpansionConfirm: function() {
    var arr, com, comInfo, date, hour, i, minute, monitor, newcom, nodeid, num, postData, second, slbInfo, slbcom, slbid, time, type, _com, _i, _j, _k, _l, _len, _len1, _len2, _m, _n, _ref, _ref1, _ref2;
    type = $('#expansionType').val();
    slbid = $('#expansionSlb').val();
    slbcom = layer.find("#" + slbid)[0];
    slbInfo = $.toJSON(slbcom.data);
    switch (type) {
      case 'now':
        if (domFunc.checkExpansionConfirm(type)) {
          num = $('#expandEcsNum').val();
          arr = $('#expansionEcsList input[type=checkbox]:checked');
          for (_i = 0, _len = arr.length; _i < _len; _i++) {
            _com = arr[_i];
            nodeid = $(_com).data('id');
            com = layer.find("#" + nodeid)[0];
            for (i = _j = 1, _ref = Number(num); 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
              newcom = canFunc.comCopy(com.children[0]);
              canFunc.drawLine(newcom, slbcom, 'line' + tools.rand());
            }
          }
          $('#expansionModal').modal('hide');
        }
        break;
      case 'delay':
        if (domFunc.checkExpansionConfirm(type)) {
          date = $('#expansion_timeout_start').val();
          hour = $('#expansion_timeout_hou').val();
          minute = $('#expansion_timeout_min').val();
          second = 0;
          time = date + ' ' + hour + ':' + minute + ':' + second;
          num = $('#expandEcsNum').val();
          arr = $('#expansionEcsList input[type=checkbox]:checked');
          for (_k = 0, _len1 = arr.length; _k < _len1; _k++) {
            _com = arr[_k];
            nodeid = $(_com).data('id');
            com = layer.find("#" + nodeid)[0];
            comInfo = $.toJSON(com.data);
            for (i = _l = 1, _ref1 = Number(num); 1 <= _ref1 ? _l <= _ref1 : _l >= _ref1; i = 1 <= _ref1 ? ++_l : --_l) {
              postData = {
                expansionNum: num,
                expansionType: type,
                execDate: time,
                condition: '',
                comInfo: comInfo,
                slbInfo: slbInfo
              };
              $.post('/expansioncom/create', postData, function(e) {});
            }
          }
          $('#expansionModal').modal('hide');
        }
        break;
      case 'monitor':
        if (domFunc.checkExpansionConfirm(type)) {
          monitor = $('#monitorEcsDisk').val();
          num = $('#expandEcsNum').val();
          arr = $('#expansionEcsList input[type=checkbox]:checked');
          for (_m = 0, _len2 = arr.length; _m < _len2; _m++) {
            _com = arr[_m];
            nodeid = $(_com).data('id');
            com = layer.find("#" + nodeid)[0];
            comInfo = $.toJSON(com.data);
            for (i = _n = 1, _ref2 = Number(num); 1 <= _ref2 ? _n <= _ref2 : _n >= _ref2; i = 1 <= _ref2 ? ++_n : --_n) {
              postData = {
                expansionNum: num,
                expansionType: type,
                execDate: 0,
                condition: monitor,
                comInfo: comInfo,
                slbInfo: slbInfo
              };
              $.post('/expansioncom/create', postData, function(e) {});
            }
          }
          $('#expansionModal').modal('hide');
        }
    }
  },
  checkExpansionConfirm: function(type) {
    var date, hour, minute, monitor, num, second, time;
    num = $('#expandEcsNum').val();
    if (num) {
      if ((Number(num) < 0) || (isNaN(num))) {
        $('#expandEcsNumModalError').text('正确填写扩容数量');
        return false;
      }
    } else {
      $('#expandEcsNumModalError').text('正确填写扩容数量');
      return false;
    }
    if (type === 'delay') {
      date = $('#expansion_timeout_start').val();
      hour = $('#expansion_timeout_hou').val();
      minute = $('#expansion_timeout_min').val();
      second = 0;
      if (!(hour || minute || second) || !date || isNaN(hour) || isNaN(minute) || isNaN(second)) {
        $('#expandEcsNumModalError').text('正确选择预约时间');
        return false;
      }
      time = date + ' ' + hour + ':' + minute + ':' + second;
      if ((new Date(time)) < (new Date())) {
        $('#expandEcsNumModalError').text('预约时间不能早于当前时间');
        return false;
      }
    } else if (type === 'monitor') {
      monitor = $('#monitorEcsDisk').val();
      if (monitor) {
        if ((Number(monitor) < 0) || (isNaN(monitor))) {
          $('#expandEcsNumModalError').text('正确填写扩容条件');
          return false;
        }
      } else {
        $('#expandEcsNumModalError').text('正确填写扩容条件');
        return false;
      }
    }
    $('#expandEcsNumModalError').text('');
    return true;
  },
  onScriptListItemClick: function(e) {
    var obj, pos, sWidth, scriptOption, self;
    e.stopPropagation();
    e.cancelBubble = 1;
    self = $(this);
    pos = self.offset();
    obj = self.data('data');
    if (!obj.instanceid) {
      return;
    }
    sWidth = self.width();
    scriptOption = $('.script-option');
    scriptOption.hide();
    $('#script-option-check').text(obj.fileContent);
    scriptOption.css({
      left: pos.left - sWidth + 20,
      top: pos.top + 60
    }).show();
  },
  onBindMailClick: function() {
    var loginmail, postData;
    loginmail = $.cookie('loginMail');
    if (!loginmail) {
      $.notify({
        msg: "请先登录",
        type: 'danger'
      });
    }
    postData = {
      loginmail: loginmail
    };
    return tools.post('/user/bindmail/get', postData, domFunc.onBindMailModalShow);
  },
  onBindRamClick: function() {
    var loginmail;
    loginmail = $.cookie('loginMail');
    if (!loginmail) {
      $.notify({
        msg: "请先登录",
        type: 'danger'
      });
      return;
    }
    $('#userTabBtn5').trigger('click');
    $('#UserinfoModal').modal('show');
  },
  initBindRam: function() {
    if ($.cookie('isRam') === '1') {
      $('#cancelRamDiv').show();
      $('#postRamDiv').hide();
    } else {
      $('#cancelRamDiv').hide();
      $('#postRamDiv').show();
    }
  },
  onBindMailModalShow: function(_data) {
    var bindmailinput, bindmailinput1, changeOtherMailBtn, currentMsgMail, currentMsgMailText, json, mailUlr, nofityMailText, selfloginmail, sendBindMailed, sendBindMailedForm, sendBindMailprev, sendBindMsgMailArea;
    if (_data === 'err') {
      $.notify({
        msg: "请刷新重试",
        type: 'danger'
      });
      return;
    } else {
      json = $.evalJSON(_data);
      currentMsgMail = $('#currentMsgMail');
      sendBindMailprev = $('#sendBindMailprev');
      sendBindMailed = $('#sendBindMailed');
      bindmailinput = $('#bindmailinput');
      bindmailinput1 = $('#bindmailinput1');
      nofityMailText = $('#nofityMailText');
      sendBindMsgMailArea = $('#sendBindMsgMailArea');
      changeOtherMailBtn = $('#changeOtherMailBtn');
      currentMsgMailText = $('#currentMsgMailText');
      selfloginmail = $('#selfloginmail');
      sendBindMailedForm = $('#sendBindMailedForm');
      bindmailinput.val(json.msgmail);
      selfloginmail.text($.cookie('loginMail'));
      bindmailinput1.val($.cookie('loginMail'));
      if (json.mailverify === 1) {
        sendBindMailed.hide();
        sendBindMsgMailArea.hide();
        currentMsgMailText.text(json.msgmail);
        currentMsgMail.show();
        changeOtherMailBtn.show();
        sendBindMailprev.show();
      } else if (json.mailverify === 2) {
        sendBindMailprev.hide();
        nofityMailText.text(json.msgmail);
        mailUlr = 'http://mail.' + json.msgmail.replace(/^.*@/g, '');
        sendBindMailedForm.attr('action', mailUlr);
        sendBindMailed.show();
      } else {
        sendBindMailed.hide();
        currentMsgMail.hide();
        changeOtherMailBtn.hide();
        sendBindMsgMailArea.show();
        sendBindMailprev.show();
      }
    }
    $('#UserinfoModal .nav li').removeClass('active');
    $('#userTabBtn4').parent().addClass('active');
    $('#UserinfoModal .tab-pane').removeClass('active');
    $('#UserinfoModal #pane4').addClass('active');
    $('#UserinfoModal').modal('show');
  },
  onBindMailBtnClick: function() {
    var bindmailinput, bindmailinput1, bindmailinput2, loginmail, postData, type;
    loginmail = $.cookie('loginMail');
    bindmailinput1 = $('#bindmailinput1').val();
    bindmailinput2 = $('#bindmailinput2').val();
    if (!loginmail) {
      $.notify({
        msg: "请先登录",
        type: 'danger'
      });
      return;
    }
    type = $("input[name='bindmailoption']:checked").val();
    if (type === '1') {
      bindmailinput = bindmailinput1;
    } else if (type === '2') {
      if (!bindmailinput2) {
        $.notify({
          msg: "请先输入通知邮箱",
          type: 'danger'
        });
        return;
      }
      if (!/^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/.test(bindmailinput2)) {
        $.notify({
          msg: "邮箱格式不正确",
          type: 'danger'
        });
        return;
      }
      bindmailinput = bindmailinput2;
    }
    $('#bindmailinput').val(bindmailinput);
    postData = {
      loginmail: loginmail,
      bindmail: bindmailinput
    };
    tools.post('/user/mail/bind', postData, domFunc.onBindMailBtnCallback);
  },
  onBindMailBtnCallback: function(_data) {
    var bindmailinput, bindmailinput1, bindmailinput2, mailUlr, nofityMailText, type;
    type = $("input[name='bindmailoption']:checked").val();
    bindmailinput1 = $('#bindmailinput1').val();
    bindmailinput2 = $('#bindmailinput2').val();
    nofityMailText = $('#nofityMailText');
    switch (_data) {
      case '1':
        bindmailinput = $('#bindmailinput').val();
        nofityMailText.text(bindmailinput);
        mailUlr = 'http://mail.' + bindmailinput.replace(/^.*@/g, '');
        $('#sendBindMailedForm').attr('action', mailUlr);
        $('#sendBindMailprev').hide();
        $('#sendBindMailed').show();
        return;
      default:
        $.notify({
          msg: "绑定失败，请刷新后重试",
          type: 'danger'
        });
        return;
    }
  },
  nofityMailResultBtnClick: function() {
    var sendBindMailedForm;
    sendBindMailedForm = $('#sendBindMailedForm');
    if (sendBindMailedForm.attr('action')) {
      sendBindMailedForm.submit();
      $('#UserinfoModal').modal('hide');
    }
  },
  reSendmsgMailBtnClick: function() {
    var postData;
    postData = {
      loginmail: $.cookie('loginMail'),
      bindmail: $('#bindmailinput').val()
    };
    tools.post('/user/mail/bind', postData);
    $('#UserinfoModal').modal('hide');
    $.notify({
      msg: "发送成功，请前往您的邮箱查看",
      type: 'success'
    });
  },
  changeSendmsgMailBtnClick: function() {
    var sendBindMailed;
    sendBindMailed = $('#sendBindMailed');
    sendBindMailed.hide();
    domFunc.onChangeOtherMailBtnClick();
  },
  onBindMailOptionChecked: function(_data) {
    var bindmailinput2, val;
    bindmailinput2 = $('#bindmailinput2');
    val = $(this).val();
    if (val === '1') {
      bindmailinput2.attr('disabled', 'disabled');
    } else {
      bindmailinput2.removeAttr('disabled');
    }
  },
  showLoginfoClick: function() {
    $('#showLog').trigger('click');
    $('#UserinfoModal').modal('show');
  },
  changeLineInfo: function() {
    var desc, lineId, name;
    name = $('#line-name').val();
    desc = $('#line-desc').val();
    lineId = $('#line-id').val();
    data.line[lineId].name = name;
    data.line[lineId].desc = desc;
    $('#tipsModal').modal('hide');
  },
  onClickDialogLineTips: function(e) {
    e.stopPropagation();
  },
  onClickPreviewTabs: function(e) {
    if ($(this).attr('id') === 'preview-task-tab') {
      return domFunc.onSynchroClick();
    } else if ($(this).attr('id') === 'tab-preview-list') {
      $('#export-xls,#task-confirm-btn,#download-pic-link').hide();
      return $('#export-xls').show();
    } else if ($(this).attr('id') === 'tab-preview-pic') {
      $('#export-xls,#task-confirm-btn,#download-pic-link').hide();
      return $('#download-pic-link').show();
    } else {
      $('#export-xls,#task-confirm-btn,#download-pic-link').hide();
      $('#task-confirm-btn').hide();
      return $('#preview .loading').hide();
    }
  },
  onChangeOtherMailBtnClick: function() {
    var changeOtherMailBtn, currentMsgMail, sendBindMailprev, sendBindMsgMailArea;
    currentMsgMail = $('#currentMsgMail');
    sendBindMailprev = $('#sendBindMailprev');
    sendBindMsgMailArea = $('#sendBindMsgMailArea');
    changeOtherMailBtn = $('#changeOtherMailBtn');
    changeOtherMailBtn.hide();
    currentMsgMail.hide();
    sendBindMailprev.show();
    sendBindMsgMailArea.show();
  },
  initStructListModel: function() {
    var mailString, postData;
    mailString = $.cookie('loginMail' || '');
    postData = {
      mail: encodeURIComponent(mailString)
    };
    $.post('/struct/list', postData, domFunc.initStructListModelCallback);
  },
  initStructListModelCallback: function(_data) {
    var created, description, html, len, name, placement, url, _i, _len, _structData, _structDataIndex;
    len = _data.length;
    html = '';
    for (_structDataIndex = _i = 0, _len = _data.length; _i < _len; _structDataIndex = ++_i) {
      _structData = _data[_structDataIndex];
      url = decodeURIComponent(_structData.preurl);
      name = decodeURIComponent(_structData.name);
      description = decodeURIComponent(_structData.description);
      created = decodeURIComponent(_structData.created);
      placement = 'right';
      if ((_structDataIndex + 1) % 3 === 0) {
        placement = 'left';
      }
      html += "<li class='structListCom need-tip' data-toggle='tooltip' data-category='def-tpl' data-placement='" + placement + "' data-original-title='" + description + "' data-structid='" + _structData._id + "'><a href='javascript:void(0)'><img width='208px' src='" + url + "' style='border-radius:4px;'/></a><div class='font12 structListInfo structListName' title='" + name + "'>" + (domFunc.showOverflowText(name, 16)) + "</div><div class='font12 structListInfo structListDate'>" + (tools.formateDate(new Date(created), '-')) + "</div></li>";
    }
    $('#structListContainer').html(html);
  },
  structListModelBtnClick: function() {
    $('#structListModel').modal('show');
  },
  structListModelShow: function() {
    $('.structListCom').removeClass('selectStruct');
    $('#selectStructModalError').text('');
  },
  selectStructClick: function() {
    $('#selectStructModalError').text('');
    $(this).siblings().removeClass('selectStruct');
    $(this).toggleClass('selectStruct');
  },
  selectStructMouseOver: function() {
    $(this).tooltip('show');
  },
  selectStructBtnClick: function() {
    if (!tools.checkLogin(1)) {
      $('#selectStructModalError').text('缓存失效,请先登录或刷新后重试');
      return;
    }
    if (!$('#structListModel .selectStruct').length) {
      $('#selectStructModalError').text('选择架构后重试');
      return;
    }
    bootbox.dialog({
      message: '是否保存架构？若不保存，现有架构将会丢失。',
      buttons: {
        success: {
          label: '保存',
          className: 'btn-success',
          callback: function() {
            var postData, structid;
            domFunc.saveStruct();
            structid = $('#structListModel .selectStruct').data('structid');
            postData = {
              mail: $.cookie('loginMail'),
              _id: structid
            };
            $.cookie('archiid', structid);
            tools.post('/struct/get', postData, canFunc.setStage);
          }
        },
        danger: {
          label: '不保存',
          className: 'btn-danger',
          callback: function() {
            var postData, structid;
            structid = $('#structListModel .selectStruct').data('structid');
            postData = {
              mail: $.cookie('loginMail'),
              _id: structid
            };
            $.cookie('archiid', structid);
            tools.post('/struct/get', postData, canFunc.setStage);
          }
        }
      }
    });
    $('#structListModel').modal('hide');
    global.historys = [];
  },
  delStructBtnClick: function() {
    if (!tools.checkLogin(1)) {
      $('#selectStructModalError').text('缓存失效,请先登录或刷新后重试');
      return;
    }
    if (!$('.selectStruct').length) {
      $('#selectStructModalError').text('选择架构后重试');
      return;
    }
    bootbox.dialog({
      message: '确定删除该场景?',
      buttons: {
        success: {
          label: '确定',
          className: 'btn-danger',
          callback: function() {
            var postData;
            postData = {
              _id: $('.selectStruct').data('structid')
            };
            return tools.post('/struct/del', postData, domFunc.initStructListModel);
          }
        },
        cancel: {
          label: '取消',
          className: 'btn-default',
          callback: function() {}
        }
      }
    });
  },
  onInputKeydown: function(e) {
    if (e.keyCode === 13) {
      $(document).trigger('mousedown');
      if (e.target.id === 'txt_disk') {
        $('#diskModal').trigger('click');
      }
    }
  },
  onFullscreenBtnClick: function() {
    var el, rfs;
    el = document.documentElement;
    rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen;
    if (document.webkitIsFullScreen) {
      document.webkitCancelFullScreen();
    } else {
      rfs.call(el);
    }
  },
  onCanvasExportBtnClick: function() {
    $('#canvasExportBtn').toggleClass('eye-close');
    $('#previewBtn').trigger('mousedown');
    $('#mypreviewModalLabel').text('导出架构图');
    $('#preview .nav').hide();
    $('#export-xls,#task-confirm-btn').hide();
    $('#download-pic-link').show();
    setTimeout(function() {
      $('#previewBtn').trigger('click');
      $('#preview .modal-dialog').css({
        'width': '800px'
      });
    }, 100);
  },
  onPreviewHide: function() {
    $('#canvasExportBtn').removeClass('eye-close');
  },
  onExportHtmlBtnClick: function() {
    console.log(123123);
  },
  btnRamAccessKeyClick: function() {
    var accessKeyId, accessKeySec, postData;
    accessKeyId = $('#ram-accessKeyId').val();
    accessKeySec = $('#ram-accessKeySec').val();
    if ((accessKeyId === '') || (accessKeySec === '')) {
      $('#ram-access-error').text('密钥信息填写完整');
    } else if ((accessKeyId.length !== 16) || (accessKeySec.length !== 30)) {
      $('#ram-access-error').text('密钥信息填写正确');
    } else {
      postData = {
        accessKeyId: accessKeyId,
        accessKeySec: accessKeySec
      };
      tools.post('/api/ramauth', postData, domFunc.btnRamAccessKeyClickCallBack);
    }
  },
  btnRamAccessKeyClickCallBack: function(_data) {
    var jsonData, postData;
    jsonData = $.evalJSON(_data);
    if (jsonData.code === 1) {
      $.cookie('isRam', '1');
      domFunc.initBindRam();
      postData = {
        mail: $.cookie('loginMail'),
        ram: 1
      };
      $.post('/user/updateRam', postData);
      $('#ramModal').modal('hide');
      $.notify({
        msg: '授权成功',
        type: 'success'
      });
    } else {
      $('#ram-access-error').text('授权失败,密钥信息填写正确');
    }
  },
  cancelRamClick: function() {
    $('#myramModalLabel').text('取消授权');
    $('#btn-ram-accessKey').hide();
    $('#btn-cancel-ram-accessKey').show();
    $('#UserinfoModal').modal('hide');
    $('#ramModal').modal('show');
  },
  btnCancelRamAccessKeyClick: function() {
    var accessKeyId, accessKeySec, postData;
    accessKeyId = $('#ram-accessKeyId').val();
    accessKeySec = $('#ram-accessKeySec').val();
    if ((accessKeyId === '') || (accessKeySec === '')) {
      $('#ram-access-error').text('密钥信息填写完整');
    } else if ((accessKeyId.length !== 16) || (accessKeySec.length !== 30)) {
      $('#ram-access-error').text('密钥信息填写正确');
    } else {
      postData = {
        accessKeyId: accessKeyId,
        accessKeySec: accessKeySec
      };
      tools.post('/api/ramcancel', postData, domFunc.cancelRamClickCallBack);
    }
  },
  cancelRamClickCallBack: function(_rs) {
    var postData, rs;
    rs = $.evalJSON(_rs);
    console.log(rs);
    if (+rs.code === 1) {
      postData = {
        mail: $.cookie('loginMail'),
        ram: 0
      };
      tools.post('/user/updateRam', postData, function(_data) {
        if (_data === '1') {
          $.notify({
            msg: '取消授权成功',
            type: 'success'
          });
          $.removeCookie('isRam');
          $('#ramModal').modal('hide');
        }
      });
    } else {
      $.notify({
        msg: '取消授权失败,刷新后重试',
        type: 'warning'
      });
    }
  },
  postRamClick: function() {
    $('#myramModalLabel').text('授权');
    $('#btn-cancel-ram-accessKey').hide();
    $('#btn-ram-accessKey').show();
    $('#UserinfoModal').modal('hide');
    $('#ramModal').modal('show');
  },
  ramModalShow: function() {
    var regionId;
    $('#ram-accessKeyId').val('');
    $('#ram-accessKeySec').val('');
    $('#ram-access-error').text('');
    regionId = $.cookie('regionId') ? $.cookie('regionId') : 'cn-hangzhou';
    $("input[name=ram-regionCheck][value=" + regionId + "]").iCheck('check');
  },
  comBlur: function() {
    $('.diskinput, #ecs_netSpeed_amount, #ecs-buy-amount, #ecs_netSpeed_amount-bw, #ecs_netSpeed_amount-type2-bw, #rds-storage-input, #slb-ecs-content input').trigger('blur');
  }
};
