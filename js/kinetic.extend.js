// Generated by CoffeeScript 1.7.1
var kk;

kk = Kinetic;

(function () {
    var _batchDraw;
    _batchDraw = kk.Layer.prototype.batchDraw;
    kk.Layer.prototype.batchDraw = function () {
        if (global.canBatchDraw) {
            return _batchDraw.call(this);
        }
    };
})();

kk.Layer.prototype.getAllLayerCorners = function () {
    return this.find('.layercorner');
};

kk.Layer.prototype.setAllCornersHidden = function (flag) {
    this.setAllLayerCornersHidden(flag);
    this.setAllComCornersHidden(flag);
};

kk.Layer.prototype.setAllLayerCornersHidden = function (flag) {
    var allLayerCorners, allLayerRects, allLayerTitleShapes, allLayerWedges, allLayerbackRects;
    allLayerCorners = this.find('.layercorner');
    allLayerRects = this.find('.layerrect');
    allLayerbackRects = this.find('.layerbackground');
    allLayerTitleShapes = this.find('.layertitleshape');
    allLayerWedges = this.find('.layerwedge');
    if (!flag) {
        allLayerCorners.each(function (shape) {
            shape.hide();
        });
    }
    allLayerRects.each(function (item) {
        item.setStroke(def.color.greenBlue);
    });
    allLayerTitleShapes.each(function (item) {
        item.setStroke(def.color.lightGray);
    });
    allLayerWedges.each(function (item) {
        item.setFill(def.color.lightGray);
    });
    allLayerbackRects.each(function (item) {
        return item.setOpacity(0);
    });
    this.batchDraw();
};

kk.Layer.prototype.setAllComCornersHidden = function (exclude) {
    var allComBgs, allComCorners, allIsdrop;
    allComCorners = this.find('.comcorner');
    allComCorners.each(function (shape) {
        if (exclude && shape.parent.tname === exclude.tname) {
            return;
        }
        shape.hide();
    });
    allComBgs = this.find('.combg');
    allComBgs.each(function (shape) {
        if (exclude && shape.parent.tname === exclude.tname) {
            return;
        }
        shape.hide();
    });
    allIsdrop = this.find('.isdrop');
    allIsdrop.each(function (shape) {
        if (exclude && shape.parent.tname === exclude.tname) {
            return;
        }
        shape.parent.hideSelectRect();
    });
    this.batchDraw();
};

kk.Group.prototype.showMyCorners = function () {
    var k, shape, _ref;
    _ref = this.corners;
    for (k in _ref) {
        shape = _ref[k];
        shape.show();
    }
    if (this.getCategory() === 'component') {
        this.elements.backGroup.show();
    } else {
        this.setColor('gray');
    }
    global.selectObj = this;
    layer.batchDraw();
};

kk.Group.prototype.setColor = function (color) {
    var allLayerRects, allLayerTitleShapes, allLayerWedges, _color;
    _color = color || 'gray';
    allLayerRects = this.find('.layerrect');
    allLayerTitleShapes = this.find('.layertitleshape');
    allLayerWedges = this.find('.layerwedge');
    allLayerRects.each(function (item) {
        item.setStroke(def.color[_color]);
    });
    allLayerTitleShapes.each(function (item) {
        item.setStroke(def.color[_color]);
    });
    allLayerWedges.each(function (item) {
        item.setFill(def.color[_color]);
    });
    if (_color === 'orange1') {
        _color = 'orange2';
    } else if (_color === 'gray') {
        _color = 'gray1';
    }
    this.rects.backRect.setFill(def.color[_color]);
    return this.rects.backRect.setOpacity(.3);
};

Kinetic.Group.prototype.getInstanceId = function () {
    if (this.data.openList.isOpen) {
        return this.data.openList.instanceId;
    } else {
        return null;
    }
};

Kinetic.Group.prototype.getCategory = function () {
    return this.category || '';
};

Kinetic.Group.prototype.setCategory = function (category) {
    this.attrs.category = category;
};

Kinetic.Group.prototype.setChargeType = function (type) {
    var color;
    if (this.kind !== 'ecs') {
        return;
    }
    color = type === 1 ? def.color.yearColor : def.color.amountColor;
    this.texts.titleText.setFill(color);
    this.data.chargeType = type;
};

Kinetic.Group.prototype.getKind = function () {
    return this.kind || '';
};

Kinetic.Group.prototype.getDashRect = function () {
    return this.rects.dashRect;
};

Kinetic.Group.prototype.getRealSize = function () {
    var _size;
    switch (this.getCategory()) {
        case 'layer':
            return this.rects.dashRect.getSize();
        case 'component':
            _size = {
                width: def.component.outerWidth,
                height: def.component.outerHeight
            };
            return _size;
        default:
            return this.getSize();
    }
};

Kinetic.Group.prototype.setRealSize = function (width, height) {
    var _leftBottom, _rect, _rightBottom, _rightTop;
    if (this.getCategory() === 'layer') {
        _rect = this.getDashRect();
        _rightTop = this.corners.rightTop;
        _leftBottom = this.corners.leftBottom;
        _rightBottom = this.corners.rightBottom;
        _rect.setSize(width, height);
        this.rects.backRect.setSize(width, height);
        _rightTop.setPosition(width, 0);
        _leftBottom.setPosition(0, height);
        _rightBottom.setPosition(width, height);
        this.data.width = width;
        return this.data.height = height;
    }
};

Kinetic.Group.prototype.getInnerSize = function () {
    var _size;
    switch (this.getCategory()) {
        case 'layer':
            return this.rects.dashRect.getSize();
        case 'component':
            if (this.getKind() === 'slb') {
                _size = {
                    width: def.component.w,
                    height: def.component.h - 14
                };
            } else {
                _size = {
                    width: def.component.w,
                    height: def.component.h
                };
            }
            return _size;
        default:
            return this.getSize();
    }
};

kk.Group.prototype.getData = function (key) {
    return this.data[key];
};

kk.Group.prototype.setData = function (key, value) {
    var k, v, _results;
    if (typeof key === 'object') {
        _results = [];
        for (k in key) {
            v = key[k];
            _results.push(this.data[k] = Object.clone(v));
        }
        return _results;
    } else {
        return this.data[key] = value;
    }
};

kk.Group.prototype.removeData = function () {
    return delete data[this.kind][this.data.id];
};

kk.Group.prototype.getSubCom = function () {
    var subCom, tempArr, _i, _len, _ref;
    tempArr = [];
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subCom = _ref[_i];
        if (subCom.category === 'component') {
            tempArr.push(subCom);
        }
    }
    return tempArr;
};

kk.Group.prototype.getSubComID = function () {
    var subCom, tempArr, _i, _len, _ref;
    tempArr = [];
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subCom = _ref[_i];
        if (subCom.category === 'component') {
            tempArr.push(subCom.getData('id'));
        }
    }
    return tempArr;
};

kk.Group.prototype.getSubComData = function () {
    var subCom, tempArr, _i, _len, _ref;
    tempArr = [];
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subCom = _ref[_i];
        if (subCom.category === 'component') {
            tempArr.push(subCom.data);
        }
    }
    return tempArr;
};

kk.Group.prototype.refreshChild = function () {
    return this.data.children = this.getSubComID();
};

kk.Group.prototype.cMoveTo = function (targetObj) {
    var oldParent;
    oldParent = this.getParent();
    this.moveTo(targetObj);
    if (targetObj.category === 'layer') {
        targetObj.refreshChild();
    }
    if (oldParent && oldParent.category === 'layer') {
        return oldParent.refreshChild();
    }
};

kk.Group.prototype.setAbsPos = function (_x, _y, _flag) {
    var realPos;
    this.setAbsolutePosition({
        x: _x,
        y: _y
    });
    if (!_flag) {
        realPos = tools.convertAbsToRelPos({
            x: _x,
            y: _y
        }, 1);
        this.data.x = realPos.x;
        return this.data.y = realPos.y;
    }
};

kk.Group.prototype.recordChildPos = function () {
    var child, childPos, myPos, _i, _len, _ref, _results;
    myPos = tools.convertAbsToRelPos(this);
    this.data.x = myPos.x;
    this.data.y = myPos.y;
    _ref = this.getSubCom();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        childPos = tools.convertAbsToRelPos(child);
        child.data.x = childPos.x;
        _results.push(child.data.y = childPos.y);
    }
    return _results;
};

kk.Group.prototype.setTitleText = function (text) {
    var _titleLen;
    this.setName(text);
    this.data.name = text;
    if (this === global.selectObj) {
        _titleLen = global.titleLenSelect;
    } else {
        _titleLen = global.titleLenNormal;
    }
    return this.texts.titleText.setText("" + (tools.showOverflowText(text, _titleLen)));
};

kk.Group.prototype.setRemark = function (text) {
    return this.data.remark = text;
};

kk.Group.prototype.changeIco = function (flag, kind) {
    var tempImage;
    if (!flag) {
        return;
    }
    kind = kind || 'ecs';
    tempImage = new Image();
    if (kind === 'ecs') {
        if (flag === 1) {
            tempImage.src = resources.loadImages['ecsIcon'];
            this.elements.root.setX(0);
        } else {
            tempImage.src = resources.loadImages['ecsesIcon'];
            this.elements.root.setX(5);
        }
    } else if (kind === 'diy') {
        tempImage.src = resources.loadImages["diy" + flag + "Icon"];
    }
    return this.images.main.setImage(tempImage);
};

kk.Group.prototype.setAmount = function (num) {
    this.data.amount = num;
    if (this.kind === 'ecs') {
        if (num > 1) {
            this.changeIco(2);
            this.texts.countText.setText(num);
            return this.elements.amount.setVisible(1);
        } else {
            this.changeIco(1);
            this.texts.countText.setText(1);
            return this.elements.amount.setVisible(0);
        }
    }
};

kk.Group.prototype.setCpu = function (num) {
    var cpuStr;
    this.data.cpu = num;
    cpuStr = tools.getCpu(num);
    this.texts.cpuText.setText(cpuStr);
    if (num === 1) {
        return this.texts.cpuText.setX(19);
    } else if (num === 2) {
        return this.texts.cpuText.setX(22);
    } else if (num === 16) {
        return this.texts.cpuText.setX(20);
    } else {
        return this.texts.cpuText.setX(23);
    }
};

kk.Group.prototype.setEcsMemory = function (num) {
    var memoryStr;
    this.data.memory = num;
    memoryStr = tools.getAutoUnit(num);
    return this.texts.memoryText.setText(memoryStr);
};

kk.Group.prototype.setOsVal = function (osStr, isMapped, info) {
    var isCustom, osBit, osType, tempImage;
    isCustom = info || global.imageInfoList[osStr] ? 1 : 0;
    osBit = isCustom ? global.imageInfoList[osStr].osBit : tools.getOsBit(osStr, isMapped);
    osType = isCustom ? global.imageInfoList[osStr].osType : tools.getOsType(osStr);
    tempImage = new Image();
    tempImage.src = resources.loadImages["" + osType + "Icon"];
    this.images.os.setImage(tempImage);
    this.data.osVal = osStr;
    if (!osStr) {
        tempImage = global.images["comNoBit"];
    } else {
        tempImage = isCustom ? global.images["com" + osBit + "bitc"] : global.images["com" + osBit + "bits"];
    }
    return this.images.bit.setImage(tempImage);
};

kk.Group.prototype.setBanwidth = function (num) {
    this.texts.bandText.setText("" + num + "M");
    return this.data.bandWidth = num;
};

kk.Group.prototype.setDiskNum = function () {
    return this.texts.diskText.setText(this.data.disks.length);
};

kk.Group.prototype.setDbType = function (type) {
    this.data.dbType = type;
    return this.texts.dbTypeText.setText(def.dbName[type]);
};

kk.Group.prototype.setDbMemory = function (num) {
    this.data.memory = parseInt(num);
    num = tools.getDbMemory(num);
    return this.texts.memoryText.setText(num);
};

kk.Group.prototype.cloneData = function (params) {
    var _params;
    _params = Object.clone(params, 1);
    if (_params.id) {
        delete _params.id;
    }
    if (_params.name) {
        delete _params.name;
    }
    if (_params.tname) {
        delete _params.tname;
    }
    if (_params.remark) {
        delete _params.remark;
    }
    _params = $.extend({}, this.data, _params);
    this.setData(_params);
    switch (_params.kind) {
        case 'ecs':
            this.setOsVal(_params.osVal, tools.isMapped(this.data));
            this.setCpu(_params.cpu);
            this.setEcsMemory(_params.memory);
            this.setAmount(_params.amount);
            this.setBanwidth(_params.bandWidth);
            this.setChargeType(_params.chargeType);
            this.setDiskNum();
            break;
        case 'rds':
            this.setDbType(_params.dbType);
            this.setDbMemory(_params.memory);
    }
};

kk.Group.prototype.setStatusStyle = function (hostSatus) {
    var tempImage, _i, _len, _n, _ref;
    tempImage = new Image();
    switch (hostSatus) {
        case "Unbound":
            tempImage.src = resources.loadImages["comUnbound"];
            break;
        case "Stopped":
            tempImage.src = resources.loadImages["comStopped"];
            break;
        case "Starting":
            tempImage.src = resources.loadImages["comStarting"];
            break;
        case "Running":
            tempImage.src = resources.loadImages["comRunning"];
            break;
        case "Stopping":
            tempImage.src = resources.loadImages["comStopping"];
            break;
        case "Deleted":
            break;
        default:
            tempImage.src = resources.loadImages["comStarting"];
    }
    this.images.status.setImage(tempImage);
    if (this.kind === 'ecs') {
        _ref = this.data.openLists;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _n = _ref[_i];
            _n.isOpen = hostSatus === 'Unbound' ? false : true;
            _n.status = hostSatus;
        }
        this.data.status = hostSatus;
    }
    this.data.status = hostSatus;
    this.data.openList.isOpen = hostSatus === 'Unbound' ? false : true;
    this.data.openList.status = hostSatus;
    layer.batchDraw();
};

kk.Group.prototype.getInstanceIds = function () {
    return Object.keys(this.data.maps);
};

kk.Group.prototype.isOpen = function () {
    if (this.kind === 'ecs') {
        if (Object.keys(this.data.maps).length) {
            return 1;
        } else {
            return 0;
        }
    } else {
        return this.data.openList.isOpen;
    }
};

kk.Group.prototype.peelOff = function (instanceId) {
    var absPos, currentObj, isOverBorder, isOverLayer, myParent, newComObj, newParam, posParams, size;
    if (!instanceId) {
        return;
    }
    currentObj = this.data.openLists.find({
        instanceId: instanceId
    });
    console.log('currentObj : ', currentObj);
    if (!currentObj) {
        return;
    }
    this.setAmount(this.data.amount - 1);
    myParent = this.getParent();
    size = myParent.getRealSize();
    newParam = {
        name: currentObj.instanceName,
        kind: this.data.kind,
        osVal: this.data.osVal,
        cpu: this.data.cpu,
        memory: this.data.memory,
        amount: 1,
        bandWidth: this.data.bandWidth,
        chargeType: this.data.chargeType
    };
    newComObj = new comFactory(newParam);
    newComObj.cloneData(newParam);
    newComObj.cMoveTo(myParent);
    this.data.openLists.remove(currentObj);
    delete this.data.maps[currentObj.instanceId];
    newComObj.data.disks = currentObj.disks;
    newComObj.data.openList = currentObj;
    newComObj.data.openLists = new Array(currentObj);
    newComObj.data.maps[instanceId] = global.selectComObjList[instanceId];
    newComObj.setDiskNum();
    if (+this.data.amount === 1) {
        this.data.openList = this.data.openLists[0];
        this.data.name = this.data.openLists[0].instanceName;
        this.setName(this.data.openLists[0].instanceName);
    }
    posParams = {
        x: this.data.x + 15,
        y: this.data.y,
        width: 100,
        height: 100
    };
    isOverLayer = impact.comIsOverLayer(posParams, 1);
    isOverBorder = impact.comIsOverBorder(posParams, 1);
    if (!isOverLayer.isOver && isOverBorder.isOver) {
        absPos = tools.convertRelToAbsPos({
            x: myParent.data.x + 15,
            y: myParent.data.y + 15
        });
    } else {
        absPos = tools.convertRelToAbsPos(posParams);
    }
    newComObj.setAbsPos(absPos.x, absPos.y);
    newComObj.setStatusStyle(newComObj.data.openList.status);
    $(document).trigger('mousedown');
    this.showMyCorners();
    layer.batchDraw();
};
