// Generated by CoffeeScript 1.7.1
window.canFunc = {
    fixBackLayer: function () {
        var pos, posSalt;
        pos = stage.getPosition();
        global.stagePosition = pos;
        posSalt = {
            x: pos.x % def.gridMin,
            y: pos.y % def.gridMin
        };
        backLayer.setPosition(-pos.x - def.gridMin + posSalt.x, -pos.y - def.gridMin + posSalt.y);
    },
    fixMaskBackLayer: function () {
        var e, offsetPos, _c, _cCom, _cPos, _cindex, _i, _lPos, _len, _ref;
        try {
            maskBackLayer.setAbsolutePosition(0, 0);
            _ref = maskBackLayer.children;
            for (_cindex = _i = 0, _len = _ref.length; _i < _len; _cindex = ++_i) {
                _c = _ref[_cindex];
                if (_c.nodeType === 'Group') {
                    offsetPos = stage.getPosition();
                    _cCom = layer.find("#" + _c.attrs.originId)[0];
                    _cPos = _cCom.getPosition();
                    _lPos = _cCom.getParent().getPosition();
                    _c.setAbsolutePosition(_cPos.x + _lPos.x + offsetPos.x, _cPos.y + _lPos.y + offsetPos.y);
                }
            }
        } catch (_error) {
            e = _error;
        }
    },
    reDrawBackLayer: function () {
        canFunc.fixBackLayer();
        canFunc.fixMaskBackLayer();
        navImg.init();
        stage.batchDraw();
    },
    onDragStageStart: function () {
        domFunc.onRightArrowHide();
    },
    onDragStageEnd: function () {
        canFunc.reDrawBackLayer();
        if (global.isShowComTip) {
            canFunc.showAllComTipInfo();
        }

        canFunc.showAllLineTipInfo();
    },
    onStageMouseDown: function (e) {
        domFunc.setStructName.call($('#structNameInput'));
        if (e.targetNode && (e.targetNode.getId() === 'backGridImage')) {
            tools.setCursor('-webkit-grabbing');
            domFunc.onLayerSaveRemark();
            global.isLining = 0;
            //canFunc.lineBlur();
        }
        canFunc.hideDialog(e);
        canFunc.hideScriptPopover(e);
        canFunc.hideDiskPopover(e);
        domFunc.onBoardClick();
    },
    onStageClick: function (e) {
        domFunc.comBlur();
        if (e.targetNode && (e.targetNode.getId() === 'backGridImage')) {
            domFunc.onLayerSaveRemark();
            canFunc.selectNode();
            domFunc.onRightArrowHide();
            navImg.init();
            if (global.isShowComTip) {
                canFunc.showAllComTipInfo();
            }

            canFunc.showAllLineTipInfo();
        }
    },
    onStageMouseMove: function (e) {
        canFunc.mouseMoveLine(e);
        canFunc.onLayerResizeMove(e);
    },
    onStageMouseUp: function (e) {
        tools.setCursor('-webkit-grab');
        stage.setDraggable(true);
        if (global.isDrag) {
            canFunc.onComDragToStageDrop(e);
        } else if (global.isLining) {
            canFunc.onLineHitObj(e);
        }
        canFunc.onLayerResizeEnd(e);
        global.lineStartObj = null;
    },
    onStageMouseEnter: function (e) {
        tools.setCursor('-webkit-grab');
    },
    setStageScale: function (scale) {
        scale = parseFloat(scale);
        global.stageScale = scale.round(2);
        global.comCenter = def.component.center * global.stageScale;
        global.resizeOffset = def.layer.resizeOffset * global.stageScale;
        layer.setScale(global.stageScale);
        backLayer.setScale(global.stageScale);
        canvas.redrawBackgrid();
        layer.batchDraw();
        return domFunc.setStageScaleText("" + (global.stageScale * 100) + "%");
    },
    onCanvasPlusClick: function () {
        if (global.stageScale < 1) {
            canFunc.setStageScale(global.stageScale + 0.1);
        }
    },
    onCanvasMinusClick: function () {
        if (global.stageScale > 0.5) {
            canFunc.setStageScale(global.stageScale - 0.1);
        }
    },
    onCanvasRevertClick: function () {
        canFunc.setStageScale(1);
    },
    onComDragToStageMove: function (e) {
        var innerOverLayer, isOverCom, newPos, params;
        if (!global.isDrag || global.createType === 'layer') {
            return;
        }
        if (global.createSubType !== 'ecs' && global.createType !== 'os' && global.createType !== 'disk') {
            return;
        }
        params = tools.convertPagePos(e, 'mousemove', global.createType);
        params.width = def.component.outerWidth;
        params.height = def.component.outerHeight;
        newPos = tools.reCalculatePos(params);
        params = $.extend({}, params, newPos);
        layer.setAllCornersHidden();
        isOverCom = impact.comIsOverInnerCom(params, 1);
        if (isOverCom.isOver) {
            if (isOverCom.overObj.kind === 'ecs') {
                isOverCom.overObj.showSelectRect();
            }
        } else {
            innerOverLayer = impact.comIsOverLayer(params, 1, 1);
            if (innerOverLayer.isOver) {
                tools.setLayerMask(innerOverLayer.overObj, 'orange1');
            }
        }
    },
    onComDragToStageDrop: function (e) {
        var newPos, params;
        layer.setAllLayerCornersHidden();
        params = tools.convertPagePos(e, 'mouseup', global.createType);
        newPos = tools.reCalculatePos(params);
        params = $.extend({}, params, newPos);
        params.kind = global.createSubType;
        if (params.x < 0 || params.y < 0) {
            return;
        }
        if (global.createCategory === 'def-tpl') {
            canFunc.crateComBydefaultTpl(params);
        } else if (global.createCategory === 'cus-tpl') {
            canFunc.crateComByCustom(params);
        }
        navImg.init();
        return layer.batchDraw();
    },
    crateComBydefaultTpl: function (params, flag) {
        var currDiskAllSize, diskId, diskIndex, diskInfo, diskLength, diskSize, diskType, info, innerOverLayer, isDisk, isHaveEloud, isHaveEphemeral, isHaveSnapshot, isLinux, isOverBorder, isOverCom, isOverLayer, newComObj, noSnapshot, osParams, osStr, osType, self, snapshotId, tempCount, tempDisk, _diskSize;
        if (global.createType === 'layer') {
            params.width = def.layer.width;
            params.height = def.layer.height;
            innerOverLayer = impact.layerIsOverLayer(params, 1);
            if (innerOverLayer.isOver) {
                $.notify({
                    msg: "层不可重叠",
                    type: 'danger'
                });
                return;
            }
        } else if (global.createType === 'os') {
            osParams = Object.clone(params);
            osParams.width = def.osTpl.width;
            osParams.height = def.osTpl.height;
            isOverCom = impact.comIsOverInnerCom(osParams, 1);
            if (!isOverCom.isOver || isOverCom.overObj.kind !== 'ecs') {
                $.notify({
                    msg: "系统镜像只能拖放到 ECS 组件上",
                    type: 'warning'
                });
            } else {
                self = isOverCom.overObj;
                global.selectObj = self;
                if (Object.size(self.data.maps) > 0) {
                    $.notify({
                        msg: "已关联组件不能更改镜像",
                        type: 'warning'
                    });
                    return;
                }
                info = Object.clone(global.createComTpl.data('info'), 1);
                osStr = tools.getOsVal(params.kind) || params.kind;
                osType = tools.getOsType(osStr) || global.imageInfoList[params.kind].osType;
                if (osType === 'windows' || (global.imageInfoList[params.kind] && global.imageInfoList[params.kind].osType === 'windows')) {
                    if (self.data.memory === 512) {
                        $.notify({
                            msg: "windows 系统最少需要 1G 的内存，请先调整",
                            type: 'warning'
                        });
                        domFunc.showRemarkWithoutSaveHistory(self);
                        return;
                    }
                    isLinux = false;
                } else {
                    isLinux = true;
                }
                layer.setAllComCornersHidden(0);
                self.showMyCorners();
                canFunc.blinkNode(self);
                setTimeout(function () {
                    self.setOsVal(osStr, tools.isMapped(self.data), info);
                    domFunc.showRemarkWithoutSaveHistory(self);
                    return canFunc.saveHistory();
                }, 500);
                canFunc.addResetEcs(self);
                if (self.data.disks.length < 1) {
                    self.data.disks.push(new EcsDisk(true, isLinux));
                    self.setDiskNum();
                } else {
                    if (isLinux) {
                        self.data.disks[0].size = 20;
                    } else {
                        self.data.disks[0].size = 40;
                    }
                }
            }
            return;
        } else if (global.createType === 'disk') {
            params.width = def.diskTpl.width;
            params.height = def.diskTpl.height;
            isOverCom = impact.comIsOverInnerCom(params, 1);
            if (!isOverCom.isOver || isOverCom.overObj.kind !== 'ecs') {
                $.notify({
                    msg: "磁盘只能只能拖放到 ECS 组件上",
                    type: 'warning'
                });
            } else if (!isOverCom.overObj.data.osVal) {
                $.notify({
                    msg: "在安装磁盘前请先选择系统镜像",
                    type: 'warning'
                });
            } else {
                self = isOverCom.overObj;
                global.selectObj = self;
                if (self.isOpen() && self.data.amount > 1) {
                    $.notify({
                        msg: "已关联复合组件不可修改添加磁盘",
                        type: 'danger'
                    });
                    return;
                }
                currDiskAllSize = tools.calculateEcsDiskSize(self.data.disks);
                if (currDiskAllSize > def.disk.maxSize - 5) {
                    $.notify({
                        msg: "磁盘总容量不得大于 2TB",
                        type: 'danger'
                    });
                    return;
                }
                diskIndex = diskLength = self.data.disks.length;
                diskId = 'disk_' + diskIndex;
                while (true) {
                    isDisk = self.data.disks.find(function (_disk) {
                        return _disk.diskId === diskId;
                    });
                    if (isDisk) {
                        diskIndex++;
                        diskId = 'disk_' + diskIndex;
                    } else {
                        break;
                    }
                }
                if (params.kind === 'cloud' || params.kind === 'ephemeral') {
                    noSnapshot = 1;
                    diskSize = 5;
                    diskType = params.kind;
                    snapshotId = null;
                } else {
                    diskId = 'disks_' + diskIndex;
                    noSnapshot = 0;
                    diskInfo = global.snapshotInfoList[params.kind];
                    diskSize = 0;
                    snapshotId = diskInfo.SnapshotId;
                    diskType = 'snapshot';
                }
                isHaveSnapshot = self.data.disks.find({
                    category: 'snapshot'
                });
                isHaveEphemeral = self.data.disks.find({
                    category: 'ephemeral'
                });
                isHaveEloud = self.data.disks.find({
                    category: 'cloud',
                    isSystem: false
                });
                if (self.data.chargeType === 1) {
                    _diskSize = 5;
                } else {
                    _diskSize = 2;
                }
                if (noSnapshot && diskLength > 1) {
                    if ((params.kind === 'cloud' && isHaveEphemeral) || (params.kind === 'ephemeral' && isHaveEloud)) {
                        $.notify({
                            msg: "云磁盘和临时磁盘暂不支持混用",
                            type: 'danger'
                        });
                        return;
                    }
                }
                if (diskLength === _diskSize) {
                    $.notify({
                        msg: "磁盘最多只能使用" + (diskLength - 1) + "块",
                        type: 'danger'
                    });
                    return;
                }
                tempDisk = new EcsDisk(false, null, diskSize, diskId, diskType, false, snapshotId);
                if (Object.size(self.data.maps) > 0) {
                    task.ecs.newDisk(self, tempDisk);
                }
                self.data.disks.push(tempDisk);
                canFunc.blinkNode(self);
                self.setDiskNum();
                domFunc.showRemark(self);
                if (noSnapshot) {
                    domFunc.diskInit();
                    domFunc.showDiskModal(params.kind);
                }
                global.selectDisk = self.data.disks.last();
                layer.setAllComCornersHidden(0);
                self.showMyCorners();
                canFunc.saveHistory();
            }
            return;
        } else if (global.createType === 'com') {
            params.width = def.component.outerWidth;
            params.height = def.component.outerHeight;
            isOverLayer = impact.comIsOverLayer(params, 1);
            innerOverLayer = impact.comIsOverLayer(params, 1, 1);
            if (!innerOverLayer.isOver && (params.kind !== 'slb' && params.kind !== 'diy')) {
                $.notify({
                    msg: "除SLB和自定义组件，组件只能放置在层内",
                    type: 'danger'
                });
                return;
            }
            if (params.kind === 'slb' || params.kind === 'diy') {
                isOverBorder = impact.comIsOverBorder(params, 1);
                if (!isOverLayer.isOver && isOverBorder.isOver) {
                    $.notify({
                        msg: "组件不可放置在层边框上",
                        type: 'danger'
                    });
                    return;
                }
            }
            if (params.kind === 'ecs') {
                isOverCom = impact.comIsOverInnerCom(params, 1);
                global.selectObj = isOverCom.overObj;
                if (isOverCom.isOver && isOverCom.overObj.kind === 'ecs') {
                    if (isOverCom.overObj.data.openList.isOpen) {
                        $.notify({
                            msg: "已关联组件不能修改数量",
                            type: 'warning'
                        });
                        return;
                    } else {
                        isOverCom.overObj.fire('click');
                        tempCount = isOverCom.overObj.data.amount;
                        canFunc.changeEcsAmount(isOverCom.overObj, Number(tempCount) + 1);
                        isOverCom.overObj.setAmount(Number(tempCount) + 1);
                        isOverCom.overObj.fire('mousedown');
                        canFunc.secGroupAddEcs(isOverCom.overObj);
                        domFunc.showRemark(isOverCom.overObj);
                        canFunc.saveHistory();
                    }
                    return;
                }
            }
        } else {
            return;
        }
        newComObj = new comFactory(params);
        if (innerOverLayer.isOver) {
            newComObj.cMoveTo(innerOverLayer.overObj);
        } else {
            layer.add(newComObj);
        }
        if (innerOverLayer.isOver && !isOverLayer.isOver && (params.kind !== 'slb' && params.kind !== 'diy')) {
            params = tools.calculateCanPlaced(params);
            params.kind = global.createSubType;
        }
        newComObj.setAbsPos(params.x, params.y);
        domFunc.showRightBar(global.selectObj);
        canFunc.secGroupAddEcs(newComObj);
        if (params.kind === 'ecs') {
            $('#defaultImageListHead').trigger('click');
        }
        newComObj.corners.leftTop.fire('mouseover');
        newComObj.showMyCorners();
        canFunc.saveHistory();
    },
    addResetEcs: function (node) {
        if (node.data.openList.isOpen) {
            return task.ecs.reset(node, node.data.osVal);
        } else {

        }
    },
    crateComByCustom: function (params) {
        if (params.kind === 'layer') {
            canFunc.crateLayerByCustomTpl(params);
        } else {
            canFunc.crateComByCustomTpl(params);
        }
    },
    crateLayerByCustomTpl: function (params) {
        var absPos, child, isOverLayer, jsonText, newLayerObj, tempCom, _i, _len, _params, _ref;
        jsonText = global.createComTpl.data('infos');
        _params = $.evalJSON(jsonText);
        params.width = _params.width;
        params.height = _params.height;
        isOverLayer = impact.layerIsOverLayer(params, 1);
        if (isOverLayer.isOver) {
            $.notify({
                msg: "层不可重叠",
                type: 'danger'
            });
            return;
        }
        newLayerObj = new comFactory({
            kind: 'layer',
            x: _params.x,
            y: _params.y,
            width: _params.width,
            height: _params.height
        });
        layer.add(newLayerObj);
        _ref = _params.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            absPos = tools.convertRelToAbsPos(child);
            tempCom = canFunc.crateComByCustomTpl(child, 1);
            newLayerObj.add(tempCom);
            tempCom.setAbsPos(absPos.x, absPos.y);
        }
        newLayerObj.fire('mousedown');
        newLayerObj.setAbsPos(params.x, params.y);
        domFunc.showRightBar(global.selectObj);
        navImg.init();
    },
    crateComByCustomTpl: function (params, flag) {
        var innerOverLayer, isOverLayer, jsonText, newComObj, _params;
        params.width = def.component.outerWidth;
        params.height = def.component.outerHeight;
        if (flag) {
            newComObj = new comFactory({
                kind: params.kind
            });
            newComObj.cloneData(params);
            canFunc.secGroupAddEcs(newComObj);
            return newComObj;
        } else {
            jsonText = global.createComTpl.data('infos');
            _params = $.evalJSON(jsonText);
            innerOverLayer = impact.layerIsOverLayer(params, 1);
            isOverLayer = impact.comIsOverLayer(params, 1);
            if (!innerOverLayer.isOver) {
                $.notify({
                    msg: "除SLB和自定义组件，组件只能放置在层内",
                    type: 'danger'
                });
                return;
            }
            if (innerOverLayer.isOver && !isOverLayer.isOver) {
                params = tools.calculateCanPlaced(params);
                params.kind = global.createSubType;
            }
            isOverLayer = impact.comIsOverLayer(params, 1);
            if (!isOverLayer.isOver) {
                $.notify({
                    msg: "除SLB和自定义组件，组件只能放置在层内",
                    type: 'danger'
                });
                return;
            }
            newComObj = new comFactory(params);
            newComObj.cloneData(_params);
            if (innerOverLayer.isOver) {
                newComObj.cMoveTo(innerOverLayer.overObj);
            } else {
                layer.add(newComObj);
            }
            if (innerOverLayer.isOver && !isOverLayer.isOver) {
                params = tools.calculateCanPlaced(params);
            }
            newComObj.setAbsPos(params.x, params.y);
            domFunc.showRightBar(global.selectObj);
            navImg.init();
        }
        canFunc.secGroupAddEcs(newComObj);
        return newComObj;
    },
    blinkNode: function (node, onFinishback) {
        var color, node_img, node_img_pos, node_img_scale_pos, node_pos, node_pos_parent, node_size;
        color = kk.Util.getRGB('orange');
        node_size = node.getRealSize();
        node_pos = node.getPosition();
        node_pos_parent = node.parent.getPosition();
        node_img_pos = node.getAbsolutePosition();
        node_img_scale_pos = {
            x: node_pos.x - node_size.width * 2,
            y: node_pos.y - node_size.height * 2
        };
        node_img = node.toImage({
            x: node_img_pos.x,
            y: node_img_pos.y,
            width: node_size.width,
            height: node_size.height,
            callback: function (img) {
                var image;
                image = new kk.Image({
                    x: node_img_scale_pos.x,
                    y: node_img_scale_pos.y,
                    width: node_size.width,
                    height: node_size.height,
                    scale: 5,
                    opacity: 0,
                    image: img
                });
                node.parent.add(image);
                new Kinetic.Tween({
                    node: image,
                    duration: 0.3,
                    easing: Kinetic.Easings.EaseIn,
                    opacity: 0.3,
                    scaleX: 1,
                    scaleY: 1,
                    x: node_pos.x,
                    y: node_pos.y,
                    onFinish: function () {
                        image.destroy();
                    }
                }).play();
            }
        });
    },
    selectNode: function (node) {
        var node_old;
        domFunc.comBlur();
        node_old = global.selectObj;
        global.selectObj = null;
        if (node_old && Object.size(node_old) && node_old.getCategory() === 'component') {
            node_old.changeTitleLen(global.titleLenNormal);
        }
        layer.setAllCornersHidden();
        if ((!node) || Object.size(node) <= 0) {
            return;
        }
        if (node.getCategory() === 'component') {
            node.changeTitleLen(global.titleLenSelect);
            if (node.parent.category === 'layer') {
                node.parent.moveToTop();
            }
        }
        node.moveToTop();
        node.showMyCorners();
        domFunc.rightBarSwitch(node);
        global.selectObj = node;
        try {
            canFunc.lineSelect(node);
        } catch (_error) { }
        global.tempPos = tools.convertAbsToRelPos(node);
    },
    onLayerClick: function (e) {
        if (e.targetNode.parent.parent === this) {
            canFunc.selectNode(this);
            this.corners.leftTop.fire('mouseover');
            //$(document.activeElement).blur();
            navImg.init();
        }
    },
    onLayerDblClick: function (e) {
        if (e.targetNode.parent.parent === this) {
            domFunc.showRightBar(this);
        }
    },
    onLayerMouseOrTouchDown: function (e) {
        tools.setCursor('-webkit-grabbing');
    },
    onLayerMouseOrTouchEnd: function (e) {
        tools.setCursor('-webkit-grab');
    },
    onLayerEntitiesMouseOver: function (e) {
        e.cancelBubble = true;
        if (this === global.selectObj) {
            tools.setCursor('-webkit-grab');
        } else {
            tools.setCursor('default');
        }
    },
    onLayerEntitiesMouseOut: function (e) {
        tools.setCursor('-webkit-grab');
    },
    onLayerLeftTopMouseDown: function (e) {
        canFunc.showBackup();
    },
    onLayerRightTopMouseDown: function (e) {
        e.cancelBubble = 1;
        stage.setDraggable(false);
        canFunc.startDraw(e, this);
    },
    onLeftTopMouseOver: function (e) {
        var absPos, desc, id, name, other, _key, _map, _ref;
        id = this.parent.data.id;
        name = this.parent.data.name;
        desc = this.parent.data.remark;
        absPos = this.getAbsolutePosition();
        other = [];
        if (this.parent.kind === 'ecs') {
            other.push("<b>CPU/内存/带宽:</b> " + this.parent.data.cpu + "核/" + (this.parent.data.memory / 1024) + "G/" + this.parent.data.bandWidth + "M");
            if (tools.isMapped() && Object.size(this.parent.data.maps) === 1) {
                _ref = this.parent.data.maps;
                for (_key in _ref) {
                    _map = _ref[_key];
                    if (_map.PublicIpAddress && _map.PublicIpAddress.length > 0) {
                        other.push("<b>公网IP:</b> " + _map.PublicIpAddress[0]);
                    }
                    if (_map.InnerIpAddress && _map.InnerIpAddress.length > 0) {
                        other.push("<b>内网IP:</b> " + _map.InnerIpAddress[0]);
                    }
                }
            }
            if (this.parent.data.osVal) {
                other.push("<b>镜像:</b> <span class=\"item-info\">" + (tools.getOsStrByVal(this.parent.data.osVal)) + "</span>");
            } else {
                other.push('<b style="color:red">尚未设置镜像</b>');
            }
        }
        if ($('.description-dialog:visible').size() > 0) {
            return;
        }
        if (name || desc) {
            $.tips({
                id: "com-tips_" + id,
                top: absPos.y + def.stage.marginV,
                left: absPos.y + def.stage.marginH,
                name: name,
                desc: desc,
                other: other
            }, this);
        }
    },
    onLeftTopMouseOut: function (e) {
        return $.tips('hide');
    },
    onLayerLeftBottomMouseDown: function (e) {
        var d;
        e.cancelBubble = 1;
        e.stopPropagation();
        canFunc.hideDialog();
        d = {};
        d["this"] = this;
        $('.option-list').remove();
        $('.op-item.op-copy a').unbind('mousedown');
        $.UI.canvasdropmenu({
            offsetX: (this.getAbsolutePosition().x + $('canvas').offset().left).toString() + 'px',
            offsetY: (this.getAbsolutePosition().y + $('canvas').offset().top).toString() + 'px',
            callback: function () {
                $('.op-item.op-copy a').on('mousedown touchstart', function () {
                    canFunc.comCopy(d["this"]);
                    $('.option-list').remove();
                    return false;
                });
                $('.op-item.op-del a').on('mousedown touchstart', tools.deleteNode);
                $('.op-item.op-remark a').on('mousedown touchstart', function () {
                    domFunc.showRightBar(d["this"].parent);
                    $('.option-list').remove();
                    return false;
                });
            }
        }, d["this"]);
        $('.disk-list').remove();
    },
    onLayerRightBottomMouseDown: function (e) {
        e.cancelBubble = 1;
        tools.setCursor('-webkit-grabbing');
        domFunc.hideTip();
        canFunc.onLayerResizeStart.call(this, e);
    },
    onLayerRightBottomMouseUp: function (e) {
        e.cancelBubble = 1;
        tools.setCursor('-webkit-grab');
    },
    initNewLayer: function (self) {
        layer.setAllCornersHidden();
        self.showMyCorners();
        return global.selectObj = self;
    },
    onLayerEntitiesDragStart: function (e) {
        e.cancelBubble = 1;
        canFunc.hideDialog();
        canFunc.selectNode(this);
        canFunc.distroyLayerLine(this);
        layer.batchDraw();
    },
    onLayerEntitiesDragMove: function (e) { },
    onLayerEntitiesDragEnd: function (e) {
        var absPos, isOverCom, isOverLayer, params, tempPos;
        e.cancelBubble = 1;
        absPos = tools.reCalculatePos(this.getAbsolutePosition());
        params = $.extend({
            tname: this.tname
        }, absPos, this.getRealSize());
        isOverLayer = impact.layerIsOverLayer(params, 1);
        if (isOverLayer.isOver) {
            $.notify({
                msg: "层不可重叠",
                type: 'danger'
            });
            tempPos = tools.convertRelToAbsPos(global.tempPos);
            this.setAbsPos(tempPos.x, tempPos.y);
        } else {
            isOverCom = impact.layerIsOverCom(this);
            if (isOverCom.isOver) {
                tempPos = tools.convertRelToAbsPos(global.tempPos);
                this.setAbsPos(tempPos.x, tempPos.y);
                $.notify({
                    msg: "层不可覆盖组件",
                    type: 'danger'
                });
            } else {
                this.setAbsPos(absPos.x, absPos.y);
            }
        }
        this.recordChildPos();
        canFunc.reLayerLine(this);
        this.corners.leftTop.fire('mouseover');
        navImg.init();
        layer.batchDraw();
        canFunc.saveHistory();
        setTimeout(function () {
            return stage.setDraggable(true);
        }, 100);
        canFunc.showAllLineTipInfo();
    },
    onComClick: function (e) {
        this.corners.leftTop.fire('mouseover');
        //$(document.activeElement).blur();
        navImg.init();
        canFunc.showAllLineTipInfo();
    },
    onComDblclick: function (e) {
        domFunc.showRightBar(this);
    },
    onComMouseDown: function (e) {
        e.cancelBubble = true;
        domFunc.onSaveRemark();
        domFunc.onLayerSaveRemark();
        domFunc.hideTip();
        canFunc.hideDialog();
        canFunc.selectNode(this);
        global.tempDragPos = this.getAbsolutePosition();
    },
    onComMouseOver: function (e) {
        e.cancelBubble = true;
        if (this === global.selectObj) {
            tools.setCursor('-webkit-grab');
        } else {
            tools.setCursor('default');
        }
    },
    onComMouseOut: function (e) {
        tools.setCursor('-webkit-grab');
    },
    onComLeftTopMouseDown: function (e) {
        e.cancelBubble = 1;
        canFunc.showBackup();
    },
    showBackup: function () {
        var comId, comName, comObj, comPos, comRemark, comType, dialogId, _html, _offsetX, _offsetY, _pos, _remarkDialogHeight, _remarkDialogWidth;
        comObj = global.selectObj;
        comPos = comObj.getAbsolutePosition();
        comType = comObj.kind;
        comId = comObj.attrs.id;
        comName = comObj.getData('name');
        comRemark = comObj.getData('remark');
        if ("undefined" === typeof comName) {
            comName = comId;
        }
        if ("undefined" === typeof comRemark) {
            comRemark = "";
        }
        domFunc.closeRemarkDialog();
        _remarkDialogWidth = 267;
        _remarkDialogHeight = 190;
        _offsetY = 45;
        _offsetX = 180;
        _pos = {};
        _pos.r = "left";
        _pos.x = comPos.x + _offsetX - _remarkDialogWidth - 15;
        _pos.y = comPos.y + _offsetY - _remarkDialogHeight / 2;
        if (_pos.x < 0 || _pos.y < 0 || _pos.y + _remarkDialogHeight > $(window).outerHeight()) {
            _pos.r = "top";
            _pos.x = comPos.x + _offsetX - _remarkDialogWidth / 2;
            _pos.y = comPos.y + _offsetY - _remarkDialogHeight - 15;
        }
        if (_pos.x < 0 || _pos.y < 0 || _pos.x + _remarkDialogWidth > $(window).outerWidth()) {
            _pos.r = "right";
            _pos.x = comPos.x + _offsetX + 15;
            _pos.y = comPos.y + _offsetY - _remarkDialogHeight / 2;
        }
        if (_pos.x + _remarkDialogWidth > $(window).outerWidth() || _pos.y < 0 || _pos.y + _remarkDialogHeight > $(window).outerHeight()) {
            _pos.r = "bottom";
            _pos.x = comPos.x + _offsetX - _remarkDialogWidth / 2;
            _pos.y = comPos.y + _offsetY + 15;
        }
        dialogId = 'dialog-' + Math.round((new Date).getTime() + Math.random() * 99999).toString();
        _html = ['<div class="popover com-tip-input ', _pos.r, ' description-dialog" id="', dialogId, '" style="position:absolute; left:', _pos.x, 'px; top: ', _pos.y, 'px;width:267px">', '<div class="arrow"></div>', '<h3 class="popover-title" style="padding: 5px 10px;">编辑备注</h3>', '<div class="popover-content">', '<div class="form-group">', '<label class="sr-only" for="com_name">名称:</label>', '<input type="text" id="com_name" name="com_name" class="form-control" placeholder="请输入备注名" value="', comName, '" />', '</div>', '<div class="form-group">', '<label class="sr-only" for="com_desc">备注:</label>', '<textarea name="com_desc" id="com_desc" class="form-control" rows="3" placeholder="请输入描述">', comRemark, '</textarea>', '</div>', '<div style="display:none"><input type="hidden" name="com_id" value="', comId, '"><input type="hidden" name="com_type" value="', comType, '"></div>', '</div>', '</div>'].join('');
        $(_html).show().appendTo($('body'));
        $('#' + dialogId).mousedown(function (e) {
            return e.stopPropagation();
        });
    },
    onComRightTopMouseDown: function (e) {
        stage.setDraggable(false);
        e.cancelBubble = 1;
        canFunc.startDraw(e, this);
    },
    onComLeftBottomMouseDown: function (e) {
        var d, dropMenuOptions, itemArr, self;
        e.cancelBubble = 1;
        self = this.parent;
        d = [];
        d["this"] = this;
        canFunc.hideDialog();
        $('.option-list').remove();
        console.log(self.data.amount);
        if (self.data.openList.isOpen) {
            if (self.data.amount === 1) {
                itemArr = ['copy', 'del', 'release', 'save', 'config'];
            } else {
                itemArr = ['del', 'release', 'save', 'config'];
            }
        } else {
            if (self.data.amount === 1) {
                itemArr = ['copy', 'del', 'save', 'config'];
            } else {
                itemArr = ['del', 'save', 'config'];
            }
        }
        dropMenuOptions = {
            item: itemArr,
            offsetX: (this.getAbsolutePosition().x + $('canvas').offset().left).toString() + 'px',
            offsetY: (this.getAbsolutePosition().y + $('canvas').offset().top).toString() + 'px',
            callback: function () {
                $('.op-item.op-copy a').on('mousedown touchstart', function () {
                    if (d["this"].parent.kind === 'ecs') {
                        $('#copyEcsDialog').modal('show');
                        if (tools.isMapped(d["this"].parent.data)) {
                            $('#copyContentRow').show();
                        } else {
                            $('#copyContentRow').hide();
                        }
                        if (+self.data.amount === 1) {
                            if (tools.isMapped(self.data)) {
                                $('#copy-add-num-div').hide();
                                $('#ecsCopyOption_2').iCheck('check');
                                $('#ecsCopyNum').attr('disabled', 'disabled');
                            } else {
                                $('#copy-add-num-div').show();
                                $('#ecsCopyOption_1').iCheck('check');
                                $('#ecsCopyNum').removeAttr('disabled');
                            }
                        } else {
                            $('#copy-add-num-div').show();
                            $('#ecsCopyOption_1').iCheck('check');
                        }
                    } else {
                        canFunc.comCopy(d["this"]);
                    }
                    $('.option-list').remove();
                    return false;
                });
                $('.op-item.op-config a').on('mousedown touchstart', function () {
                    domFunc.showRightBar(d["this"].parent);
                    $('.option-list').remove();
                    return false;
                });
                $('.op-item.op-release a').on('mousedown touchstart', function () {
                    canFunc.releaseServer(d["this"].parent);
                    $('.option-list').remove();
                    return false;
                });
                $('.op-item.op-del a').on('mousedown touchstart', tools.deleteNode);
            }
        };
        $.UI.canvasdropmenu(dropMenuOptions, d["this"]);
        event.stopPropagation();
        $('.disk-list').remove();
    },
    onComRightBottomMouseDown: function (e) {
        e.cancelBubble = 1;
        canFunc.showDiskList(this, e);
    },
    newRightBottomClick: function (e) {
        var d, itemArr;
        e.cancelBubble = 1;
        d = [];
        d["this"] = this;
        itemArr = ['disklist', 'script'];
        $.UI.canvasdropmenu({
            item: itemArr,
            offsetX: (this.getAbsolutePosition().x + $('canvas').offset().left).toString() + 'px',
            offsetY: (this.getAbsolutePosition().y + $('canvas').offset().top).toString() + 'px',
            callback: function () {
                $('.op-item.op-disklist a').on('mousedown touchstart', function () {
                    canFunc.showDiskList(d["this"], e);
                });
                $('.op-item.op-script a').on('mousedown touchstart', function () {
                    canFunc.showScriptList(d["this"], e);
                });
            }
        }, d["this"]);
    },
    initNewCom: function (self) {
        layer.setAllCornersHidden();
        return global.selectObj = self;
    },
    onComEntitiesDragStart: function (e) {
        tools.setCursor('-webkit-grabbing');
        canFunc.hideDialog();
        layer.setAllCornersHidden(this);
        e.cancelBubble = 1;
        if (global.selectObj !== this) {
            canFunc.selectNode(this);
        }
        canFunc.distroyLine(this);
        layer.batchDraw();
    },
    onComEntitiesDragMove: function (e) {
        var absPos, alignResult, innerOverLayer, isOverBorder, isOverCom, params;
        absPos = tools.reCalculatePos(this.getAbsolutePosition());
        params = $.extend({
            tname: this.tname
        }, absPos, this.getRealSize());
        layer.setAllCornersHidden(this);
        isOverCom = impact.comIsOverInnerCom(this);
        alignResult = impact.comIsAlignment(this);
        if (alignResult.alignX) {
            global.verticalLine.show();
            global.verticalLine.getPoints()[0].y = -global.stagePosition.y;
            global.verticalLine.getPoints()[0].x = alignResult.alignX;
            global.verticalLine.getPoints()[1].x = alignResult.alignX;
        } else {
            global.verticalLine.hide();
        }
        if (alignResult.alignY) {
            global.horizontalLine.show();
            global.horizontalLine.getPoints()[0].x = -global.stagePosition.x;
            global.horizontalLine.getPoints()[0].y = alignResult.alignY;
            global.horizontalLine.getPoints()[1].y = alignResult.alignY;
        } else {
            global.horizontalLine.hide();
        }
        if (isOverCom.isOver) {
            if (isOverCom.overObj.tname !== this.tname && this.kind === 'ecs' && isOverCom.overObj.kind === 'ecs') {
                isOverCom.overObj.showSelectRect();
            }
        } else {
            isOverBorder = impact.comIsOverBorder(this);
            innerOverLayer = impact.comIsOverLayer(params, 1, 1);
            if (innerOverLayer.isOver && isOverBorder.isOver) {
                if (innerOverLayer.overObj.tname !== this.parent.tname) {
                    tools.setLayerMask(innerOverLayer.overObj, 'orange1');
                }
            }
        }
    },
    onComEntitiesDragEnd: function (e) {
        var absPos, currObj, innerOverLayer, isOverBorder, isOverLayer, params;
        e.cancelBubble = 1;
        tools.setCursor('-webkit-grab');
        global.verticalLine.hide();
        global.horizontalLine.hide();
        absPos = tools.reCalculatePos(this.getAbsolutePosition());
        params = $.extend({
            tname: this.tname
        }, absPos, this.getRealSize());
        isOverLayer = impact.comIsOverLayer(params, 1);
        innerOverLayer = impact.comIsOverLayer(params, 1, 1);
        if (innerOverLayer.isOver) {
            this.cMoveTo(innerOverLayer.overObj);
        } else if (this.kind === 'slb' || this.kind === 'diy') {
            isOverBorder = impact.comIsOverBorder(this);
            if (isOverBorder.isOver) {
                absPos = global.tempPos;
                $.notify({
                    msg: "组件不可放置在层边线上",
                    type: 'danger'
                });
            } else {
                this.cMoveTo(layer);
            }
        } else if (innerOverLayer.isOver && !isOverLayer.isOver && (params.kind !== 'slb' && params.kind !== 'diy')) {
            absPos = tools.calculateCanPlaced(params);
            stage.setDraggable(true);
        } else {
            absPos = global.tempDragPos;
            $.notify({
                msg: "除slb 和自定义组件外，组件只能放置在层中",
                type: 'danger'
            });
        }
        this.setAbsPos(absPos.x, absPos.y);
        canFunc.reLine(this);
        canFunc.selectNode(this);
        currObj = global.selectObj;
        this.corners.leftTop.fire('mouseover');
        navImg.init();
        this.moveToTop();
        if (this.parent.category === 'layer') {
            this.parent.moveToTop();
        }
        layer.batchDraw();
        canFunc.saveHistory();
        canFunc.showAllLineTipInfo();
    },
    onLayerResizeStart: function (e) {
        var _rect, _self;
        global.isResize = 1;
        stage.setDraggable(false);
        _self = global.selectObj;
        _rect = _self.getDashRect();
        global.resizeStart = _rect.getAbsolutePosition();
        global.resizeInitSize = _self.getRealSize();
        canFunc.distroyLine(global.selectObj);
    },
    onLayerResizeMove: function (e) {
        var _i, _len, _ref, _self, _tempCom, _tempHeight, _tempPos, _tempWidth, _tempX, _tempY;
        if (global.isResize) {
            _tempX = 0;
            _tempY = 0;
            _self = global.selectObj;
            tools.setCursor('move');
            _tempPos = tools.convertPagePos(e, 'mousemove');
            _tempWidth = (_tempPos.x - global.resizeStart.x + global.resizeOffsetX) / global.stageScale;
            _tempHeight = (_tempPos.y - global.resizeStart.y + global.resizeOffsetY) / global.stageScale;
            _ref = _self.children.toArray();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                _tempCom = _ref[_i];
                if (_tempCom.category === 'component') {
                    _tempX = _tempCom.getX() > _tempX ? _tempCom.getX() : _tempX;
                    _tempY = _tempCom.getY() > _tempY ? _tempCom.getY() : _tempY;
                }
            }
            _tempWidth = _tempWidth < def.layer.minWidth ? def.layer.minWidth : _tempWidth;
            _tempHeight = _tempHeight < def.layer.height ? def.layer.height : _tempHeight;
            _tempWidth = _tempWidth < _tempX + 100 ? _tempX + 100 : _tempWidth;
            _tempHeight = _tempHeight < _tempY + 130 ? _tempY + 130 : _tempHeight;
            _self.setRealSize(_tempWidth, _tempHeight);
            layer.batchDraw();
        }
    },
    onLayerResizeEnd: function (e) {
        var isOverCom, isOverLayer, newSize, originalSize, params, _self;
        stage.setDraggable(true);
        if (global.isResize) {
            _self = global.selectObj;
            global.isResize = 0;
            tools.setCursor('default');
            newSize = tools.reCalculateLayerSize(_self);
            params = $.extend({
                tname: _self.tname
            }, _self.getAbsolutePosition(), newSize);
            _self.setRealSize(newSize.width, newSize.height);
            isOverLayer = impact.layerIsOverLayer(params, 1);
            if (isOverLayer.isOver) {
                $.notify({
                    msg: "层不可重叠",
                    type: 'danger'
                });
                originalSize = global.resizeInitSize;
                _self.setRealSize(originalSize.width, originalSize.height);
            } else {
                isOverCom = impact.layerIsOverCom(params, 1);
                if (isOverCom.isOver) {
                    $.notify({
                        msg: "层不可覆盖组件",
                        type: 'danger'
                    });
                    originalSize = global.resizeInitSize;
                    _self.setRealSize(originalSize.width, originalSize.height);
                }
            }
            canFunc.reLine(_self);
            global.resizeInitSize = {};
            layer.batchDraw();
            canFunc.saveHistory();
        }
    },
    onBodyTouchHold: function (e) {
        e.stopPropagation();
    },
    onStagePinch: function (e) {
        var tempScale;
        tempScale = global.stageScale * Math.pow(e.gesture.scale, 0.1);
        if (tempScale > 1) {
            tempScale = 1;
        }
        if (tempScale < 0.5) {
            tempScale = 0.5;
        }
        global.stageScale = tempScale;
        canFunc.setStageScale(global.stageScale);
    },
    onClickOrTouch: function (kind, e, obj) {
        var targetNode;
        targetNode = e.targetNode;
        if (targetNode == null) {
            targetNode = {};
            targetNode.doubleClick = null;
        }
        if (targetNode.doubleClick) {
            canFunc.onDoubleClick(targetNode, obj);
        } else {
            canFunc.onSingleClick(kind, obj);
            targetNode.doubleClick = true;
            setTimeout(function () {
                delete targetNode.doubleClick;
            }, 200);
        }
    },
    onSingleClick: function (type, obj) {
        canFunc.lineSelect(obj);
        canFunc.hideDialog();
        layer.batchDraw();
        global.selectObj = obj;
        domFunc.showRemark(obj);
    },
    onDoubleClick: function (targetNode, obj) {
        delete targetNode.doubleClick;
        canFunc.lineSelect(obj);
        domFunc.showRightBar(obj);
        $('#layer_id').val(obj.data.id);
    },
    startDraw: function (e, obj) {
        var endMousePos, layerPosition, mousePos, _line;
        global.isDrag = 0;
        global.isLining = 1;
        _line = new kk.Line({
            id: 'line' + tools.rand(),
            stroke: 'green',
            strokeWidth: 2,
            points: [0, 0, 0, 0]
        });
        mousePos = stage.getPointerPosition();
        layerPosition = tools.convertPagePos(e, 'mousedown');
        endMousePos = tools.convertAbsToRelPos(mousePos, 1);
        _line.getPoints()[0].x = endMousePos.x;
        _line.getPoints()[0].y = endMousePos.y;
        _line.getPoints()[1].x = endMousePos.x;
        _line.getPoints()[1].y = endMousePos.y;
        layer.add(_line);
        _line.moveToTop();
        layer.batchDraw();
        global.tempLine = _line;
        global.lineStartObj = obj.getParent();
    },
    drawLine: function (startObj, endObj, lineId, val, dFlag) {
        var endCategory, endObj_secGroup, isDraw, kind, startCategory, startObj_secGroup, temp, weight;
        if (canFunc.hasLineOnCom(startObj, endObj).length > 0) {
            return false;
        }
        isDraw = true;
        dFlag = dFlag || 0;
        startCategory = startObj.category;
        endCategory = endObj.category;
        if (startCategory === 'component' && endCategory === 'component') {
            if ((startObj.kind === 'slb' || startObj.kind === 'rds' || startObj.kind === 'oss') && (endObj.kind !== 'ecs' && endObj.kind !== 'diy')) {
                global.tempLine.destroy();
                kind = startObj.kind.toUpperCase();
                $.notify({
                    msg: "" + kind + " 只能和 ECS 以及层连线",
                    type: 'warning'
                });
                isDraw = false;
                return;
            }
            if (startObj.kind === 'ecs' && endObj.kind === 'ecs') {
                startObj_secGroup = startObj.data.securityGroupId;
                endObj_secGroup = endObj.data.securityGroupId;
                if ((startObj_secGroup.length > 0) && (startObj_secGroup.length === endObj_secGroup.length)) {
                    if (startObj_secGroup[0] !== endObj_secGroup[0]) {
                        global.tempLine.destroy();
                        $.notify({
                            msg: "不同安全组不可连线",
                            type: 'warning'
                        });
                        isDraw = false;
                        return;
                    }
                } else if (startObj_secGroup.length !== endObj_secGroup.length) {
                    global.tempLine.destroy();
                    $.notify({
                        msg: "不同安全组不可连线",
                        type: 'warning'
                    });
                    isDraw = false;
                    return;
                }
            }
        } else if (startCategory === 'component' && endCategory === 'layer') {
            isDraw = true;
        } else if (startCategory === 'layer' && endCategory === 'component') {
            isDraw = true;
        } else {
            isDraw = true;
        }
        if (isDraw) {
            global.tempLine = new Line(startObj, endObj, lineId);
            temp = {
                line: global.tempLine,
                startPos: startObj,
                endPos: endObj
            };
            entities.lines.push(temp);
            if (startObj.kind === 'diy' || endObj.kind === 'diy') {
                global.tempLine.setColor('#3cc0f2');
            }
            layer.add(global.tempLine);
            data.line[lineId] = {};
            global.tempLine.data = data.line[lineId] = {
                lineType: global.tempLine.path.getStroke(),
                startPos: startObj.getId(),
                endPos: endObj.getId(),
                name: '',
                desc: ''
            };
            weight = val ? val : 100;
            if (startObj.kind === 'slb') {
                if (endObj.kind === 'ecs') {
                    canFunc.addEcsToSlb(startObj, endObj, weight);
                } else if (endObj.kind === 'layer') {
                    canFunc.addEcsInLayerToSlb(startObj, endObj);
                }
            } else if (endObj.kind === 'slb') {
                if (startObj.kind === 'ecs') {
                    canFunc.addEcsToSlb(endObj, startObj, weight);
                } else if (startObj.kind === 'layer') {
                    canFunc.addEcsInLayerToSlb(endObj, startObj);
                }
            } else {

            }
        }
        global.tempLine.moveToBottom();
        layer.batchDraw();
        if (!dFlag && isDraw && !(startObj.kind === 'slb' || endObj.kind === 'slb')) {
            canFunc.saveHistory();
        }
        return isDraw;
    },
    addEcsInLayerToSlb: function (slbObj, layerObj) {
        var ecsId, ecsIdList, ecsObj, layerId;
        layerId = layerObj.getId();
        ecsIdList = data.ecs;
        for (ecsId in ecsIdList) {
            ecsObj = layer.find("#" + ecsId)[0];
            if (ecsObj.getParent().getId() === layerId) {
                canFunc.addEcsToSlb(slbObj, ecsObj, 100);
            }
        }
    },
    mouseMoveLine: function (e) {
        var arr, endPos, layerPosition, len, mousePos, newEndMousePos, newEndPos, pointIsOver, points, startPos, tempLine, tempMousePos;
        if (global.isLining) {
            tempLine = global.tempLine;
            layerPosition = tools.convertPagePos(e, 'mousemove');
            tools.setCursor('default');
            mousePos = stage.getPointerPosition();
            points = tempLine.getPoints();
            startPos = points[0];
            endPos = points[1];
            len = {
                x: endPos.x - startPos.x,
                y: endPos.y - startPos.y
            };
            newEndPos = {
                x: mousePos.x,
                y: mousePos.y
            };
            newEndMousePos = tools.convertAbsToRelPos(newEndPos, 1);
            tempLine.getPoints()[1].x = newEndMousePos.x;
            tempLine.getPoints()[1].y = newEndMousePos.y;
            arr = tools.getAngle(startPos, newEndMousePos);
            if (global.lineArrow) {
                global.lineArrow.destroy();
            }
            global.lineArrow = new Kinetic.Shape({
                x: 0,
                y: 0,
                fill: 'green',
                drawFunc: function (context) {
                    context.beginPath();
                    context.moveTo(arr[0], arr[1]);
                    context.lineTo(newEndMousePos.x, newEndMousePos.y);
                    context.lineTo(arr[2], arr[3]);
                    context.lineTo(arr[4], arr[5]);
                    context.lineTo(arr[0], arr[1]);
                    context.closePath();
                    return context.fillStrokeShape(this);
                }
            });
            layer.add(global.lineArrow);
            layer.batchDraw();
            layer.setAllLayerCornersHidden(1);
            layer.setAllComCornersHidden(global.lineStartObj);
            tempMousePos = {
                x: (newEndMousePos.x * global.stageScale + global.stagePosition.x).round(2),
                y: (newEndMousePos.y * global.stageScale + global.stagePosition.y).round(2)
            };
            pointIsOver = impact.pointIsOverObj(tempMousePos);
            if (pointIsOver.isOver) {
                if (global.lineStartObj.parent.tname === pointIsOver.overObj.tname || global.lineStartObj.tname === pointIsOver.overObj.tname) {

                } else {
                    if (pointIsOver.overObj.kind === 'layer') {
                        pointIsOver.overObj.setColor('orange1');
                    } else {
                        pointIsOver.overObj.showSelectRect();
                    }
                }
            }
        }
    },
    comMouseMoveLine: function (obj) {
        var endPos, line, lineId, startPos, _i, _len, _ref;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if ((line.startPos.getId() === obj.getId()) || (line.endPos.getId() === obj.getId())) {
                line.line.destroy();
                startPos = line.startPos;
                endPos = line.endPos;
                lineId = line.line.getId();
                line.line = new Line(startPos, endPos, lineId);
                line.line.setColor(data.line[line.line.getId()].lineType);
                layer.add(line.line);
                line.line.moveToBottom();
            }
        }
    },
    onLineHitObj: function (e) {
        var currObj, hasLine, hitObj, impactObj, isDraw, isHit, lineArr, lineStartObj, mousePos, pos, tempLine, _point;
        e.cancelBubble = 1;
        stage.setDraggable(true);
        if (global.lineArrow) {
            global.lineArrow.hide();
        }
        layer.setAllLayerCornersHidden();
        mousePos = stage.getPointerPosition();
        _point = {
            x: mousePos.x,
            y: mousePos.y
        };
        impactObj = impact.pointIsOverObj(_point);
        isHit = impactObj.isOver;
        tempLine = global.tempLine;
        if (isHit) {
            hitObj = impactObj.overObj;
            lineStartObj = global.lineStartObj;
            if (hitObj.tname === lineStartObj.tname) {
                tempLine.destroy();
            } else if (hitObj.getParent().tname === lineStartObj.tname) {
                tempLine.destroy();
            } else if (hitObj.tname === lineStartObj.getParent().tname) {
                tempLine.destroy();
            } else {
                hasLine = false;
                lineArr = canFunc.hasLineOnCom(lineStartObj, hitObj);
                if (lineArr.length > 0) {
                    hasLine = true;
                }
                if (!hasLine) {
                    tempLine.destroy();
                    isDraw = canFunc.drawLine(lineStartObj, hitObj, tempLine.getId());
                    if (isDraw) {
                        if (!((lineStartObj.kind === 'slb') || (hitObj.kind === 'slb'))) {
                            pos = tools.convertPagePos(e, 'mouseup');
                            $('.confirm-line-color').css({
                                top: pos.y - 38,
                                left: pos.x + 100
                            }).show();
                        } else {
                            if (lineStartObj.kind === 'slb') {
                                $('#slbToEcsObjId').val(lineStartObj.getId());
                                if (hitObj.kind !== 'diy') {
                                    canFunc.showSetSlbPorts(lineStartObj, hitObj);
                                }
                            } else {
                                $('#slbToEcsObjId').val(hitObj.getId());
                                if (lineStartObj.kind !== 'diy') {
                                    canFunc.showSetSlbPorts(hitObj, lineStartObj);
                                }
                            }
                            $('#modal-slb-port-msg').hide();
                            $('#modal-addslb-tip').hide();
                        }
                    } else {
                        tempLine.destroy();
                    }
                } else {
                    tempLine.destroy();
                }
            }
        } else {
            tempLine.destroy();
        }
        lineStartObj = {};
        global.isLining = 0;
        currObj = global.selectObj;
        canFunc.onSingleClick(currObj.kind, currObj);
        layer.batchDraw();
    },
    showSetSlbPorts: function (slbObj, ecsObj) {
        var isShow;
        isShow = true;
        if (isShow) {
            domFunc.showSlbPortsList(slbObj, ecsObj);
            $('#com-sid').val(slbObj.getId());
            $('#com-eid').val(ecsObj.getId());
            $('#com-lid').val(global.tempLine.getId());
            canFunc.delLineObj(global.tempLine);
            $('#setSlbPorts').modal('show');
        }
    },
    addEcsToSlb: function (slbObj, ecsObj, val) {
        var ecsArr, ecsId, ecsName, isAdd, len, sVal, server, slbId, _ecs, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        slbId = slbObj.getId();
        ecsId = ecsObj.getId();
        ecsName = ecsObj.getData('name');
        sVal = 100;
        if (val) {
            sVal = val;
        }
        isAdd = true;
        if (ecsObj.data.openLists.length <= 1) {
            ecsArr = {
                serverId: ecsId,
                weight: sVal,
                protocol: 'http',
                listenerPort: 80,
                backendServerPort: 80
            };
            if (!slbObj.data.openList.backendServer) {
                slbObj.data.openList.backendServer = [];
            }
            _ref = slbObj.data.openList.backendServer;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                server = _ref[_i];
                if (server.serverId === ecsId) {
                    isAdd = false;
                    break;
                }
            }
            if (isAdd) {
                slbObj.data.openList.backendServer.add(ecsArr);
                len = slbObj.data.openList.backendServer.length;
                domFunc.addEcsToSlbHtml(slbId, ecsId, ecsName, len, val, ecsId);
            }
        } else {
            _ref1 = ecsObj.data.openLists;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                _ecs = _ref1[_j];
                ecsArr = {
                    serverId: _ecs.instanceId,
                    weight: sVal,
                    protocol: 'http',
                    listenerPort: 80,
                    backendServerPort: 80
                };
                if (!slbObj.data.openList.backendServer) {
                    slbObj.data.openList.backendServer = [];
                }
                _ref2 = slbObj.data.openList.backendServer;
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                    server = _ref2[_k];
                    if (server.serverId === _ecs.instanceId) {
                        isAdd = false;
                        break;
                    }
                }
                if (isAdd) {
                    slbObj.data.openList.backendServer.add(ecsArr);
                    len = slbObj.data.openList.backendServer.length;
                    domFunc.addEcsToSlbHtml(slbId, _ecs.instanceId, _ecs.instanceName, len, val, ecsId);
                }
            }
        }
    },
    comCopy: function (e) {
        var addCanvas, addCanvas_com, com_id_map_table, e_new_pos, e_pos, e_size, isAddCanvas, isAddCanvas_com, lineId, mapped, need_c, newComObj, newId, newId_2, new_obj_1, new_obj_2, offset, ol, oldId, oldId_2, old_obj_1, old_obj_2, overObj, overObj_com, params, tmp_overObjAbsPos, to_copy, _i, _j, _len, _len1, _op, _ref, _ref1;
        to_copy = e.parent;
        e_size = to_copy.getRealSize();
        e_pos = {
            x: to_copy.data.x,
            y: to_copy.data.y
        };
        params = {};
        params.kind = to_copy.kind;
        e_new_pos = {};
        offset = {
            x: 0,
            y: 0
        };
        if (params.kind !== 'layer') {
            offset.x = 10;
            offset.y = 0;
        }
        e_new_pos.x = e_pos.x + offset.x;
        e_new_pos.y = e_pos.y + offset.y;
        params.x = e_new_pos.x;
        params.y = e_new_pos.y;
        newComObj = new comFactory(params);
        newComObj.cloneData(to_copy.data);
        newComObj.data.maps = {};
        to_copy.parent.add(newComObj);
        layer.batchDraw();
        if (params.kind === "layer") {
            while (true) {
                isAddCanvas = impact.layerIsOverLayer(newComObj);
                addCanvas = isAddCanvas.isOver;
                isAddCanvas_com = impact.layerIsOverCom(newComObj);
                addCanvas_com = isAddCanvas_com.isOver;
                if (addCanvas) {
                    overObj = isAddCanvas.overObj;
                    tmp_overObjAbsPos = {
                        x: overObj.data.x,
                        y: overObj.data.y
                    };
                    newComObj.setX((tmp_overObjAbsPos.x + overObj.data.width) + 30);
                } else if (addCanvas_com) {
                    overObj_com = isAddCanvas_com.overObj;
                    tmp_overObjAbsPos = {
                        x: overObj_com.data.x,
                        y: overObj_com.data.y
                    };
                    newComObj.setX((tmp_overObjAbsPos.x + def.component.outerWidth) + 30);
                } else {
                    break;
                }
            }
            newComObj.setRealSize(to_copy.getRealSize().width, to_copy.getRealSize().height);
            com_id_map_table = [];
            to_copy.children.each(function (curObj, n) {
                var child_obj, child_pos, newComId, ol, _i, _len, _ref;
                newComId = curObj.kind + "_" + tools.rand();
                if ("undefined" !== typeof curObj.attrs.id) {
                    com_id_map_table[curObj.attrs.id] = newComId;
                }
                if ("undefined" !== typeof curObj.category) {
                    child_pos = curObj.getPosition();
                    child_obj = new comFactory({
                        kind: curObj.kind,
                        x: child_pos.x,
                        y: child_pos.y,
                        id: newComId
                    });
                    child_obj.cMoveTo(newComObj);
                    child_obj.cloneData(curObj.data);
                    child_obj.data.openList.isOpen = false;
                    child_obj.data.maps = {};
                    child_obj.data.openList.hostName = "ecs_" + (tools.rand());
                    child_obj.data.openList.instanceId = "ecs_" + (tools.rand());
                    child_obj.data.openList.instanceName = "ecs_" + (tools.rand());
                    if (child_obj.data.openLists && child_obj.data.openLists.length > 0) {
                        _ref = child_obj.data.openLists;
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            ol = _ref[_i];
                            if (ol.instanceId) {
                                ol.hostName = "ecs_" + (tools.rand());
                                ol.innerIpAddress = [];
                                ol.instanceId = "ecs_" + (tools.rand());
                                ol.instanceName = "ecs_" + (tools.rand());
                                ol.isOpen = false;
                                ol.publicIpAddress = [];
                            }
                        }
                    }
                    if (child_obj.kind === "slb") {
                        child_obj.data.openList.backendServer = [];
                    }
                    child_obj.setPosition({
                        x: child_pos.x,
                        y: child_pos.y
                    });
                    layer.batchDraw();
                }
            });
            newComObj.recordChildPos();
        } else {
            newComObj.setAbsolutePosition({
                x: params.x,
                y: params.y
            });
            switch (newComObj.kind) {
                case 'ecs':
                    try {
                        newComObj.setCpu(to_copy.getData('cpu'));
                        newComObj.setEcsMemory(to_copy.getData('memory'));
                        newComObj.setOsVal(to_copy.getData('osVal'), tools.isMapped(to_copy.data));
                        if (Object.size(to_copy.data.maps) > 0) {
                            newComObj.data.depend = to_copy.data.openList.instanceId;
                            if ($('input[name=isCopyContent]:checked').val() === '1') {
                                newComObj.data.dependContent = true;
                            }
                        }
                        if (newComObj.data.openLists && newComObj.data.openLists.length > 0) {
                            _ref = newComObj.data.openLists;
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                ol = _ref[_i];
                                if (ol.instanceId) {
                                    ol.hostName = "ecs_" + (tools.rand());
                                    ol.innerIpAddress = [];
                                    ol.instanceId = "ecs_" + (tools.rand());
                                    ol.instanceName = "ecs_" + (tools.rand());
                                    ol.isOpen = false;
                                    ol.publicIpAddress = [];
                                }
                            }
                        }
                        newComObj.data.openList.status = '';
                        newComObj.data.status = '';
                        newComObj.setStatusStyle('Unbound');
                        _ref1 = newComObj.data.openLists;
                        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                            _op = _ref1[_j];
                            _op.status = '';
                        }
                    } catch (_error) {
                        e = _error;
                        return;
                    }
                    break;
                case 'rds':
                    try {
                        newComObj.setDbType(to_copy.getData('dbType'));
                        newComObj.setData('dbVersion', to_copy.getData('dbVersion'));
                        newComObj.setDbMemory(to_copy.getData('memory'));
                        newComObj.setStatusStyle('Unbound');
                    } catch (_error) {
                        e = _error;
                        return;
                    }
                    break;
                case 'slb':
                    need_c = need_c;
                    newComObj.setStatusStyle('Unbound');
                    newComObj.data.openList = {
                        isOpen: false,
                        isPublicAddress: true
                    };
            }
            newComObj.data.openList.isOpen = false;
            newComObj.data.maps = {};
        }
        window.hasfind = 1;
        layer.batchDraw();
        if (params.kind === "layer") {
            newComObj.children.each(function (obj1, o) {
                return newComObj.children.each(function (obj2, p) {
                    var _hasline;
                    if (o > p) {
                        return false;
                    }
                    _hasline = canFunc.hasLineOnCom(obj1, obj2);
                    if (_hasline.length > 0) {
                        return canFunc.drawLine(obj1, obj2);
                    }
                });
            });
            mapped = [];
            for (oldId in com_id_map_table) {
                newId = com_id_map_table[oldId];
                if ("string" === typeof newId) {
                    mapped.push(newId);

                    /*
                        Copy cpu and memory datas
                     */
                    switch (stage.find('#' + newId)[0].kind) {
                        case 'ecs':
                            try {
                                stage.find('#' + newId)[0].setCpu(stage.find('#' + oldId)[0].getData('cpu'));
                                stage.find('#' + newId)[0].setEcsMemory(stage.find('#' + oldId)[0].getData('memory'));
                                stage.find('#' + newId)[0].setOsVal(stage.find('#' + oldId)[0].getData('osVal'), tools.isMapped(stage.find('#' + oldId)[0].data));
                            } catch (_error) {
                                e = _error;
                                return;
                            }
                            break;
                        case 'rds':
                            try {
                                stage.find('#' + newId)[0].setDbType(stage.find('#' + oldId)[0].getData('dbType'));
                                stage.find('#' + newId)[0].setData('dbVersion', stage.find('#' + oldId)[0].getData('dbVersion'));
                                stage.find('#' + newId)[0].setDbMemory(stage.find('#' + oldId)[0].getData('memory'));
                            } catch (_error) {
                                e = _error;
                                return;
                            }
                            break;
                        case 'slb':
                            need_c = need_c;
                    }
                    for (oldId_2 in com_id_map_table) {
                        newId_2 = com_id_map_table[oldId_2];
                        if ("string" === typeof newId_2) {
                            if (mapped.indexOf(newId_2) === -1) {
                                old_obj_1 = stage.find('#' + oldId);
                                old_obj_2 = stage.find('#' + oldId_2);
                                new_obj_1 = stage.find('#' + newId);
                                new_obj_2 = stage.find('#' + newId_2);
                                if (new_obj_1.length === 1 && new_obj_2.length === 1 && canFunc.hasLineOnCom(old_obj_1[0], old_obj_2[0]).length > 0) {
                                    if (canFunc.hasLineOnCom(new_obj_1[0], new_obj_2[0]).length === 0) {
                                        lineId = "line_" + ((new Date).getTime() + Math.round(Math.random() * 99999)).toString();
                                        canFunc.drawLine(new_obj_1[0], new_obj_2[0], lineId);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        newComObj.showMyCorners();
        navImg.init();
        canFunc.saveHistory();
        return newComObj;
    },

    distroyLine: function (obj) {
        if (obj.getCategory() === 'layer') {
            canFunc.distroyLayerLine(obj);
        } else {
            canFunc.distroyComLine(obj);
        }
    },
    distroyComLine: function (obj) {
        var line, _i, _len, _ref;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if ((line.startPos.getId() === obj.getId()) || (line.endPos.getId() === obj.getId())) {
                global.tmpLineData[line.line.getId()] = line.line.data;
                line.line.destroy();
            }
        }
    },
    distroyLayerLine: function (obj) {
        var com, line, _i, _j, _len, _len1, _ref, _ref1;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if ((line.startPos.getId() === obj.getId()) || (line.endPos.getId() === obj.getId())) {
                global.tmpLineData[line.line.getId()] = line.line.data;
                line.line.destroy();
            }
        }
        _ref1 = entities.components;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            com = _ref1[_j];
            if (com.getParent().getId() === obj.getId()) {
                canFunc.distroyLine(com);
            }
        }
    },
    reLine: function (obj) {
        if (obj.getCategory() === 'layer') {
            canFunc.reLayerLine(obj);
        } else {
            canFunc.reComLine(obj);
        }
    },
    reComLine: function (obj) {
        var line, lineId, _i, _len, _ref;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if ((line.startPos.getId() === obj.getId()) || (line.endPos.getId() === obj.getId())) {
                if (!canFunc.hasLineId(line.line.getId())) {
                    lineId = line.line.getId();
                    line.line = new Line(line.startPos, line.endPos, lineId);
                    line.line.setColor(data.line[lineId].lineType);
                    layer.add(line.line);
                    line.line.moveToBottom();
                    data.line[lineId] = {};
                    line.line.data = data.line[lineId] = {
                        lineType: global.tmpLineData[lineId]['lineType'],
                        startPos: global.tmpLineData[lineId]['startPos'],
                        endPos: global.tmpLineData[lineId]['endPos'],
                        name: global.tmpLineData[lineId]['name'],
                        desc: global.tmpLineData[lineId]['desc']
                    };
                    delete global.tmpLineData[lineId];
                }
            }
        }
        global.isMove = 0;
    },
    reLayerLine: function (obj) {
        var com, line, lineId, _i, _j, _len, _len1, _ref, _ref1;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            if ((line.startPos.getId() === obj.getId()) || (line.endPos.getId() === obj.getId())) {
                lineId = line.line.getId();
                line.line = new Line(line.startPos, line.endPos, lineId);
                layer.add(line.line);
                line.line.moveToBottom();
                data.line[lineId] = {};
                line.line.data = data.line[lineId] = {
                    lineType: global.tmpLineData[lineId]['lineType'],
                    startPos: global.tmpLineData[lineId]['startPos'],
                    endPos: global.tmpLineData[lineId]['endPos'],
                    name: global.tmpLineData[lineId]['name'],
                    desc: global.tmpLineData[lineId]['desc']
                };
                delete global.tmpLineData[lineId];
            }
        }
        _ref1 = entities.components;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            com = _ref1[_j];
            if (com.getParent().getId() === obj.getId()) {
                canFunc.reLine(com);
            }
        }
        global.isMove = 0;
    },
    lineSelect: function (obj) {
        var line, _i, _len, _ref;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            //line.line.blur();
            if ((line.startPos.getId() === obj.getId()) || (line.endPos.getId() === obj.getId())) {
                line.line.select();
            }
        }
    },
    lineBlur: function () {
        var line, _i, _len, _ref;
        _ref = entities.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            line.line.blur();
        }
    },
    hasLineId: function (lineId) {
        var has, line;
        has = false;
        line = layer.find("#" + lineId)[0];
        if (line) {
            has = true;
        }
        return has;
    },
    onSaveAchitectureCallback: function (_data) {
        if (+_data >= resources.maxAchitecture) {
            $.notify({
                msg: "架构图保存超过数量限制，最多 " + resources.maxAchitecture + " 个",
                type: 'warning'
            });
        } else {
            canFunc.saveAchitecture();
        }
    },
    saveAchitecture: function () {
        var middleBoard, navScale, newBack, stagePos, stageSize, thumbArea, thumbImg, thumbSize, workArea, workSize;
        layer.setAllCornersHidden();
        canFunc.onArchitecturePreview();
        middleBoard = $('#middle-board');
        stageSize = {
            width: middleBoard.width() - def.stage.marginH,
            height: middleBoard.height() - def.stage.marginV
        };
        stagePos = stage.getAbsolutePosition();
        workArea = tools.getRealArea();
        workSize = {
            width: workArea.r - workArea.l,
            height: workArea.b - workArea.t
        };
        navScale = global.stageScale * Math.min(def.imgSizePre.width / workSize.width, def.imgSizePre.height / workSize.height);
        if (navScale > 1) {
            navScale = 1;
        }
        thumbArea = {
            x: workArea.l * navScale + stagePos.x,
            y: workArea.t * navScale + stagePos.y
        };
        thumbSize = {
            width: def.imgSizePre.width,
            height: def.imgSizePre.height
        };
        layer.setScale(navScale);
        newBack = new kk.Rect({
            x: thumbArea.x,
            y: thumbArea.y,
            width: thumbSize.width,
            height: thumbSize.height,
            fill: '#fff'
        });
        layer.add(newBack);
        newBack.moveToBottom();
        layer.batchDraw();
        thumbImg = layer.toImage({
            x: thumbArea.x,
            y: thumbArea.y,
            width: thumbSize.width,
            height: thumbSize.height,
            callback: function (img) {
                var archiid, json, postData, structdesc, structname;
                canFunc.setStageScale(global.stageScale);
                newBack.destroy();
                json = $.toJSON(data);
                archiid = $.cookie('archiid') || '';
                structname = $('#structname').attr('title') || $.cookie('structname') || '新建架构';
                structdesc = $.cookie('structdesc') || '';
                postData = {
                    preurl: encodeURIComponent(img.src),
                    url: encodeURIComponent($('#preview-pic img:first-child')[0].src),
                    name: encodeURIComponent(structname),
                    description: encodeURIComponent(structdesc),
                    infos: encodeURIComponent(json),
                    mail: encodeURIComponent($.cookie('loginMail')),
                    preview: encodeURIComponent($('#preview-list').html()),
                    archiid: encodeURIComponent(archiid)
                };
                tools.post('/struct/create', postData, canFunc.saveArchitectureCallback);
            }
        });
    },
    saveArchitectureCallback: function (_data) {
        switch (_data) {
            case 'err':
                $.notify({
                    type: 'warning',
                    msg: "网络异常，请刷新后重试"
                });
                break;
            case 'aerr':
                $.notify({
                    type: 'warning',
                    msg: "身份验证失败，请刷新后重试"
                });
                break;
            case 'serr':
                $.notify({
                    type: 'warning',
                    msg: "架构图保存失败，请刷新后重试"
                });
                break;
            case 'nosession':
                $.notify({
                    type: 'warning',
                    msg: "架构图保存失败，请刷新后重试"
                });
                break;
            case 'limit':
                $.notify({
                    type: 'warning',
                    msg: "架构图保存超过数量限制，最多 " + resources.maxAchitecture + " 个"
                });
                break;
            default:
                if (global.needLogout) {
                    loginFunc.logoutClear();
                    global.needLogout = false;
                } else {
                    $.cookie('archiid', _data);
                }
                $.notify({
                    type: 'success',
                    msg: "架构保存成功！"
                });
                domFunc.initStructListModel();
        }
    },
    onBtnSaveModelClick: function () {
        var categoryname, description, level, modelname;
        categoryname = $('#model-category-name').val();
        modelname = $('#model-name').val();
        description = $('#model-description').val();
        level = $('#model-level').val();
        if (categoryname === '' || modelname === '') {
            $('#model-label-error').text('信息不完整');
        } else if (isNaN(level)) {
            $('#model-label-error').text('权重只能是数字');
        } else {
            canFunc.getThumb(categoryname, modelname, description, level.trim());
        }
    },
    getThumb: function (categoryname, modelname, description, level) {
        var middleBoard, navScale, newBack, stagePos, stageSize, thumbArea, thumbImg, thumbSize, workArea, workSize;
        layer.setAllCornersHidden();
        middleBoard = $('#middle-board');
        stageSize = {
            width: middleBoard.width() - def.stage.marginH,
            height: middleBoard.height() - def.stage.marginV
        };
        stagePos = stage.getAbsolutePosition();
        workArea = tools.getRealArea();
        workSize = {
            width: workArea.r - workArea.l,
            height: workArea.b - workArea.t
        };
        navScale = global.stageScale * Math.min(def.imgSizeMaster.width / workSize.width, def.imgSizeMaster.height / workSize.height);
        thumbArea = {
            x: workArea.l * navScale + stagePos.x,
            y: workArea.t * navScale + stagePos.y
        };
        thumbSize = {
            width: def.imgSizeMaster.width,
            height: def.imgSizeMaster.height
        };
        layer.setScale(navScale);
        newBack = new kk.Rect({
            x: thumbArea.x,
            y: thumbArea.y,
            width: thumbSize.width,
            height: thumbSize.height,
            fill: '#fff'
        });
        layer.add(newBack);
        newBack.moveToBottom();
        layer.batchDraw();
        thumbImg = layer.toImage({
            x: thumbArea.x,
            y: thumbArea.y,
            width: thumbSize.width,
            height: thumbSize.height,
            callback: function (img) {
                var json, postData;
                canFunc.setStageScale(global.stageScale);
                newBack.destroy();
                json = $.toJSON(data);
                postData = {
                    level: level,
                    category: encodeURIComponent(categoryname),
                    name: encodeURIComponent(modelname),
                    description: encodeURIComponent(description),
                    url: encodeURIComponent(img.src),
                    infos: encodeURIComponent(json)
                };
                return tools.post('/masterplate/create', postData, canFunc.getThumbCallback);
            }
        });
    },
    getThumbCallback: function (_data) {
        if (_data === 'err') {
            $('#model-label-error').text('保存失败,刷新后重试');
        } else if (_data === 'nosession') {
            $('#model-label-error').text('请重新登录');
        } else {
            $('#modelModal').modal('hide');
        }
    },
    hasLineOnCom: function (com1, com2) {
        var arr, line, _i, _j, _len, _len1, _ref, _ref1;
        arr = [];
        if (com2) {
            _ref = entities.lines;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                line = _ref[_i];
                if (((line.startPos.getId() === com1.getId()) && (line.endPos.getId() === com2.getId())) || ((line.startPos.getId() === com2.getId()) && (line.endPos.getId() === com1.getId()))) {
                    arr.add(line.line);
                }
            }
        } else {
            _ref1 = entities.lines;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                line = _ref1[_j];
                if ((line.startPos.getId() === com1.getId()) || (line.endPos.getId() === com1.getId())) {
                    arr.add(line.line);
                }
            }
        }
        return arr;
    },
    delLine: function (e) {
        var lines, pos, _circle, _line;
        _circle = this;
        _line = this.getParent();
        pos = tools.getPagePosOfNode(this);
        lines = tools.getOverlayLines(_circle);
        if (lines.length > 1) {
            $('#del-line-link').text('删除所有连线');
        } else {
            $('#del-line-link').text('删除连线');
        }
        $(".del-line").css({
            top: pos.y - 34,
            left: pos.x + 97
        }).show().off('mousedown touchstart').on('mousedown touchstart', function () {
            return lines.forEach(function (item) {
                canFunc.delLineObj(item);
            });
        });
        canFunc.saveHistory();
    },
    delLineObj: function (obj) {
        var i, line, _component, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        _ref = entities.lines;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            line = _ref[i];
            if (line.line.getId() === obj.getId()) {
                entities.lines.splice(i, 1);
                delete data.line[obj.getId()];
                if ((line.startPos.kind === 'slb') && (line.endPos.kind === 'ecs')) {
                    domFunc.delEcsToSlbHtml(line.startPos.getId(), line.endPos.getId(), line.endPos.getId());
                } else if ((line.startPos.kind === 'ecs') && (line.endPos.kind === 'slb')) {
                    domFunc.delEcsToSlbHtml(line.endPos.getId(), line.startPos.getId(), line.startPos.getId());
                } else if ((line.startPos.kind === 'slb') && (line.endPos.kind === 'layer')) {
                    _ref1 = line.endPos.children;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                        _component = _ref1[_j];
                        if (_component.kind && _component.kind === 'ecs') {
                            domFunc.delEcsToSlbHtml(line.startPos.getId(), _component.getId(), _component.getId());
                        }
                    }
                } else if ((line.startPos.kind === 'layer') && (line.endPos.kind === 'slb')) {
                    _ref2 = line.startPos.children;
                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                        _component = _ref2[_k];
                        if (_component.kind && _component.kind === 'ecs') {
                            domFunc.delEcsToSlbHtml(line.endPos.getId(), _component.getId(), _component.getId());
                        }
                    }
                }
                break;
            }
        }
        canFunc.hideDialog();
        obj.destroy();
        layer.batchDraw();
    },
    hideDialog: function (e) {
        $('.dialog, .componenttip').hide();
        $('.tooltip, .option-list .description-dialog').remove();
    },
    onLineColorClick: function () {
        global.tempLine.setColor($(this).data('color'));
        data.line[global.tempLine.getId()].lineType = $(this).data('color');
        layer.batchDraw();
        canFunc.hideDialog();
    },
    onEcsBuyTimeChange: function () {
        var buyTime, currObj, dataObj;
        buyTime = $('#ecs-buy-time option:selected').val();
        currObj = global.selectObj;
        dataObj = {
            buyTime: buyTime
        };
        canFunc.baseConfirm(dataObj);
        $('#ecs-cost1').html(selEcsPrice());
        canFunc.saveHistory();
    },
    onRdsBuyTimeChange: function () {
        var buyTime, currObj, dataObj;
        buyTime = $('#rds-buy-time option:selected').val();
        currObj = global.selectObj;
        dataObj = {
            buyTime: buyTime
        };
        canFunc.baseConfirm(dataObj);
        $('#rds-cost1').html(selRdsPrice());
        canFunc.saveHistory();
    },
    onEcsBuyAmountChange: function () {
        var amount, currObj;
        if (+$('#ecs-buy-amount').val() < 1 || isNaN(+$('#ecs-buy-amount').val())) {
            $('#ecs-buy-amount').val(1);
        }
        amount = Math.floor(+$('#ecs-buy-amount').val());
        $('#ecs-buy-amount').val(amount);
        currObj = global.selectObj;
        if (Object.size(currObj.data.maps) > 0) {
            $.notify({
                msg: '已关联组件不能修改数量',
                type: 'warning'
            });
            $('#ecs-buy-amount').val(currObj.data.amount);
            return;
        }
        canFunc.changeEcsAmount(currObj, amount);
        currObj.setAmount(amount);
        domFunc.ecsServerListShow(currObj);
        $('#ecs-cost1').html(selEcsPrice());
        layer.batchDraw();
        canFunc.saveHistory();
    },
    baseConfirm: function (dataObj, obj) {
        var currObj;
        if (obj) {
            currObj = obj;
        } else {
            currObj = global.selectObj;
        }
        currObj.setData(dataObj);
        layer.batchDraw();
    },
    onSlbTypeChange: function () {
        var currObj, isPublicAddress, slbType;
        slbType = $('input[name=slb-type]:checked').val();
        isPublicAddress = true;
        if (slbType === '0') {
            isPublicAddress = false;
        }
        currObj = global.selectObj;
        currObj.data.openList.isPublicAddress = isPublicAddress;
        canFunc.saveHistory();
    },
    addSlb: function (e, obj) {
        var backPort, currObj, ecsObj, frontPort, isModal, isNew, isSucc, lineId, lis, oldListenObj, protocol, slbObj;
        isModal = false;
        isNew = true;
        if (obj) {
            isModal = true;
            lis = $('input[name=rd_listen]:checked').val();
            isNew = lis === 'old' ? false : true;
            if (isNew) {
                protocol = $('input[name=setSlbPortsOption]:checked').val();
                frontPort = $('#slb_frontport1').val();
                backPort = $('#slb_backport1').val();
                if (!protocol) {
                    $('#modal-slb-port-msg').html('选择SLB服务协议').show();
                    return;
                }
                if ($.trim(frontPort) === '' || $.trim(backPort) === '') {
                    $('#modal-slb-port-msg').html('端口不能为空').show();
                    return;
                }
                if ((isNaN(+frontPort)) || isNaN(+backPort)) {
                    $('#modal-slb-port-msg').html('端口必须为数字').show();
                    return;
                }
                if (frontPort < 1 || frontPort > 65535 || backPort < 1 || backPort > 65535) {
                    $('#modal-slb-port-msg').html('端口必须在1~65535之间').show();
                    return;
                }
            } else {
                isNew = false;
                oldListenObj = $('input[name=oldListenList]:checked');
                if (oldListenObj.length <= 0) {
                    $('#modal-slb-port-msg').html('选择端口').show();
                    return;
                }
                protocol = oldListenObj.data('proto');
                frontPort = oldListenObj.data('lis');
                backPort = oldListenObj.data('backlis');
            }
            currObj = obj;
        } else {
            protocol = $('input[name=slb-protocol]:checked').val();
            frontPort = $('#slb_frontport').val();
            backPort = $('#slb_backport').val();
            currObj = global.selectObj;
            if ($.trim(frontPort) === '' || $.trim(backPort) === '') {
                $('#slb-port-msg').html('端口不能为空').slideDown();
                $('#addslb-tip').slideUp();
                return;
            }
            if ((isNaN(+frontPort)) || isNaN(+backPort)) {
                $('#slb-port-msg').html('端口必须为数字').slideDown();
                $('#addslb-tip').slideUp();
                return;
            }
            if (frontPort < 1 || frontPort > 65535 || backPort < 1 || backPort > 65535) {
                $('#slb-port-msg').html('端口必须在1~65535之间').slideDown();
                $('#addslb-tip').slideUp();
                return;
            }
            $('#slb-port-msg').html('').slideUp();
        }
        isSucc = canFunc.addSlbData(protocol, frontPort, backPort, currObj, isNew, isModal);
        if (isSucc && isModal) {
            $('#modal-slb-port-msg').html('').hide();
            slbObj = layer.find("#" + ($('#com-sid').val()))[0];
            ecsObj = layer.find("#" + ($('#com-eid').val()))[0];
            lineId = $('#com-lid').val();
            canFunc.drawLine(slbObj, ecsObj, lineId);
            canFunc.saveHistory();
            canFunc.editSlbBackendServer(slbObj, ecsObj, protocol, frontPort, backPort);
            $('#setSlbPorts').modal('hide');
            currObj = global.selectObj;
            layer.batchDraw();
        }
    },
    editSlbBackendServer: function (slbObj, ecsObj, protocol, listenerPort, backendServerPort) {
        if (ecsObj.kind === 'layer') {
            canFunc.editSlbBackendServerPortInLayer(slbObj, ecsObj.getId(), protocol, listenerPort, backendServerPort);
        } else if (ecsObj.kind === 'ecs') {
            canFunc.editSlbBackendServerPort(slbObj, ecsObj.getId(), protocol, listenerPort, backendServerPort);
        }
    },
    editSlbBackendServerPortInLayer: function (slbObj, layerId, protocol, listenerPort, backendServerPort) {
        var ecsId, ecsIdList, _ecsObj;
        ecsIdList = data.ecs;
        for (ecsId in ecsIdList) {
            _ecsObj = layer.find("#" + ecsId)[0];
            if (_ecsObj.getParent().getId() === layerId) {
                canFunc.editSlbBackendServerPort(slbObj, _ecsObj.getId(), protocol, listenerPort, backendServerPort);
            }
        }
    },
    editSlbBackendServerPort: function (slbObj, ecsId, protocol, listenerPort, backendServerPort) {
        var bs, bsArr, _i, _len;
        bsArr = slbObj.data.openList.backendServer;
        for (_i = 0, _len = bsArr.length; _i < _len; _i++) {
            bs = bsArr[_i];
            if (bs.serverId === ecsId) {
                bs.protocol = protocol;
                bs.listenerPort = Number(listenerPort);
                bs.backendServerPort = Number(backendServerPort);
                break;
            }
        }
    },
    addSlbData: function (protocol, frontPort, backPort, currObj, isNew, isModal) {
        var listenObj, listenObjArr, tempBackPort, tempListenerPort, _i, _len;
        if (isNew) {
            if (currObj.data.openList.listener) {
                listenObjArr = currObj.data.openList.listener;
            } else {
                listenObjArr = [];
                currObj.data.openList.listener = [];
            }
            tempBackPort = {};
            tempListenerPort = {};
            for (_i = 0, _len = listenObjArr.length; _i < _len; _i++) {
                listenObj = listenObjArr[_i];
                tempBackPort[listenObj['backendServerPort']] = true;
                tempListenerPort[listenObj['listenerPort']] = true;
            }
            if (tempListenerPort[frontPort] || tempBackPort[backPort]) {
                if (isModal) {
                    $('#modal-slb-port-msg').html('SLB服务端口或后端服务器端口已被占用').show();
                } else {
                    $('#addslb-tip').slideDown();
                }
                return false;
            }
            listenObjArr.add({
                backendServerPort: Number(backPort),
                listenerPort: Number(frontPort),
                protocol: protocol,
                scheduler: 'wrr',
                status: 'running',
                healthCheck: 'on',
                listenerStatus: 'inactive',
                interval: 2,
                stickySession: 'on',
                stickySessionType: 'insert',
                uri: '/',
                unhealthyThreshold: 3,
                xForwardedFor: 'off',
                cookie: '',
                domain: '',
                healthCheckTimeout: 5,
                healthyThreshold: 3,
                cookieTimeout: 86400,
                connectTimeout: 5,
                persitenceTimeout: 0,
                connectPort: Number(backPort)
            });
            currObj.data.openList.listener = [];
            currObj.data.openList.listener.add(listenObjArr);
            domFunc.addSlbHtml(protocol, frontPort, backPort);
        }
        $('#addslb-tip').slideUp();
        $('#slb-port-msg').html('').slideUp();
        $('#modal-slb-port-msg').html('').hide();
        $('#setSlbPorts').modal('hide');
        return true;
    },
    onSetSlbPortsConfrim: function () {
        var currObj, currObjId;
        currObjId = $('#slbToEcsObjId').val();
        currObj = layer.find("#" + currObjId)[0];
        canFunc.addSlb(1, currObj);
        canFunc.onSingleClick(currObj.kind, currObj);
    },
    returnCustomTplHtml: function (kind, ctName, id) {
        var customTplHtml;
        id = ("cus-tpl-" + id) || '';
        switch (kind) {
            case 'ecs':
                customTplHtml = '<div class="com-div" id=' + id + '> <div src=""  class="com-tpl com-ecs need-tip dnone" data-toggle="tooltip" data-category="cus-tpl" data-kind="com" data-subtype="ecs" data-placement="right" title="" data-original-title=\'<div class="tip-wrap"><p>' + ctName + '</p></div>\'><div class="cus-tpl-ico cus-tpl-close"></div><div class="cus-tpl-ico cus-tpl-ecs"></div></div> </div>';
                break;
            case 'rds':
                customTplHtml = '<div class="com-div" id=' + id + '> <div src=""  class="com-tpl com-rds need-tip dnone" data-toggle="tooltip" data-category="cus-tpl" data-kind="com" data-subtype="rds" data-placement="right" title="" data-original-title=\'<div class="tip-wrap"><p>' + ctName + '</p></div>\'><div class="cus-tpl-ico cus-tpl-close"></div><div class="cus-tpl-ico cus-tpl-rds"></div></div> </div>';
                break;
            case 'layer':
                customTplHtml = '<div class="com-div" id=' + id + '> <div src=""  class="com-tpl com-layer need-tip dnone" data-toggle="tooltip" data-category="cus-tpl" data-kind="layer" data-subtype="layer" data-placement="right" title="" data-original-title=\'<div class="tip-wrap"><p>' + ctName + '</p></div>\'><div class="cus-tpl-ico cus-tpl-close"></div><div class="cus-tpl-ico cus-tpl-layer"></div></div> </div>';
                break;
            default:
                return;
        }
        return customTplHtml;
    },
    destroyObj: function (node) {
        var findNode, _id, _self;
        if (node != null) {
            if (typeof node === 'string') {
                findNode = layer.find("#" + node);
                if (findNode[0]) {
                    _self = findNode[0];
                } else {
                    return;
                }
            } else {
                _self = node;
            }
        } else if (Object.size(global.selectObj) > 0) {
            _self = global.selectObj;
        } else {
            return;
        }
        if (_self.kind === 'layer') {
            _id = _self.data.id;
            canFunc.destroyLayer(_self, _id);
        } else {
            canFunc.destroyCom(_self, _self.data.id);
        }
        navImg.init();
        layer.batchDraw();
    },
    destroyCom: function (_self, _id, isLayer) {
        var entitiesArr, i, line, lineArr, obj, _i, _j, _len, _len1;
        delete data[_self.kind][_id];
        canFunc.comReturnList(_self);
        if (isLayer) {
            entitiesArr = entities.layers;
        } else {
            entitiesArr = entities.components;
        }
        for (i = _i = 0, _len = entitiesArr.length; _i < _len; i = ++_i) {
            obj = entitiesArr[i];
            if (obj.getId() === _id) {
                entitiesArr.splice(i, 1);
                if (!isLayer && obj.parent.kind === 'layer') {
                    data.layer[obj.parent.getId()].children.remove(function (n) {
                        return n === _id;
                    });
                }
                lineArr = canFunc.hasLineOnCom(obj);
                for (_j = 0, _len1 = lineArr.length; _j < _len1; _j++) {
                    line = lineArr[_j];
                    canFunc.delLineObj(line);
                }
                break;
            }
        }
        if (global.selectObj === _self) {
            global.selectObj = null;
        }
        _self.destroy();
        domFunc.onRemarkCancelClick();
        domFunc.displayComListNum();
    },
    destroyLayer: function (_self, _id) {
        var subCom, _i, _len, _ref;
        _ref = _self.getSubCom();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            subCom = _ref[_i];
            canFunc.destroyCom(subCom, subCom.data.id);
        }
        canFunc.destroyCom(_self, _id, true);
    },
    initEvent: function () {
        var ipadTutorail2, postData, _archiname, _structid;
        ipadTutorail2 = $('.ipad-tutorail-2');
        if (tools.getQueryString('sid')) {
            _structid = tools.getQueryString('sid') || $.cookie('structid');
            postData = {
                id: _structid
            };
            tools.post('/masterplate/get', postData, canFunc.setStage);
        } else if ($.cookie('isEdit') && window.localStorage) {
            //canFunc.setStage($.evalJSON(localStorage.lastStep));
        } else if ($.cookie('archiname')) {
            _archiname = $.cookie('archiname');
            postData = {
                mail: $.cookie('loginMail'),
                _id: $.cookie('archiid')
            };
            tools.post('/struct/get', postData, canFunc.setStage);
        } else if (tools.getQueryString('sid') || $.cookie('structid')) {
            _structid = tools.getQueryString('sid') || $.cookie('structid');
            postData = {
                id: _structid
            };
            tools.post('/masterplate/get', postData, canFunc.setStage);
        }
        if (navigator.platform === 'iPad' && !$.cookie('isread_Tuto2')) {
            ipadTutorail2.show();
        }
        if ($.cookie('loginMail')) {
            $('#userinfo').text($.cookie('loginMail'));
        }
        ipadTutorail2.on('touchstart', function () {
            ipadTutorail2.hide();
            return $.cookie('isread_Tuto2', 1, {
                expires: 900
            });
        });
        $.cookie('isEdit', 1);
        setTimeout(function () {
            canFunc.saveHistory();
            domFunc.getSnapshotsList();
        }, 500);
    },
    setStage: function (rs) {
        var arr_infos, childId, childInLayer, comAttr, comId, comKind, comObj, endPos, isHistory, layerId, layerObj, lineId, lineObj, newCom, parentLayer, rs_info, selectComObjId, startPos, _i, _j, _len, _len1, _opl, _pos, _ref, _ref1, _ref2, _ref3, _rs_category, _rs_description, _rs_level, _rs_name;
        rs_info = rs.infos || rs.data;
        if (!rs_info) {
            $.notify({
                type: 'warning',
                msg: '数据有误,请刷新后重试'
            });
            return;
        }
        if (rs.name) {
            $('#structname').text(decodeURIComponent(rs.name));
            $('#structname').attr('title', decodeURIComponent(rs.name));
            $('#structNameInput').val(decodeURIComponent(rs.name));
        }
        isHistory = global.historys.length || 0;
        if (rs.level || $.cookie('model-level')) {
            _rs_category = rs.category ? rs.category : $.cookie('model-category-name');
            _rs_name = rs.name ? rs.name : $.cookie('model-name');
            _rs_description = rs.description ? rs.description : $.cookie('model-description');
            _rs_level = rs.level ? rs.level : $.cookie('model-level');
            _rs_category = decodeURIComponent(_rs_category);
            _rs_name = decodeURIComponent(_rs_name);
            _rs_description = decodeURIComponent(_rs_description);
            $.cookie('model-category-name', _rs_category);
            $.cookie('model-name', _rs_name);
            $.cookie('model-description', _rs_description);
            $.cookie('model-level', _rs_level);
            $('#model-category-name').val(_rs_category);
            $('#model-name').val(_rs_name);
            $('#model-description').val(_rs_description);
            $('#model-level').val(_rs_level);
        }
        arr_infos = $.evalJSON(decodeURIComponent(rs_info));
        canFunc.initClearStage();
        for (comKind in arr_infos) {
            comObj = arr_infos[comKind];
            if (comKind === 'line') {
                continue;
            }
            for (comId in comObj) {
                comAttr = comObj[comId];
                domFunc.openDiskListAdd(comAttr.maps);
                newCom = new comFactory(comAttr);
                layer.add(newCom);
                newCom.cloneData(comAttr);
                newCom.data.name = comAttr.name;
                newCom.data.remark = comAttr.remark;
                if (newCom.data.openList) {
                    if (tools.isMapped(newCom.data)) {
                        if (global.isFirstLoad) {
                            $.cookie('savetype', 'getallcom');
                            if (tools.checkLogin()) {
                                $.removeCookie('savetype');
                                domFunc.onComListModelBtnClick(1, true);
                            }
                            global.isFirstLoad = false;
                        }
                        selectComObjId = '';
                        switch (newCom.kind) {
                            case 'ecs':
                                _ref = newCom.data.openLists;
                                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                    _opl = _ref[_i];
                                    global.selectComObjList[_opl.instanceId] = _opl;
                                    newCom.setStatusStyle('Unbound');
                                }
                                break;
                            case 'rds':
                                selectComObjId = newCom.data.openList.dbInstanceId;
                                break;
                            case 'slb':
                                selectComObjId = newCom.data.openList.loadBalancerId;
                                break;
                            case 'oss':
                                selectComObjId = newCom.data.openList.bucketName;
                        }
                        if (newCom.kind !== 'ecs') {
                            global.selectComObjList[selectComObjId] = newCom.data.openList;
                            newCom.setStatusStyle('Unbound');
                        }
                    }
                }
            }
        }
        _ref1 = arr_infos.layer;
        for (layerId in _ref1) {
            layerObj = _ref1[layerId];
            _ref2 = layerObj.children;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                childId = _ref2[_j];
                parentLayer = layer.find("#" + layerId)[0];
                childInLayer = layer.find("#" + childId)[0];
                childInLayer.cMoveTo(parentLayer);
                console.log(childInLayer.data.x, childInLayer.data.y);
                childInLayer.setAbsPos(childInLayer.data.x, childInLayer.data.y, isHistory);
            }
        }
        if (localStorage.stageScale) {
            canFunc.setStageScale(localStorage.stageScale);
            _pos = $.evalJSON(localStorage.stagePosition);
            stage.setPosition(_pos.x, _pos.y);
            canFunc.reDrawBackLayer();
        }
        _ref3 = arr_infos.line;
        for (lineId in _ref3) {
            lineObj = _ref3[lineId];
            startPos = layer.find("#" + lineObj.startPos)[0];
            endPos = layer.find("#" + lineObj.endPos)[0];
            canFunc.drawLine(startPos, endPos, lineId, null, 1);
            layer.find("#" + lineId)[0].setColor(lineObj.lineType);
            data.line[lineId].lineType = lineObj.lineType;
            data.line[lineId].name = lineObj.name;
            data.line[lineId].desc = lineObj.desc;
        }
        domFunc.setNewRightBottom();
        domFunc.showRemarkWithoutSaveHistory(global.selectObj);
        domFunc.displayComListNum();
        domFunc.getSecgroupList();
        navImg.init();
        if ($.cookie('isEdit' || $.cookie('archiname' || $.cookie('structid')))) {
            tools.restoreStagePos();
        }
        canFunc.saveHistory();
    },
    onArchitecturePreview: function () {
        $('#mypreviewModalLabel').text('架构清单');
        $('#preview .nav').show();
        $('#export-xls,#task-confirm-btn').hide();
        $('#download-pic-link').show();
        domFunc.onRightArrowHide();
        canFunc.performArchitecturePreview();
        domFunc.createPreviewListHtml();
    },
    performArchitecturePreview: function () {
        var middleBoard, navScale, newBack, newBackBeginPos, originArea, originImg, stagePos, stageSize, waterLogo, workArea, workSize;
        layer.setAllCornersHidden();
        middleBoard = $('#middle-board');
        stageSize = {
            width: middleBoard.width() - def.stage.marginH,
            height: middleBoard.height() - def.stage.marginV
        };
        stagePos = stage.getAbsolutePosition();
        workArea = tools.getRealArea();
        workSize = {
            width: workArea.r - workArea.l,
            height: workArea.b - workArea.t
        };
        navScale = global.stageScale * Math.min(def.imgSizePre.width / workSize.width, def.imgSizePre.height / workSize.height);
        originArea = {
            x: workArea.l + stagePos.x,
            y: workArea.t + stagePos.y
        };
        newBackBeginPos = {
            x: workArea.l,
            y: workArea.t
        };
        layer.setScale(1);
        newBack = new kk.Rect({
            x: newBackBeginPos.x,
            y: newBackBeginPos.y,
            width: workSize.width,
            height: workSize.height,
            fill: '#fff'
        });
        waterLogo = new kk.Image({
            image: global.images.logoGray,
            x: newBackBeginPos.x + workSize.width - 147,
            y: newBackBeginPos.y + workSize.height - 38,
            opacity: 0.4
        });
        layer.add(newBack);
        layer.add(waterLogo);
        newBack.moveToBottom();
        layer.batchDraw();
        originImg = layer.toImage({
            x: originArea.x,
            y: originArea.y,
            width: workSize.width,
            height: workSize.height,
            callback: function (img) {
                var _href, _link;
                canFunc.setStageScale(global.stageScale);
                newBack.destroy();
                waterLogo.destroy();
                _href = img.src.replace(/data:[^;]+;/, 'data:application/x-png;');
                _link = '';
                $('#download-pic-link').attr('href', _href);
                $('#preview-pic').html(_link);
                $('#preview-pic').append('<div style="margin-top:0px;text-align:center;"></div>');
                $('#preview-pic div').append(img).find(':first-child').css({
                    width: img.width,
                    height: 'auto',
                    maxWidth: '100%'
                });
                return $('#preview-pic div').append(img);
            }
        });
    },
    setSlbListenerAttr: function (key, value, port) {
        var arr, attr, currObj, i, _i, _len;
        currObj = global.selectObj;
        arr = currObj.data.openList.listener;
        for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
            attr = arr[i];
            if (attr.listenerPort === Number(port)) {
                attr[key] = value;
                break;
            }
        }
    },
    comListAddCanvas: function (comList, isCombine, layerId, layerName, isOnNewLayer) {
        var addCanvas, addCanvas_com, com, comIndex, comLen, comListArr, com_params, currLayerName, ecsArr1, ecsArr2, hasLineArr, height, heightTime, indexArr, isAddCanvas, isAddCanvas_com, layerAbsPos, newComObj, newLayerObj, overObj, overObj_com, params, pos_param, pos_x_t, pos_y_t, temp_com_params, tmpArr, tmpStatus, tmp_overObjAbsPos, width, widthTime, x_count, _bs, _bsindex, _cla, _claIndex, _com, _ea, _eaIndex, _ecs, _ecsObj, _ecsObjArr, _ecscom, _ecscomIndex, _ecsid, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _o, _ol, _olindex, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _slb, _slbId, _slbObj, _tmpecscomIndex;
        global.isFirstLoad = false;
        comListArr = comList;
        if (isCombine) {
            ecsArr1 = [];
            ecsArr2 = [];
            indexArr = [];
            for (_i = 0, _len = comListArr.length; _i < _len; _i++) {
                _com = comListArr[_i];
                if (_com.type === 'ecs') {
                    ecsArr1.push(_com);
                }
            }
            for (_ecscomIndex = _j = 0, _len1 = ecsArr1.length; _j < _len1; _ecscomIndex = ++_j) {
                _ecscom = ecsArr1[_ecscomIndex];
                tmpArr = [];
                if ($.inArray(_ecscomIndex, indexArr) === -1) {
                    tmpArr.push(_ecscom);
                    indexArr.push(_ecscomIndex);
                    if ((_ecscomIndex + 1) <= ecsArr1.length - 1) {
                        for (_tmpecscomIndex = _k = _ref = _ecscomIndex + 1, _ref1 = ecsArr1.length - 1; _ref <= _ref1 ? _k <= _ref1 : _k >= _ref1; _tmpecscomIndex = _ref <= _ref1 ? ++_k : --_k) {
                            if (canFunc.isAttrsSame(_ecscom.info, ecsArr1[_tmpecscomIndex].info)) {
                                tmpArr.push(ecsArr1[_tmpecscomIndex]);
                                indexArr.push(_tmpecscomIndex);
                            }
                        }
                    }
                    ecsArr2.push(tmpArr);
                }
            }
            for (_claIndex = _l = comListArr.length - 1; _l >= 0; _claIndex = _l += -1) {
                _cla = comListArr[_claIndex];
                if (_cla.type === 'ecs') {
                    comListArr.splice(_claIndex, 1);
                }
            }
            for (_eaIndex = _m = 0, _len2 = ecsArr2.length; _m < _len2; _eaIndex = ++_m) {
                _ea = ecsArr2[_eaIndex];
                comListArr.splice(_eaIndex, 0, _ea);
            }
        }
        newLayerObj = {};
        currLayerName = layerName ? layerName : '未命名层';
        widthTime = 1;
        heightTime = 1;
        comLen = comListArr.length;
        if ((comLen / 5) >= 1) {
            heightTime = comLen % 5 >= 0 ? Math.floor(comLen / 5 + 1) : Math.floor(comLen / 5);
        }
        if (heightTime > 1) {
            widthTime = 5;
        } else {
            if ((comLen % 5) > 0) {
                widthTime = comLen % 5;
            }
        }
        width = 120 * widthTime + 20;
        height = 130 * heightTime + 20;
        pos_param = {
            x: 80,
            y: 80,
            width: width > 400 ? width : 400,
            height: height > 240 ? height : 240
        };
        if (isOnNewLayer) {
            while (true) {
                isAddCanvas = impact.layerIsOverLayer(pos_param, 1);
                addCanvas = isAddCanvas.isOver;
                isAddCanvas_com = impact.layerIsOverCom(pos_param, 1);
                addCanvas_com = isAddCanvas_com.isOver;
                if (addCanvas) {
                    overObj = isAddCanvas.overObj;
                    tmp_overObjAbsPos = overObj.getAbsolutePosition();
                    pos_param.x = (tmp_overObjAbsPos.x + overObj.data.width) + 30;
                } else if (addCanvas_com) {
                    overObj_com = isAddCanvas_com.overObj;
                    tmp_overObjAbsPos = overObj_com.getAbsolutePosition();
                    pos_param.x = (tmp_overObjAbsPos.x + def.component.outerWidth) + 30;
                } else {
                    break;
                }
            }
            params = {
                kind: 'layer',
                x: pos_param.x,
                y: pos_param.y,
                id: layerId,
                name: currLayerName,
                width: pos_param.width,
                height: pos_param.height
            };
            newLayerObj = new comFactory(params);
            layer.add(newLayerObj);
            newLayerObj.setAbsPos(pos_param.x, pos_param.y);
        } else {
            newLayerObj = layer.find("#" + layerId)[0];
        }
        newLayerObj.fire('dragstart');
        newLayerObj.fire('dragend');
        for (comIndex = _n = 0, _len3 = comListArr.length; _n < _len3; comIndex = ++_n) {
            com = comListArr[comIndex];
            if (isOnNewLayer) {
                x_count = 5;
            } else {
                x_count = Math.floor((newLayerObj.data.width - 110) / 10);
            }
            pos_y_t = Math.floor(comIndex / x_count);
            pos_x_t = comIndex % x_count;
            if (com.length) {
                temp_com_params = canFunc.setEcssData(com);
            } else if (com.type === 'ecs') {
                temp_com_params = canFunc.setEcssData([com]);
            } else {
                temp_com_params = canFunc.setComData(com);
            }
            com_params = temp_com_params;
            newComObj = new comFactory(com_params);
            layer.add(newComObj);
            newComObj.setData(com_params);
            newComObj.cloneData(newComObj.data);
            domFunc.showRemarkWithoutSaveHistory(newComObj);
            newComObj.cMoveTo(newLayerObj);
            if (newComObj.kind === 'ecs') {
                newComObj.setStatusStyle(newComObj.data.openList.status);
            } else {
                newComObj.setStatusStyle('Running');
            }
            layerAbsPos = newLayerObj.getAbsolutePosition();
            if (isOnNewLayer) {
                newComObj.setAbsPos((def.component.outerWidth + 20) * pos_x_t + layerAbsPos.x + 10, (def.component.outerHeight + 20) * pos_y_t + layerAbsPos.y + 30);
            } else {
                newComObj.setAbsPos(10 + ((pos_x_t * 10) + layerAbsPos.x), 10 + ((pos_y_t * 10) + layerAbsPos.y));
            }
        }
        tmpStatus = '';
        _ref2 = data.ecs;
        for (_ecsid in _ref2) {
            _ecs = _ref2[_ecsid];
            if (_ecs.openLists.length > 1) {
                _ref3 = _ecs.openLists;
                for (_olindex = _o = 0, _len4 = _ref3.length; _o < _len4; _olindex = ++_o) {
                    _ol = _ref3[_olindex];
                    if (_olindex === 0) {
                        tmpStatus = _ol.status;
                    }
                    if (tmpStatus !== _ol.status) {
                        layer.find("#" + _ecsid)[0].setStatusStyle('');
                        break;
                    }
                }
            }
        }
        _ref4 = data.slb;
        for (_slbId in _ref4) {
            _slb = _ref4[_slbId];
            _slbObj = layer.find("#" + _slbId)[0];
            if (_slb.openList.isOpen) {
                _ref5 = _slb.openList.backendServer;
                for (_bsindex = _p = _ref5.length - 1; _p >= 0; _bsindex = _p += -1) {
                    _bs = _ref5[_bsindex];
                    _ecsObjArr = layer.find("#" + (tools.getNodeIdByInstanceId(_bs.serverId)));
                    if (_ecsObjArr.length > 0) {
                        _ecsObj = _ecsObjArr[0];
                        hasLineArr = canFunc.hasLineOnCom(_slbObj, _ecsObj);
                        if (hasLineArr.length === 0) {
                            _slb.openList.backendServer.splice(_bsindex, 1);
                            canFunc.drawLine(_ecsObj, _slbObj, 'line' + tools.rand(), Number(_bs.weight));
                        }
                    }
                }
            }
        }
        newLayerObj.showMyCorners();
        domFunc.setNewRightBottom();
        domFunc.getSnapshotsList();
        navImg.init();
        canFunc.saveHistory();
    },
    isAttrsSame: function (ecsObj1, ecsObj2) {
        var bandWidthIn1, bandWidthIn2, bandWidthOut1, bandWidthOut2, cpu_mem1, cpu_mem2, disk1, disk2, imageId1, imageId2, internetChargeType1, internetChargeType2, isSame, regionId1, regionId2, securityGroupId1, securityGroupId2, zoneId1, zoneId2;
        isSame = true;
        cpu_mem1 = ecsObj1.InstanceType;
        cpu_mem2 = ecsObj2.InstanceType;
        bandWidthIn1 = ecsObj1.InternetMaxBandwidthIn;
        bandWidthIn2 = ecsObj2.InternetMaxBandwidthIn;
        bandWidthOut1 = ecsObj1.InternetMaxBandwidthOut;
        bandWidthOut2 = ecsObj2.InternetMaxBandwidthOut;
        internetChargeType1 = ecsObj1.InternetChargeType;
        internetChargeType2 = ecsObj2.InternetChargeType;
        securityGroupId1 = ecsObj1.SecurityGroupIds[0];
        securityGroupId2 = ecsObj2.SecurityGroupIds[0];
        imageId1 = ecsObj1.ImageId;
        imageId2 = ecsObj2.ImageId;
        regionId1 = ecsObj1.RegionId;
        regionId2 = ecsObj2.RegionId;
        zoneId1 = ecsObj1.zoneId;
        zoneId2 = ecsObj2.zoneId;
        disk1 = ecsObj1.Disk.sort().toString();
        disk2 = ecsObj2.Disk.sort().toString();
        if ((cpu_mem1 !== cpu_mem2) || (bandWidthIn1 !== bandWidthIn2) || (bandWidthOut1 !== bandWidthOut2) || (internetChargeType1 !== internetChargeType2) || (securityGroupId1 !== securityGroupId2) || (imageId1 !== imageId2) || (regionId1 !== regionId2) || (zoneId1 !== zoneId2) || (disk1 !== disk2)) {
            isSame = false;
        }
        return isSame;
    },
    setEcssData: function (data_com_arr) {
        var c_m, com, data_com, data_com_index, data_com_info, disks, isSys, temp_com_params, _d, _disks, _dsk, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _tempDisk;
        temp_com_params = {
            kind: data_com_arr[0].type,
            amount: data_com_arr.length
        };
        com = data_com_arr[0].info;
        if (data_com_arr.length > 1) {
            temp_com_params.name = com.InstanceName + tools.rand();
        } else {
            temp_com_params.name = com.InstanceName;
            global.selectComObjList[com.InstanceId] = com;
        }
        temp_com_params.osVal = com.ImageId;
        temp_com_params.bandWidth = com.InternetMaxBandwidthOut;
        c_m = def.counterInstanceType[com.InstanceType].split('-');
        temp_com_params.cpu = +c_m[0];
        temp_com_params.memory = +c_m[1] * 1024;
        if (com.InternetChargeType === 'PayByTraffic') {
            temp_com_params.chargeType = 2;
        }
        disks = [];
        _ref = com.Disk;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _d = _ref[_i];
            isSys = false;
            if (_d.Type === 'system') {
                isSys = true;
            }
            _tempDisk = {
                diskId: _d.DiskId,
                category: _d.Category,
                isOpen: true,
                size: _d.Size,
                type: _d.Type,
                isSystem: isSys
            };
            disks.push(_tempDisk);
            _tempDisk.instanceId = com.InstanceId;
            if (_d.Type !== 'system') {
                global.openDiskList[_d.DiskId] = _tempDisk;
            }
        }
        temp_com_params.disks = disks;
        temp_com_params.status = com.Status;
        temp_com_params.openLists = [];
        temp_com_params.maps = {};
        if (data_com_arr.length > 0) {
            for (data_com_index = _j = 0, _len1 = data_com_arr.length; _j < _len1; data_com_index = ++_j) {
                data_com = data_com_arr[data_com_index];
                data_com_info = data_com.info;
                global.selectComObjList[data_com_info.InstanceId] = {};
                global.selectComObjList[data_com_info.InstanceId] = data_com_info;
                _disks = [];
                _ref1 = data_com_info.Disk;
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                    _dsk = _ref1[_k];
                    isSys = false;
                    if (_dsk.Type === 'system') {
                        isSys = true;
                    }
                    _tempDisk = {
                        diskId: _dsk.DiskId,
                        category: _dsk.Category,
                        isOpen: true,
                        size: _dsk.Size,
                        type: _dsk.Type,
                        isSystem: isSys
                    };
                    _disks.push(_tempDisk);
                    _tempDisk.instanceId = data_com_info.InstanceId;
                    if (_dsk.Type !== 'system') {
                        global.openDiskList[_dsk.DiskId] = _tempDisk;
                    }
                }
                temp_com_params.maps[data_com_info.InstanceId] = data_com_info;
                temp_com_params.openLists.push({
                    isOpen: true,
                    instanceId: data_com_info.InstanceId,
                    instanceName: data_com_info.InstanceName,
                    instanceType: data_com_info.InstanceType,
                    hostName: data_com_info.HostName,
                    publicIpAddress: data_com_info.PublicIpAddress,
                    innerIpAddress: data_com_info.InnerIpAddress,
                    internetMaxBandwidthIn: data_com_info.InternetMaxBandwidthIn,
                    internetMaxBandwidthOut: data_com_info.InternetMaxBandwidthOut,
                    internetChargeType: data_com_info.InternetChargeType,
                    securityGroupId: data_com_info.SecurityGroupIds,
                    securityControl: data_com_info.SecurityControl,
                    vlanId: data_com_info.VlanId,
                    imageId: data_com_info.ImageId,
                    regionId: data_com_info.RegionId,
                    status: data_com_info.Status,
                    zoneId: data_com_info.ZoneId,
                    disks: _disks
                });
            }
        }
        temp_com_params.openList = temp_com_params.openLists[0];
        temp_com_params.securityGroupId = Object.clone(data_com_info.SecurityGroupIds, 1);
        return temp_com_params;
    },
    setComData: function (data_com) {
        var com, dbp, dbs, temp_com_params, tmpBs, tmpL, users, _bs, _db, _dbp, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _protocol, _ref, _ref1, _ref2, _ref3, _ref4, _user;
        com = data_com.info;
        temp_com_params = {
            kind: data_com.type,
            maps: {}
        };
        switch (data_com.type) {
            case 'rds':
                global.selectComObjList[com.DBInstanceId] = {};
                global.selectComObjList[com.DBInstanceId] = com;
                temp_com_params.name = com.DBInstanceId;
                temp_com_params.dbType = com.Engine.toLowerCase();
                temp_com_params.dbVersion = com.EngineVersion;
                temp_com_params.storage = com.DBInstanceStorage;
                dbs = [];
                if (com.Databases) {
                    _ref = com.Databases;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        _db = _ref[_i];
                        dbs.push({
                            charset: _db.CharacterSetName,
                            description: _db.DBDescription,
                            dbInstanceId: _db.DBInstanceId,
                            dbname: _db.DBName,
                            dbstatus: _db.DBStatus,
                            engine: _db.Engine
                        });
                    }
                }
                users = [];
                if (com.Users) {
                    _ref1 = com.Users;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                        _user = _ref1[_j];
                        dbp = [];
                        _ref2 = _user.DatabasePrivilege;
                        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                            _dbp = _ref2[_k];
                            dbp.push({
                                accountPrivilege: _dbp.AccountPrivilege,
                                dbName: _dbp.DBName
                            });
                        }
                        users.push({
                            accountName: _user.AccountName,
                            accountDescription: _user.AccountDescription,
                            accountStatus: _user.AccountStatus,
                            dbInstanceId: _user.DBInstanceId,
                            databasePrivilege: dbp
                        });
                    }
                }
                temp_com_params.openList = {
                    isOpen: true,
                    accountMaxQuantity: com.AccountMaxQuantity,
                    connectionString: com.ConnectionString,
                    creationTime: com.CreationTime,
                    dbInstanceClass: com.DBInstanceClass,
                    dbInstanceDescription: com.DBInstanceDescription,
                    dbInstanceId: com.DBInstanceId,
                    dbInstanceNetType: com.DBInstanceNetType,
                    dbInstanceStatus: com.DBInstanceStatus,
                    dbInstanceStorage: com.DBInstanceStorage,
                    dbMaxQuantity: com.DBMaxQuantity,
                    engine: com.Engine,
                    engineVersion: com.EngineVersion,
                    lockMode: com.LockMode,
                    lockReason: com.LockReason,
                    port: com.Port,
                    regionId: com.RegionId,
                    tempDBInstanceId: com.TempDBInstanceId,
                    databases: dbs,
                    users: users
                };
                temp_com_params.maps[com.DBInstanceId] = com;
                break;
            case 'slb':
                global.selectComObjList[com.LoadBalancerId] = {};
                global.selectComObjList[com.LoadBalancerId] = com;
                temp_com_params.name = com.LoadBalancerName;
                tmpBs = [];
                if (com.BackendServer) {
                    _ref3 = com.BackendServer;
                    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                        _bs = _ref3[_l];
                        tmpBs.push({
                            serverId: _bs.ServerId,
                            weight: _bs.Weight
                        });
                    }
                }
                tmpL = [];
                if (com.Listener) {
                    _ref4 = com.Listener;
                    for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
                        _l = _ref4[_m];
                        _protocol = 'http';
                        if (_l.URI === void 0) {
                            _protocol = 'tcp';
                        }
                        tmpL.push({
                            backendServerPort: _l.BackendServerPort,
                            listenerPort: _l.ListenerPort,
                            protocol: _protocol,
                            listenerStatus: _l.Status,
                            interval: _l.Interval,
                            scheduler: _l.Scheduler,
                            status: _l.Status,
                            healthCheck: _l.HealthCheck,
                            stickySession: _l.StickySession,
                            stickySessionType: _l.StickySessionapiType,
                            uri: _l.URI,
                            unhealthyThreshold: _l.UnhealthyThreshold,
                            xForwardedFor: _l.XForwardedFor,
                            cookie: _l.Cookie,
                            domain: _l.Domain,
                            healthCheckTimeout: _l.HealthCheckTimeout,
                            healthyThreshold: _l.HealthyThreshold,
                            cookieTimeout: _l.CookieTimeout,
                            connectTimeout: _l.ConnectTimeout,
                            persitenceTimeout: _l.PersistenceTimeout,
                            connectPort: _l.ConnectPort
                        });
                    }
                }
                temp_com_params.openList = {
                    isOpen: true,
                    isPublicAddress: true,
                    loadBalancerId: com.LoadBalancerId,
                    loadBalancerName: com.LoadBalancerName,
                    loadBalancerStatus: com.LoadBalancerStatus,
                    address: com.Address,
                    regionId: com.RegionId,
                    backendServer: tmpBs,
                    listener: tmpL
                };
                temp_com_params.maps[com.LoadBalancerId] = com;
                break;
            case 'oss':
                global.selectComObjList[com.Name] = {};
                global.selectComObjList[com.Name] = com;
                temp_com_params.name = com.Name;
                temp_com_params.region = com.Location;
                temp_com_params.createTime = com.CreationDate;
                temp_com_params.id = com.Name;
                temp_com_params.openList = {
                    isOpen: true,
                    bucketName: com.Name
                };
                temp_com_params.maps[com.Name] = com;
        }
        return temp_com_params;
    },
    comReturnList: function (com) {
        var _ecs, _i, _len, _ref;
        if (Object.size(com.data.maps) > 0) {
            switch (com.kind) {
                case 'ecs':
                    if (com.data.openLists.length > 0) {
                        _ref = com.data.openLists;
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            _ecs = _ref[_i];
                            delete global.selectComObjList[_ecs.instanceId];
                        }
                    }
                    delete global.selectComObjList[com.data.openList.instanceId];
                    break;
                case 'rds':
                    delete global.selectComObjList[com.data.openList.dbInstanceId];
                    break;
                case 'slb':
                    delete global.selectComObjList[com.data.openList.loadBalancerId];
                    break;
                case 'oss':
                    delete global.selectComObjList[com.data.openList.bucketName];
            }
        }
    },
    updateDisk: function (isChargeType) {
        var diskLen, diskRows, node, totalDisk;
        node = global.selectObj;
        diskRows = $('#ecs-disk-content .disk-row,#ecs-disk-content-snapshot .disk-row');
        if (+isChargeType === 2) {
            diskRows = $('#ecs-disk-content-bw .disk-row,#ecs-disk-content-snapshot-bw .disk-row');
        }
        diskLen = diskRows.size() + 1;
        totalDisk = 0;
        diskRows.each(function (i) {
            var diskId, diskVal, findNode;
            diskVal = Math.round($(this).find('.diskinput:first').val());
            diskId = $(this).attr('id');
            findNode = node.data.disks.find(function (disk) {
                return disk.diskId.toString() === diskId;
            });
            if (findNode != null) {
                findNode.size = diskVal;
            } else {
                node.data.disks.push(new EcsDisk(false, true, diskVal, diskId));
            }
            return totalDisk += diskVal;
        });
        if (+isChargeType === 2) {
            $('#totalDisk-bw').text(totalDisk);
        } else {
            $('#totalDisk').text(totalDisk);
        }
        node.setDiskNum();
        layer.batchDraw();
    },
    onListDisk: function () {
        var basPosX, basPosY, comPos, comPosX, comPosY, disk_data, reaPosX, reaPosY, sizPosX, sizPosY, sysdisk;
        $('.disk-list').remove();
        if (global.selectObj.kind !== "ecs") {
            return;
        }
        comPos = global.selectObj.getAbsolutePosition();
        basPosX = 150;
        basPosY = 45;
        comPosX = comPos.x;
        comPosY = comPos.y;
        sizPosX = sizPosY = 80;
        reaPosX = comPosX + basPosX;
        reaPosY = comPosY + basPosY + sizPosY + 20;
        disk_data = {};
        if (data.ecs[global.selectObj.data.id].osVal.indexOf('windows') === -1) {
            sysdisk = 20;
        } else {
            sysdisk = 40;
        }
        disk_data.sys = [];
        disk_data.sys[0] = {
            size: sysdisk,
            type: "cloud",
            diskId: ""
        };
        if (data.ecs[global.selectObj.data.id].disks != null) {
            disk_data.data = data.ecs[global.selectObj.data.id].disks;
        }
        $(render.ecsListDisk(disk_data)).show().appendTo($('body'));
        $('.disk-list').css({
            top: reaPosY,
            left: reaPosX - $('.disk-list').outerWidth() / 2 + 40 + 10
        });
        $('.disk-list').on('click,touchstart', function () {
            e.stopPropagation();
            return false;
        });
    },
    showDiskList: function (self, e) {
        var currObj, disk, diskCount, diskItemHtml, diskLength, diskListWrapLastItem, diskListWrapUI, diskPopList, osBit, osVal, selfPos, tempX, tempY, _i, _len, _ref;
        currObj = global.selectObj;
        diskLength = currObj.data.disks.length;
        diskPopList = $('#diskPopList');
        diskListWrapUI = $('#diskListWrapUI');
        diskCount = $('#diskCount');
        diskCount.text(diskLength);
        diskListWrapUI.empty();
        selfPos = self.getAbsolutePosition();
        _ref = currObj.data.disks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            disk = _ref[_i];
            if (disk.isSystem) {
                osVal = tools.getOsType(currObj.data.osVal);
                osBit = tools.getOsBit(currObj.data.osVal, tools.isMapped(currObj.data));
                diskItemHtml = '<li><div class="diskListItem com-disk com-disk-ssd"><span class="com-disk-sys com-disk-' + osVal + '"></span><span class="com-disk-bit">' + osBit + 'bit</span></div></li>';
            } else {
                diskItemHtml = '<li><div class="diskListItem com-disk com-disk-' + disk.category + '"><span class="com-disk-text">' + disk.size + 'GB</span></div></li>';
            }
            diskListWrapUI.append(diskItemHtml);
            diskListWrapLastItem = diskListWrapUI.find('li:last');
            diskListWrapLastItem.data('data', disk);
        }
        if (diskLength === 1) {
            diskListWrapLastItem.css('marginRight', 0);
        }
        tempX = selfPos.x - diskPopList.width() / 2 + def.stage.marginH - 1;
        tempY = selfPos.y - diskPopList.height() - 16 + def.stage.marginV;
        diskPopList.css({
            left: tempX,
            top: tempY
        }).show();
    },
    showScriptList: function (self, e) {
        var currObj, postData;
        currObj = global.selectObj;
        postData = {
            host: currObj.data.openList.publicIpAddress
        };
        $.post('ssh/getbyip', {
            hostList: [postData]
        }, function (_data) {
            var dd, execTime, h, m, mm, script, scriptCount, scriptItemHtml, scriptLength, scriptListWrapLastItem, scriptListWrapUI, scriptPopList, selfPos, tempX, tempY, tmpTime, yy, _i, _len;
            scriptLength = _data.length;
            scriptPopList = $('#scriptPopList');
            scriptListWrapUI = $('#scriptListWrapUI');
            scriptCount = $('#scriptCount');
            scriptCount.text(scriptLength);
            scriptListWrapUI.empty();
            selfPos = self.getAbsolutePosition();
            for (_i = 0, _len = _data.length; _i < _len; _i++) {
                script = _data[_i];
                tmpTime = new Date(Number(script.execDate));
                yy = tmpTime.getFullYear();
                mm = tmpTime.getMonth() + 1;
                dd = tmpTime.getDate();
                h = tmpTime.getHours();
                m = tmpTime.getMinutes();
                execTime = yy + '/' + mm + '/' + dd + ' ' + h + ':' + m;
                scriptItemHtml = "<li><div class='scriptListItem com-script'><span class='com-script-time'>" + execTime + "</span><span class='com-script-text'>" + script.fileName + "</span></div></li>";
                scriptListWrapUI.append(scriptItemHtml);
                scriptListWrapLastItem = scriptListWrapUI.find('li:last');
                scriptListWrapLastItem.data('data', script);
            }
            tempX = selfPos.x - scriptPopList.width() / 2 + def.stage.marginH - 1;
            tempY = selfPos.y - scriptPopList.height() - 16 + def.stage.marginV;
            scriptPopList.css({
                left: tempX,
                top: tempY
            }).show();
        });
    },
    hidePopover: function (e) { },
    hideScriptPopover: function (e) {
        var popover;
        popover = $('.script-popover');
        popover.hide();
    },
    hideDiskPopover: function (e) {
        var popover;
        popover = $('.disk-popover');
        popover.hide();
    },
    maskBackLayerDestroy: function () {
        var e, _com, _entities, _i, _len, _type;
        try {
            if ($('#batchAllSelect:checked').length) {
                $('#batchAllSelect').iCheck('uncheck');
            }
            maskBackLayer.destroy();
            $('#bottom-board').stop(true, true).animate({
                'bottom': '-130px'
            }, 500);
            $('#batch-bottom-board').stop(true, true).animate({
                'bottom': '-110px'
            }, 500);
            $('#save-script-bottom-board').stop(true, true).animate({
                'bottom': '-140px'
            }, 500);
            $('.zoombtn').show();
            $('#canvasNavBtn,#enlargeBtn,#revertBtn,#narrowBtn').css({
                'color': '#789'
            });
            $('.zoombtnmask').hide();
            $('#topBarMaskDiv').remove();
            for (_type in entities) {
                _entities = entities[_type];
                for (_i = 0, _len = _entities.length; _i < _len; _i++) {
                    _com = _entities[_i];
                    if (_com.line && _com.startPos && _com.endPos) {
                        _com.line.setOpacity(1);
                    } else {
                        _com.setOpacity(1);
                    }
                }
            }
            layer.batchDraw();
        } catch (_error) {
            e = _error;
        }
        navImg.init();
    },
    onDoScriptTopBtnClick: function () {
        var com, comArr, comId, comImg, comLayer, comLine, comOther, comPos, comPosObj, com_x, com_y, i, isPublicAddress, jQBody, maskBackImage, stageHeight, stageWidth, topBarMaskDiv, _i, _len, _map, _mapid, _ref;
        if (!tools.isMapped()) {
            domFunc.onComListModelBtnClick(1, true);
            return;
        }
        global.isAgent = false;
        if ($(this).data('val') === 'agent') {
            global.isAgent = true;
        }
        global.stageScale = 1;
        canFunc.setStageScale(global.stageScale);
        jQBody = $('body');
        stageWidth = Math.max(jQBody.width(), 1024) - def.stage.marginH;
        stageHeight = Math.max(jQBody.height(), 768) - def.stage.marginV;
        window.maskBackLayer = new kk.Layer({
            x: backLayer.getX(),
            y: backLayer.getY()
        });
        maskBackImage = new kk.Image({
            id: 'maskBackGridImage',
            x: 0,
            y: 0,
            width: stageWidth / global.stageScale,
            height: stageHeight / global.stageScale,
            fill: '#000',
            opacity: 0
        });
        maskBackLayer.add(maskBackImage);
        maskBackLayer.on('click tap', function (e) {
            canFunc.maskBackLayerDestroy();
        });
        comArr = entities.components;
        comLayer = entities.layers;
        comLine = entities.lines;
        comOther = comLayer.concat(comLine);
        comArr = comArr.concat(comLayer);
        layer.setAllComCornersHidden();
        comPosObj = {};
        i = 0;
        for (_i = 0, _len = comArr.length; _i < _len; _i++) {
            com = comArr[_i];
            isPublicAddress = false;
            _ref = com.data.maps;
            for (_mapid in _ref) {
                _map = _ref[_mapid];
                if (_map.PublicIpAddress && _map.PublicIpAddress.length) {
                    isPublicAddress = true;
                }
            }
            if ((com.kind === 'ecs') && (Object.size(com.data.maps)) && isPublicAddress) {
                i++;
                comPos = com.getAbsolutePosition();
                comId = com.getId();
                com_x = comPos.x;
                com_y = comPos.y;
                comImg = com.toImage({
                    cid: comId,
                    x: com_x,
                    y: com_y,
                    width: def.component.outerWidth,
                    height: def.component.outerHeight + 25,
                    callback: function (img) {
                        var backRect, childBgWrapGroup, childWrapGroup, comGroup, comMainImage, rightTop, tempRTIcon, tmp_com;
                        comGroup = new kk.Group({
                            x: this.x,
                            y: this.y,
                            name: this.cid,
                            id: this.cid + tools.rand(),
                            originId: this.cid,
                            isLogin: false
                        });
                        backRect = new kk.Rect({
                            width: this.width,
                            height: this.height,
                            fill: "#fff",
                            opacity: 0.1
                        });
                        childBgWrapGroup = new kk.Group({
                            name: 'combg',
                            visible: true
                        });
                        childBgWrapGroup.add(backRect);
                        comGroup.add(childBgWrapGroup);
                        rightTop = new kk.Group({
                            x: def.component.rightTopCorner.x - 5,
                            y: def.component.rightTopCorner.y,
                            name: 'ecs_comcorner',
                            visible: true
                        });
                        tempRTIcon = new Image();
                        tempRTIcon.src = resources.loadImages['ecs_unlogin'];
                        rightTop.icon = new kk.Image({
                            x: def.component.rightTopCorner.icox,
                            y: def.component.rightTopCorner.icoy,
                            image: tempRTIcon,
                            width: 26,
                            height: 26
                        });
                        rightTop.add(rightTop.icon);
                        comMainImage = new kk.Image({
                            fillPatternImage: img,
                            width: this.width,
                            height: this.height
                        });
                        childWrapGroup = new kk.Group({
                            x: (this.width - def.component.width) / 2 - 10,
                            y: (this.height - def.component.height - 25) / 2 - 10
                        });
                        childWrapGroup.add(comMainImage);
                        comGroup.add(childWrapGroup);
                        comGroup.add(rightTop);
                        maskBackLayer.add(comGroup);
                        comGroup.corners = {
                            rightTop: rightTop
                        };
                        tmp_com = layer.find("#" + this.cid)[0];
                        if (tmp_com.data.openLists.length <= 1) {
                            comGroup.on('mousedown touchstart', domFunc.loginEcs);
                        } else {
                            comGroup.on('mousedown touchstart', domFunc.loginEcss);
                        }
                        navImg.init();
                        stage.batchDraw();
                    }
                });
            } else {
                if (com.line && com.startPos && com.endPos) {
                    com.line.setOpacity(0.3);
                } else {
                    com.setOpacity(0.3);
                }
                stage.batchDraw();
            }
        }
        if (i === 0) {
            $.notify({
                msg: '没有可以执行脚本的组件',
                type: 'warning'
            });
            canFunc.maskBackLayerDestroy();
            return;
        }
        stage.add(maskBackLayer);
        domFunc.onRightArrowHide();
        $('#canvasNavBtn,#enlargeBtn,#revertBtn,#narrowBtn').css({
            'color': '#ccc'
        });
        $('.zoombtnmask').show();
        topBarMaskDiv = "<div id='topBarMaskDiv' style='width:" + ($('#topbar').width()) + "px;height:" + ($('#topbar').height()) + "px;background-color:#000;opacity:0.5;position:relative;z-index:2;'></div>";
        $('#topbar').append(topBarMaskDiv);
        maskBackLayer.setAbsolutePosition(0, 0);
        global.scriptComList = {};
        if ($('#bottomBoardSaveScriptList .script-model-file').length) {
            $('#save-script-bottom-board').stop(true, true).animate({
                'bottom': '0px'
            }, 500);
        }
    },
    onDoECSBatchTopBtnClick: function () {
        var com, comArr, comArrCom, comArrLayer, comArrLine, comId, comImg, comPos, comPosObj, com_x, com_y, comheight, comwidth, ecsInLayer, i, isLayer, jQBody, maskBackImage, stageHeight, stageWidth, topBarMaskDiv, _child, _component, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
        if (!tools.isMapped()) {
            domFunc.onComListModelBtnClick(1, true);
            return;
        }
        global.stageScale = 1;
        canFunc.setStageScale(global.stageScale);
        jQBody = $('body');
        stageWidth = Math.max(jQBody.width(), 1024) - def.stage.marginH;
        stageHeight = Math.max(jQBody.height(), 768) - def.stage.marginV;
        window.maskBackLayer = new kk.Layer({
            x: backLayer.getX(),
            y: backLayer.getY()
        });
        maskBackImage = new kk.Image({
            id: 'maskBackGridImage',
            x: 0,
            y: 0,
            width: stageWidth / global.stageScale,
            height: stageHeight / global.stageScale,
            fill: '#000',
            opacity: 0
        });
        maskBackLayer.add(maskBackImage);
        maskBackLayer.on('click tap', function (e) {
            canFunc.maskBackLayerDestroy();
        });
        comArrCom = entities.components;
        comArrLayer = entities.layers;
        comArrLine = entities.lines;
        comArr = comArrLayer.concat(comArrCom);
        comArr = comArr.concat(comArrLine);
        layer.setAllLayerCornersHidden();
        layer.setAllComCornersHidden();
        comPosObj = {};
        i = 0;
        for (_i = 0, _len = comArr.length; _i < _len; _i++) {
            com = comArr[_i];
            if (((com.kind === 'ecs') && (Object.size(com.data.maps))) || (com.kind === 'layer')) {
                ecsInLayer = false;
                comwidth = def.component.outerWidth;
                comheight = def.component.outerHeight;
                isLayer = false;
                if (com.kind === 'layer') {
                    _ref = entities.components;
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        _component = _ref[_j];
                        _component.hide();
                    }
                    isLayer = true;
                    comwidth = com.data.width;
                    comheight = com.data.height;
                    _ref1 = com.children;
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                        _child = _ref1[_k];
                        if ((_child.kind === 'ecs') && (Object.size(_child.data.maps))) {
                            ecsInLayer = true;
                            break;
                        }
                    }
                    if (!ecsInLayer) {
                        com.setOpacity(0.3);
                        continue;
                    }
                } else {
                    _ref2 = entities.components;
                    for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                        _component = _ref2[_l];
                        _component.show();
                    }
                }
                i++;
                comPos = com.getAbsolutePosition();
                comId = com.getId();
                com_x = comPos.x;
                com_y = comPos.y;
                comImg = com.toImage({
                    cid: comId,
                    x: com_x,
                    y: com_y,
                    width: comwidth,
                    height: comheight,
                    isLayer: isLayer,
                    callback: function (img) {
                        var backRect, childBgWrapGroup, childWrapGroup, childWrapGroup_x, childWrapGroup_y, comGroup, comMainImage, rightTop, rightTop_x, tempRTIcon, tmp_com;
                        comGroup = new kk.Group({
                            x: this.x,
                            y: this.y,
                            name: this.cid,
                            id: this.cid + tools.rand(),
                            originId: this.cid,
                            isSelect: false,
                            isLayer: this.isLayer
                        });
                        backRect = new kk.Rect({
                            width: this.width,
                            height: this.height,
                            fill: "#fff",
                            opacity: 0.1
                        });
                        childBgWrapGroup = new kk.Group({
                            name: 'combg',
                            visible: true
                        });
                        childBgWrapGroup.add(backRect);
                        comGroup.add(childBgWrapGroup);
                        rightTop_x = this.isLayer ? this.width - 5 : def.component.rightTopCorner.x - 5;
                        rightTop = new kk.Group({
                            x: rightTop_x,
                            y: def.component.rightTopCorner.y,
                            name: 'ecs_comcorner',
                            visible: true
                        });
                        tempRTIcon = new Image();
                        tempRTIcon.src = resources.loadImages['ecs_unselect'];
                        rightTop.icon = new kk.Image({
                            x: def.component.rightTopCorner.icox,
                            y: def.component.rightTopCorner.icoy,
                            image: tempRTIcon,
                            width: 26,
                            height: 26
                        });
                        rightTop.add(rightTop.icon);
                        comMainImage = new kk.Image({
                            fillPatternImage: img,
                            width: this.width,
                            height: this.height
                        });
                        childWrapGroup_x = (this.width - def.component.width) / 2 - 10;
                        childWrapGroup_y = (this.width - def.component.width) / 2 - 10;
                        if (this.isLayer) {
                            childWrapGroup_x = 0;
                            childWrapGroup_y = 0;
                        }
                        childWrapGroup = new kk.Group({
                            x: childWrapGroup_x,
                            y: childWrapGroup_y
                        });
                        childWrapGroup.add(comMainImage);
                        comGroup.add(childWrapGroup);
                        comGroup.add(rightTop);
                        maskBackLayer.add(comGroup);
                        tmp_com = layer.find("#" + this.cid)[0];
                        if (this.isLayer) {
                            comGroup.on('click tap', domFunc.batchSelectEcs);
                        } else {
                            if (tmp_com.data.openLists.length <= 1) {
                                comGroup.on('click tap', domFunc.batchSelectEcs);
                            } else {
                                comGroup.on('mousedown touchstart', domFunc.batchSelectEcss);
                            }
                        }
                        navImg.init();
                        stage.batchDraw();
                    }
                });
            } else {
                if (com.line && com.startPos && com.endPos) {
                    com.line.setOpacity(0.3);
                } else {
                    com.show();
                    com.setOpacity(0.3);
                }
                stage.batchDraw();
            }
        }
        if (i === 0) {
            $.notify({
                msg: '没有可以批量操作的组件',
                type: 'warning'
            });
            canFunc.maskBackLayerDestroy();
            return;
        }
        stage.add(maskBackLayer);
        domFunc.onRightArrowHide();
        $('#canvasNavBtn, #enlargeBtn, #revertBtn, #narrowBtn').css({
            'color': '#ccc'
        });
        $('.zoombtnmask').show();
        topBarMaskDiv = "<div id='topBarMaskDiv' style='width:" + ($('#topbar').width()) + "px;height:" + ($('#topbar').height()) + "px;background-color:#000;opacity:0.5;position:relative;z-index:2;'></div>";
        $('#topbar').append(topBarMaskDiv);
        maskBackLayer.setAbsolutePosition(0, 0);
        global.batchSelectComList = {};
        $('#batch-bottom-board').stop(true, true).animate({
            'bottom': '0px'
        }, 500);
    },
    secGroupAddEcs: function (com) {
        if ((tools.checkLogin(1)) && (com.kind === 'ecs') && (com.data.securityGroupId.length === 0) && global.secGroupList.length > 0) {
            com.data.securityGroupId.push(global.secGroupList[0].SecurityGroupId);
            if (com.data.securityGroupId.length < 1) {
                domFunc.showRightBar(com);
            }
        }
    },
    changeEcsAmount: function (currObj, amount) {
        var findbs, i, instanceId, j, nowAmount, num, oldAmount, openLists, rand1, rand2, _i, _j, _ref, _slb, _slbid;
        oldAmount = +currObj.data.amount;
        nowAmount = amount;
        num = nowAmount - oldAmount;
        openLists = currObj.data.openLists;
        if (num < 0) {
            for (i = _i = num; _i < 0; i = _i += 1) {
                domFunc.onEcsInEcssRemoveClick.call($('#ecsServerList div:last').children());
            }
        } else if (num > 0) {
            if (openLists.length === 0) {
                currObj.data.openLists.push(currObj.data.openList);
                openLists[0].hostName = "ecs_" + (tools.rand());
                openLists[0].instanceId = "ecs_" + (tools.rand());
                openLists[0].instanceName = openLists[0].hostName;
            }
            for (j = _j = 0; _j < num; j = _j += 1) {
                rand1 = "ecs_" + (tools.rand());
                rand2 = "ecs_" + (tools.rand());
                openLists.push({
                    hostName: rand1,
                    instanceId: rand2,
                    instanceName: rand1,
                    isOpen: false,
                    publicIpAddress: "",
                    securityGroupId: openLists[0].securityGroupId
                });
                _ref = data.slb;
                for (_slbid in _ref) {
                    _slb = _ref[_slbid];
                    instanceId = currObj.data.openLists[0].instanceId;
                    if (_slb.openList.backendServer) {
                        findbs = _slb.openList.backendServer.find(function (bs) {
                            return bs.serverId === instanceId;
                        });
                        if (findbs) {
                            _slb.openList.backendServer.push({
                                backendServerPort: +findbs.backendServerPort,
                                listenerPort: +findbs.listenerPort,
                                protocol: findbs.protocol,
                                serverId: rand2,
                                weight: +findbs.weight
                            });
                        }
                    }
                }
            }
        }
        tools.renameOpenLists(currObj.data);
        canFunc.saveHistory();
    },
    releaseServer: function (obj) {
        tools.deleteNode(true);
    },
    saveHistory: function () {
        var dataJson, history, last, lastStep, md5Key, ret;
        if (!global.isShowRemark) {
            return;
        }
        dataJson = $.toJSON(data);
        md5Key = md5(dataJson);
        ret = global.historys.find({
            md5: md5Key
        });
        if (ret) {
            return;
        }
        if (global.currentStep && global.historys.length) {
            while (!(global.currentStep === global.historys.last())) {
                global.historys.pop();
            }
        }
        last = global.historys.last();
        history = {
            data: dataJson,
            prev: null,
            next: null,
            md5: md5Key,
            id: tools.rand()
        };
        if (last) {
            history.prev = last;
        }
        global.historys.push(history);
        lastStep = global.historys.last();
        if (last) {
            last.next = lastStep;
        }
        global.currentStep = lastStep;
        if (global.historys.length > 10) {
            global.historys.shift();
            global.historys.first().prev = null;
        }
        if (window.localStorage) {
            canFunc.saveCanvasStatus();
            localStorage.lastStep = $.toJSON({
                data: lastStep.data
            });
        }
    },
    saveHistoryLittle: function () {
        if (window.localStorage) {
            localStorage.lastStep = $.toJSON({
                data: $.toJSON(data)
            });
        }
    },
    setDiyMainIcoImage: function (flag) {
        var self;
        self = global.selectObj;
        if (self) {
            self.changeIco(flag, 'diy');
        }
        layer.batchDraw();
    },
    onMouseOverLine: function (e) {
        var absPos, desc, line, name, pos;
        e.cancelBubble = true;
        $('#container').css('cursor', 'pointer');
        line = data.line[this.parent.getId()];
        name = line.name;
        desc = line.desc;
        absPos = this.getAbsolutePosition();
        pos = {
            top: absPos.y + def.stage.marginV,
            left: absPos.x + def.stage.marginH
        };
        if (name || desc) {
            $.tips({
                id: tools.rand(),
                top: pos.top,
                left: pos.left,
                name: name,
                desc: desc,
                arrowStyle: 'display:none;',
                innerStyle: 'background:none;box-shadow:0 0 0 0;'
            }, this);
        }
        this.parent.select();
        layer.batchDraw();
    },
    onMouseOutLine: function () {
        var selectComId;
        $.tips('hide');
        selectComId = global.selectObj && global.selectObj.getId ? global.selectObj.getId() : '';
        if (this.parent.data.startPos !== selectComId && this.parent.data.endPos !== selectComId) {
            $('#container').css('cursor', 'default');
            //this.parent.blur();
            layer.batchDraw();
        }
    },

    editLineInfo: function () {
        var absPos, line, lineId, pos, size;
        lineId = this.parent.getId();
        line = data.line[lineId];
        absPos = this.getAbsolutePosition();
        pos = {
            top: absPos.y + def.stage.marginV,
            left: absPos.x + def.stage.marginH
        };
        $('#dialog-line-tips #line-name').val(line.name);
        $('#dialog-line-tips #line-desc').val(line.desc);
        $('#dialog-line-tips #line-id').val(lineId);
        size = {
            height: $('#dialog-line-tips').height(),
            width: $('#dialog-line-tips').width()
        };
        if (pos.top > size.height) {
            $('#dialog-line-tips').removeClass('bottom').addClass('top').css({
                top: pos.top - size.height - 10,
                left: pos.left - size.width / 2 - 3
            });
        } else {
            $('#dialog-line-tips').removeClass('top').addClass('bottom').css({
                top: pos.top + 10,
                left: pos.left - size.width / 2 - 3
            });
        }
        $('#dialog-line-tips').show();
    },
    cornerMouseOver: function (e) {
        e.cancelBubble = true;
        return $('#container').css('cursor', 'pointer');
    },
    cornerMouseOut: function (e) {
        return $('#container').css('cursor', 'default');
    },
    saveCanvasStatus: function () {
        localStorage.stagePosition = $.toJSON(global.stagePosition);
        localStorage.stageScale = global.stageScale;
    },
    onShowComTipBtnClick: function () {
        layer.batchDraw();
        if (global.isShowComTip) {
            global.isShowComTip = 0;
            $('#showComTipBtn').removeClass('eye-close').attr('title', '显示全部备注');
            layer.setAllCornersHidden();
        } else {
            global.isShowComTip = 1;
            $('#showComTipBtn').addClass('eye-close').attr('title', '隐藏全部备注');
            canFunc.showAllComTipInfo();
        }
    },

    showAllComTipInfo: function () {
        var com, line, lineObj, _i, _j, _len, _len1, _ref, _ref1;
        _ref = entities.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            com = _ref[_i];
            if (com.category !== 'layer') {
                com.showMyCorners();
                com.corners.leftTop.fire('mouseover');
            }
        }
        _ref1 = entities.lines;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            lineObj = _ref1[_j];
            line = lineObj.line;
            if (line.infoCircle) {
                line.infoCircle.fire('mouseover');
            }
        }
    },
    showAllLineTipInfo: function () {
        var line, lineObj, _i, _len, _ref, _results;
        _ref = entities.lines;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            lineObj = _ref[_i];
            line = lineObj.line;
            if (line.infoCircle) {
                _results.push(line.infoCircle.fire('mouseover'));
            } else {
                _results.push(void 0);
            }
        }
        return _results;
    },
    initStageData: function () {
        data.layer = {};
        data.ecs = {};
        data.rds = {};
        data.slb = {};
        data.oss = {};
        data.ots = {};
        data.ocs = {};
        data.cdn = {};
        data.odps = {};
        data.yundun = {};
        data.jiankong = {};
        data.diy = {};
        data.line = {};
        entities.layers = [];
        entities.components = [];
        entities.lines = [];
        entities.elements = [];
    },
    initClearStage: function () {
        var ele, lineObj, _i, _j, _len, _len1, _ref, _ref1;
        canFunc.saveCanvasStatus();
        _ref = entities.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            ele = _ref[_i];
            if (ele) {
                canFunc.destroyObj(ele);
            }
        }
        _ref1 = entities.lines;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            lineObj = _ref1[_j];
            canFunc.dellineObj(lineObj.line);
        }
        canFunc.initStageData();
        stage.setPosition(0, 0);
        canFunc.setStageScale(1);
    }
};
