// Generated by CoffeeScript 1.7.1
var AbsEcs, EcsDisk;

AbsEcs = function(params) {
  var amountWrapGroup, bandText, bindTipsEvent, cmSeparateText, comBandImage, comBitImage, comCodeImage, comDiskImage, comGroup, comOsImage, countCircle, countText, cpuText, diskText, elementWrapGroup, icoKey, icoObj, iconWrapGroup, memoryText, secGroupRect, statusSynchroImage, textKey, textObj, textWrapGroup, titleText, _config, _params, _ref, _ref1;
  _params = params || {};
  _config = {
    ecs: 'kind'
  };
  _params = $.extend({}, _config, _params);
  comGroup = new AbsCom(_params);
  comGroup.images.main.setY(-2);
  secGroupRect = new kk.Rect({
    x: 38,
    y: 9,
    width: 25,
    height: 2,
    fill: "#52ae75"
  });
  comOsImage = new kk.Image({
    x: 24,
    y: 20,
    width: 16,
    height: 16,
    image: global.images.comNoSys
  });
  comBitImage = new kk.Image({
    x: 43,
    y: 21,
    image: global.images.comNoBit,
    width: 14,
    height: 14
  });
  comCodeImage = new kk.Image({
    x: 60,
    y: 21,
    image: global.images.comCode,
    width: 14,
    height: 14
  });
  comBandImage = new kk.Image({
    x: 25,
    y: 56,
    image: global.images.comBandwidth,
    width: 24,
    height: 15
  });
  comDiskImage = new kk.Image({
    x: 51,
    y: 56,
    image: global.images.comBDisk,
    width: 24,
    height: 15
  });
  statusSynchroImage = new kk.Image({
    x: 35,
    y: -35,
    image: global.images.statusEdit,
    width: 28,
    height: 35,
    visible: false
  });
  bandText = new kk.Text({
    x: 25,
    y: 58,
    width: 24,
    height: 20,
    align: 'center',
    text: "1M",
    fontSize: 12,
    fill: '#fff'
  });
  diskText = new kk.Text({
    x: 51,
    y: 58,
    width: 24,
    height: 20,
    align: 'center',
    text: "0",
    fontSize: 12,
    fill: '#fff'
  });
  titleText = new kk.Text({
    x: 30,
    y: 88,
    width: 50,
    height: 42,
    align: 'center',
    text: "" + (tools.showOverflowText(comGroup.data.name, global.titleLenNormal)),
    fontSize: 12,
    wrap: 'char',
    fontFamily: 'monospace',
    fill: def.color.yearColor
  });
  cpuText = new kk.Text({
    x: 19,
    y: 40,
    text: '1核',
    fontSize: 12,
    width: 30,
    fill: '#000',
    align: 'center'
  });
  cmSeparateText = new kk.Text({
    x: 29,
    y: 40,
    text: ' ',
    fontSize: 12,
    width: 30,
    fill: '#000',
    align: 'center'
  });
  memoryText = new kk.Text({
    x: 40,
    y: 40,
    text: '512M',
    fontSize: 12,
    width: 40,
    fill: '#000',
    align: 'center'
  });
  countText = new kk.Text({
    x: -15,
    y: -7,
    text: '1',
    fontSize: 12,
    width: 30,
    fill: '#fff',
    align: 'center',
    fontFamily: 'Microsoft Yahei'
  });
  countCircle = new kk.Circle({
    radius: 10,
    fill: 'red',
    option: 1
  });
  amountWrapGroup = new kk.Group({
    x: 85,
    y: 12,
    visible: false
  });
  amountWrapGroup.add(countCircle);
  amountWrapGroup.add(countText);
  comGroup.add(amountWrapGroup);
  elementWrapGroup = new kk.Group;
  iconWrapGroup = new kk.Group;
  iconWrapGroup.add(secGroupRect);
  iconWrapGroup.add(comOsImage);
  iconWrapGroup.add(comBitImage);
  iconWrapGroup.add(comCodeImage);
  iconWrapGroup.add(comBandImage);
  iconWrapGroup.add(comDiskImage);
  elementWrapGroup.add(iconWrapGroup);
  textWrapGroup = new kk.Group;
  textWrapGroup.add(titleText);
  textWrapGroup.add(cpuText);
  textWrapGroup.add(memoryText);
  textWrapGroup.add(cmSeparateText);
  textWrapGroup.add(bandText);
  textWrapGroup.add(diskText);
  elementWrapGroup.add(textWrapGroup);
  comGroup.add(elementWrapGroup);
  iconWrapGroup.add(statusSynchroImage);
  comGroup.texts = {
    titleText: titleText,
    countText: countText,
    cpuText: cpuText,
    memoryText: memoryText,
    bandText: bandText,
    diskText: diskText,
    cmSeparateText: cmSeparateText
  };
  comGroup.elements.root = elementWrapGroup;
  comGroup.elements.amount = amountWrapGroup;
  comGroup.elements.secgroup = secGroupRect;
  comGroup.images.bit = comBitImage;
  comGroup.images.os = comOsImage;
  comGroup.images.code = comCodeImage;
  comGroup.images.band = comBandImage;
  comGroup.images.disk = comDiskImage;
  comGroup.images.statusSynchro = statusSynchroImage;
  bindTipsEvent = function(icoKey, icoObj) {
    icoObj.on('mouseover', function(e) {
      var _name;
      e.cancelBubble = true;
      switch (icoKey) {
        case 'os':
          if (!tools.getOsStrByVal(icoObj.parent.parent.parent.data.osVal)) {
            _name = '<span style="color:red">尚未设置镜像</span>';
          } else {
            _name = '镜像: ' + tools.getOsStrByVal(icoObj.parent.parent.parent.data.osVal);
          }
          break;
        case 'bandText':
          _name = '带宽: ' + icoObj.parent.parent.parent.data.bandWidth + 'MB';
          break;
        case 'diskText':
          if (icoObj.parent.parent.parent.data.disks.length <= 0) {
            _name = '<span style="color:red">尚未设置镜像</span>';
          } else {
            _name = "1块系统盘 + " + (icoObj.parent.parent.parent.data.disks.length - 1) + "块数据盘";
          }
          break;
        default:
          return;
      }
      tools.setCursor('default');
      if (icoKey) {
        $.tips({
          id: "ecs-ico-tips",
          name: _name,
          biasX: 10,
          biasY: 10
        }, this);
      }
    });
    icoObj.on('mouseout', function() {
      tools.setCursor('-webkit-grab');
      $('#ecs-ico-tips').remove();
    });
  };
  _ref = comGroup.images;
  for (icoKey in _ref) {
    icoObj = _ref[icoKey];
    bindTipsEvent(icoKey, icoObj);
  }
  _ref1 = comGroup.texts;
  for (textKey in _ref1) {
    textObj = _ref1[textKey];
    bindTipsEvent(textKey, textObj);
  }
  comGroup.data.osVal = null;
  comGroup.data.cpu = 1;
  comGroup.data.disks = [];
  comGroup.data.memory = 512;
  comGroup.data.ramUnit = 'MB';
  comGroup.data.bandWidth = 1;
  comGroup.data.chargeType = 1;
  comGroup.data.bandType = 1;
  comGroup.data.depend = null;
  comGroup.data.dependContent = null;
  comGroup.data.openList.isOpen = false;
  comGroup.data.buyTime = 1;
  comGroup.data.buyType = 'month';
  comGroup.data.securityGroupId = [];
  comGroup.data.openList.hostName = comGroup.data.name;
  comGroup.data.openList.instanceId = comGroup.data.id;
  comGroup.data.openList.instanceName = comGroup.data.name;
  comGroup.data.openLists = [];
  comGroup.data.openLists.push(comGroup.data.openList);
  comGroup.data.maps = {};
  return comGroup;
};

EcsDisk = (function() {
  function EcsDisk(isSystem, isLinux, size, diskId, category, isOpen, flag) {
    category = category || "cloud";
    isOpen = isOpen || false;
    if (isSystem) {
      this.category = category;
      this.isSystem = true;
      this.type = 'system';
    } else {
      this.category = category;
      this.isSystem = false;
      this.type = 'data';
    }
    if (flag) {
      this.snapshotId = flag;
    }
    if (size || size === 0) {
      this.size = size;
    } else {
      this.size = isLinux ? 20 : 40;
    }
    this.diskId = diskId ? diskId : '';
    this.isOpen = isOpen;
  }

  return EcsDisk;

})();
