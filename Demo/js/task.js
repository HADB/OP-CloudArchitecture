// Generated by CoffeeScript 1.7.1
var task;

$.getScript("" + location.protocol + "//" + location.hostname + ":8899/socket.io/socket.io.js", function(data, textStatus, jqxhr) {
  var _results;
  if (jqxhr.status === 200) {
    _results = [];
    while (io) {
      notify.connect();
      break;
    }
    return _results;
  }
});

task = {
  socketUrl: "" + location.protocol + "//" + location.hostname + ":8899/task",
  socket: null,
  queue: [],
  queue_del_ecs: {},
  queue_reset_ecs: {},
  queue_pwd_ecs: {},
  queue_del_rds: {},
  queue_del_oss: {},
  queue_del_iso: {},
  queue_del_snapshot: {},
  queue_add_snapshot: {},
  queue_add_image: {},
  processQueue: [],
  data: {},
  isProcessing: false
};

task.monitor = function() {
  task.monitor_timeout = setTimeout(function() {
    var e;
    try {
      if ($('#preview:visible').size() === 0) {
        task.build();
      }
    } catch (_error) {
      e = _error;
      console.log(e.toString());
    } finally {
      if (task.queue.length > 0) {
        $('#previewBtn .comListNum, #preview .comListNum').show().html(task.queue.length);
      } else {
        $('#previewBtn .comListNum, #preview .comListNum').hide();
      }
      task.monitor();
    }
  }, 1000);
};

task.connect = function() {
  if (typeof io !== "undefined" && io !== null) {
    if (task.socket == null) {
      task.socket = io.connect(task.socketUrl);
      task.initSocket(task.socket);
    } else if (!task.socket.socket.connected) {
      task.socket.socket.connect();
      task.initSocket(task.socket);
    }
  }
};

task.msgCallback = function(_data) {
  var taskStatus, _tempQueue;
  taskStatus = _data.data && _data.data.finish ? _data.data.finish : false;
  _tempQueue = task.queue;
  _tempQueue.forEach(function(_task) {
    var corrEcs, corrOss, finishedCount, subTask, subTaskCount, subTaskId, taskStatusClass, _instanceId, _instanceName, _nodeId, _ref;
    finishedCount = 0;
    subTaskCount = Object.size(_task.subTasks);
    _ref = _task.subTasks;
    for (subTaskId in _ref) {
      subTask = _ref[subTaskId];
      console.log(subTaskId, subTask);
      if (subTask.id === _data.taskId) {
        switch (+_data.code) {
          case 200:
            subTask.finish = taskStatus;
            subTask.status = 'success';
            if (_data.data) {
              switch (_data.data.type) {
                case 'ecs':
                  switch (_data.data.operate) {
                    case 'new':
                      data.ecs[_task.nodeId].maps[_data.data.options.InstanceId] = _data.data.options;
                      data.ecs[_task.nodeId].openList.instanceId = _data.data.options.InstanceId;
                      data.ecs[_task.nodeId].amount = _task.amount;
                      corrEcs = stage.find('#' + _task.nodeId);
                      if (corrEcs.length === 1) {
                        corrEcs[0].setStatusStyle('Stopped');
                      }
                      global.selectComObjList[_data.data.options.InstanceId] = _data.data.options;
                      global.comList[_data.data.options.InstanceId] = _data.data.options;
                      global.newEcsInstanceId = _data.data.options.InstanceId;
                      break;
                    case 'buy':
                      data.ecs[_task.nodeId].status = 'Pending';
                      break;
                    case 'start':
                      corrEcs = stage.find('#' + _task.nodeId);
                      if (subTask.finish && corrEcs.length === 1) {
                        corrEcs[0].setStatusStyle('Running');
                      }
                      break;
                    case 'del':
                      delete data.ecs[_task.nodeId];
                      delete global.comList[_data.data.options.InstanceId];
                      delete task.queue_del_ecs[_data.data.options.InstanceId];
                      break;
                    case 'modifyAttr':
                      _nodeId = _data.data.nodeId;
                      _instanceId = _data.data.options.InstanceId;
                      if (_data.data.options.InstanceName != null) {
                        _instanceName = _data.data.options.InstanceName;
                        global.comList[_instanceId].info.InstanceName = _instanceName;
                        layer.find("#" + _nodeId)[0].texts.titleText.setText(_instanceName);
                      }
                      if (_data.data.options.Password != null) {
                        delete task.queue_pwd_ecs[_instanceId];
                      }
                  }
                  break;
                case 'slb':
                  switch (_data.data.operate) {
                    case 'buy':
                      console.log('ok');
                  }
                  break;
                case 'iso':
                  switch (_data.data.operate) {
                    case 'new':
                      delete task.queue_add_image[_data.data.InstanceId];
                  }
                  break;
                case 'snapshot':
                  switch (_data.data.operate) {
                    case 'new':
                      delete task.queue_add_snapshot[_data.data.InstanceId];
                  }
                  break;
                case 'oss':
                  switch (_data.data.operate) {
                    case 'new':
                      corrOss = stage.find('#' + _task.nodeId);
                      if (corrOss.length === 1) {
                        corrOss[0].setStatusStyle('Running');
                      }
                      data.oss[_data.data.nodeId].maps[_data.data.options.Name] = {};
                      break;
                    case 'del':
                      delete task.queue_del_oss[_data.data.options.Name];
                  }
              }
            }
            taskStatusClass = subTask.finish ? 'success' : 'pending';
            $("#" + subTask.id + " .task-status").attr('class', "task-status " + taskStatusClass);
            break;
          default:
            subTask.status = 'fault';
            $("#" + subTask.id + " .task-status").attr('class', 'task-status fault');
            _task.status = 'fault';
            $("#" + _task.id + " .task-status").attr('class', 'task-status fault');
            break;
        }
      }
      if (subTask.finish) {
        finishedCount++;
      }
    }
    if (subTaskCount === finishedCount) {
      task.status = 'success';
      task.queue.remove(function(n) {
        return n.id === _task.id;
      });
      $("#" + _task.id + ",.parent-" + _task.id).remove();
      if ($('tr.list-table-item').size() === 0) {
        return task.isProcessing = false;
      }
    } else {
      return task.status = 'fault';
    }
  });
  if (task.queue.length === 0) {
    task.isProcessing = false;
    console.log('任务全部结束, task: ', task);
    $('#preview .loading').hide();
    domFunc.setTimeoutFunc();
  }
};

task.initSocket = function(socket) {
  socket.on('error', function(reason) {
    console.log('Unable to connect Socket.IO', reason);
    tools.clearLoginInfo();
    return $.notify({
      msg: 'session过期或不存在, 请重新登录',
      type: 'warning'
    });
  });
  socket.on('connect', function() {
    return console.log('socket connect');
  });
  socket.on('reconnect', function() {
    return console.log('socket reconnect');
  });
  socket.on('disconnect', function() {
    return console.log('socket disconnect');
  });
  clearTimeout(global.timeoutHandle);
  socket.on('msg', task.msgCallback);
  socket.on('finish', function(_data) {
    console.log('队列处理完成');
    domFunc.setTimeoutFunc();
    task.isProcessing = false;
    task.queue = [];
    task.directQueue = [];
  });
  return socket.on('notify', function(_data) {
    console.log('socket.on "notify", (_data)->');
  });
};

task.add = function(t) {
  var task_exist;
  task_exist = task.queue.find(function(n) {
    return n.id === t.id;
  });
  if (task_exist) {

  } else {
    return task.queue.push(t);
  }
};

task.send = function(key, value) {
  task.connect();
  task.socket.emit(key, value);
};

task.process = function() {
  task.data.accessKeyId = global.accessKeyId;
  task.data.accessKeySec = global.accessKeySec;
  task.data.regionId = $.cookie('regionId');
  task.data.ownerAccount = decodeURIComponent($.cookie('loginMail'));
  task.data.queue = task.queue;
};

task.updateComStatus = function() {
  var com, findNode, i, nodeId, nowStatus, t, _i, _j, _len, _len1, _ref, _ref1;
  nowStatus = task.isProcessing ? 'synchro' : 'edit';
  _ref = entities.components;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    com = _ref[i];
    com.setStatusIcon('hide');
  }
  _ref1 = task.queue;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    t = _ref1[_j];
    nodeId = t.nodeId;
    findNode = stage.find('#' + nodeId);
    if (findNode.length > 0 && findNode[0].data.maps && Object.size(findNode[0].data.maps) > 0) {
      findNode[0].setStatusIcon(nowStatus);
    }
  }
  layer.batchDraw();
};

task.exec = function() {
  var sub, subId, t, _i, _len, _ref, _ref1;
  if (task.isProcessing) {
    $.notify({
      msg: '上一个队列正在处理中，请稍候'
    });
    return false;
  }
  if (task.data.queue && task.data.queue.length > 0) {
    task.isProcessing = true;
    _ref = task.data.queue;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      t.status = 'pending';
      _ref1 = t.subTasks;
      for (subId in _ref1) {
        sub = _ref1[subId];
        sub.status = 'pending';
      }
    }
    task.send('exec', task.data);
  } else {
    $.notify({
      msg: '队列为空'
    });
  }
};

task.now = function(data, operate) {
  var instanceId, t, t_sub_operate, value, _params;
  if (Object.size(data) === 0) {
    $.notify({
      msg: '请选择云服务器。',
      type: 'warning'
    });
  }
  _params = {
    accessKeyId: global.accessKeyId,
    accessKeySec: global.accessKeySec,
    regionId: $.cookie('regionId'),
    queue: []
  };
  for (instanceId in data) {
    value = data[instanceId];
    t = new Task({
      depend: instanceId,
      type: 'ecs',
      operate: operate,
      desc: "ECS批量操作",
      nodeId: value.nodeId,
      key: instanceId
    });
    t_sub_operate = new SubTask({
      type: 'ecs',
      operate: operate,
      desc: "ECS " + operate + " 操作<span class=\"gray\">（InstanceId：" + instanceId + "）</span>",
      options: {
        InstanceId: instanceId
      }
    });
    t.subTasks[t_sub_operate.id] = t_sub_operate;
    _params.queue.push(t);
  }
  task.send('execNow', _params);
};

task.addDelCustomIsoTask = function(imageId) {
  return task.queue_del_iso[imageId] = imageId;
};

task.addDelSnapshotTask = function(instanceId, diskId, snapshotId) {
  return task.queue_del_snapshot[snapshotId] = {
    InstanceId: instanceId,
    DiskId: diskId,
    SnapshotId: snapshotId
  };
};

task.build = function() {
  if (global.secGroupList.length === 0) {
    return;
  }
  if (!task.isProcessing) {
    task.queue.remove(function(q) {
      return q.status === 'wait';
    });
  }
  if (tools.isMapped()) {
    task.ecs.newTasks();
    task.ecs.delTasks();
    task.ecs.copyTasks();
    task.ecs.changeTasks();
    task.ecs.createSnapshotTasks();
    task.ecs.createImageTasks();
    task.ecs.delSnapshotTasks();
    task.ecs.delIsoTasks();
    task.rds.addDbTasks();
    task.rds.addUserTasks();
    task.rds.delDbTasks();
    task.rds.grantUserTasks();
    task.slb.delListenerTask();
    task.slb.addListenerTask();
    task.slb.delServerTask();
    task.slb.addServerTask();
    task.slb.setListenerAttributeTask();
    task.oss.newTasks();
    task.oss.delTasks();
  }
  task.process();
  task.updateComStatus();
};

task.ecs = {
  delTasks: function() {
    var k, v, _ref;
    _ref = task.queue_del_ecs;
    for (k in _ref) {
      v = _ref[k];
      task.ecs.del(v);
    }
  },
  buyTasks: function(direct) {
    var ecs, i, _ref;
    _ref = data.ecs;
    for (i in _ref) {
      ecs = _ref[i];
      if (!ecs.depend && Object.size(ecs.maps) === 0 && !ecs.pending) {
        if (+ecs.chargeType === 1) {
          task.ecs.buy(ecs);
        }
      }
    }
  },
  newTasks: function(direct) {
    var ecs, i, _ref;
    _ref = data.ecs;
    for (i in _ref) {
      ecs = _ref[i];
      if (!ecs.depend && Object.size(ecs.maps) === 0 && !ecs.pending) {
        if (+ecs.chargeType === 2) {
          task.ecs["new"](ecs);
        }
      }
    }
  },
  copyTasks: function() {
    var ecs, i, _ref;
    _ref = data.ecs;
    for (i in _ref) {
      ecs = _ref[i];
      if (ecs.depend) {
        task.ecs.copy(ecs);
      }
    }
  },
  changeTasks: function() {
    var currentInsType, disk, ecs, i, instanceId, item, j, l, map, _addDisks, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    _ref = data.ecs;
    for (i in _ref) {
      ecs = _ref[i];
      if (ecs.depend || !tools.isMapped() || Object.size(ecs.maps) === 0) {
        continue;
      }
      currentInsType = def.instanceType["" + ecs.cpu + "-" + (ecs.memory / 1024)];
      _ref1 = ecs.maps;
      for (j in _ref1) {
        map = _ref1[j];
        if (ecs.osVal !== map.ImageId) {
          task.ecs.reset({
            InstanceId: map.instanceId,
            NodeId: ecs.id,
            ImageId: ecs.osVal
          });
        }
        _ref2 = task.queue_reset_ecs;
        for (instanceId in _ref2) {
          item = _ref2[instanceId];
          task.ecs.reset({
            InstanceId: instanceId,
            NodeId: item.NodeId,
            DiskType: item.DiskType
          });
        }
        if (ecs.openLists.length > 1) {
          _ref3 = ecs.openLists;
          for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
            l = _ref3[i];
            if (l.instanceId === map.InstanceId && l.instanceName !== map.InstanceName) {
              task.ecs.updateAttr({
                InstanceId: map.InstanceId,
                InstanceName: l.instanceName,
                NodeId: ecs.id
              });
            }
          }
        } else {
          if (map.InstanceName !== ecs.name) {
            task.ecs.updateAttr({
              InstanceId: map.InstanceId,
              InstanceName: ecs.name,
              NodeId: ecs.id
            });
          }
        }
        _ref4 = task.queue_pwd_ecs;
        for (instanceId in _ref4) {
          item = _ref4[instanceId];
          task.ecs.updateAttr({
            InstanceId: instanceId,
            Password: item.Password,
            NodeId: item.NodeId
          });
        }
        _addDisks = [];
        _ref5 = ecs.disks;
        for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
          disk = _ref5[_j];
          if (!disk.isOpen && !disk.isSystem) {
            _addDisks.push(disk);
          }
        }
        if (_addDisks.length > 0) {
          task.ecs.addDisk(ecs, map, _addDisks);
        }
      }
    }
  },
  pushSnapshot: function(snapshot) {
    task.queue_add_snapshot[snapshot.instanceId] = snapshot;
  },
  createSnapshotTasks: function() {
    var k, v, _ref;
    _ref = task.queue_add_snapshot;
    for (k in _ref) {
      v = _ref[k];
      task.ecs.createSnapshot(v);
    }
  },
  delIsoTasks: function() {
    var k, v, _ref, _results;
    _ref = task.queue_del_iso;
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      _results.push(task.ecs.delIso(v));
    }
    return _results;
  },
  delSnapshotTasks: function() {
    var k, v, _ref, _results;
    _ref = task.queue_del_snapshot;
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      _results.push(task.ecs.delSnapshot(v));
    }
    return _results;
  },
  pushImage: function(image) {
    console.log('pushImage : (image)->');
    console.log(image);
    task.queue_add_image[image.instanceId] = image;
  },
  createImageTasks: function() {
    var k, v, _ref;
    _ref = task.queue_add_image;
    for (k in _ref) {
      v = _ref[k];
      if (v.type === 1) {
        task.ecs.createImageByAuto(v);
      } else {
        task.ecs.createImageBySnapshot(v);
      }
    }
  },
  updateSpec: function(node, map) {
    var t, t_sub;
    t = new Task({
      depend: map.InstanceId,
      nodeId: node.id,
      type: 'ecs',
      operate: 'modifySpec',
      desc: "修改ECS规格 <span class=\"gray\">(Name: " + map.InstanceName + ")</span>"
    });
    t_sub = new SubTask({
      type: 'ecs',
      operate: 'modifySpec',
      desc: "修改ECS规格 <span class=\"gray\">(Name: " + map.InstanceName + ")</span>",
      options: {
        InstanceType: def.instanceType["" + node.cpu + "-" + (node.memory / 1024)],
        InternetMaxBandwidthOut: node.bandWidth
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  updateAttr: function(_options) {
    var t, t_sub;
    t = new Task({
      depend: _options.InstanceId,
      nodeId: _options.NodeId,
      type: 'ecs',
      operate: 'modifyAttr',
      desc: "修改ECS属性",
      key: _options.InstanceId
    });
    t_sub = new SubTask({
      type: 'ecs',
      operate: 'modifyAttr',
      desc: "修改ECS属性 <span class=\"gray\">(InstanceId: " + _options.InstanceId + ")</span>",
      options: _options
    });
    t_sub.desc = "修改ECS属性 <span class=\"gray\">(InstanceId: " + _options.InstanceId + ", ";
    if (_options.InstanceName) {
      t_sub.desc += "InstanceName: " + _options.InstanceName;
    }
    if (_options.Password) {
      t_sub.desc += "Password: " + _options.Password;
    }
    t_sub.desc += ")</span>";
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  addDisk: function(node, map, disks) {
    var disk, i, t, t_sub, _i, _len;
    if (disks.length <= 0) {
      return;
    }
    t = new Task({
      depend: map.InstanceId,
      nodeId: node.id,
      type: 'disk',
      operate: 'new',
      desc: "为ECS <span class=\"gray\">(Name: " + map.InstanceName + ")</span> 添加 " + disks.length + " 块磁盘"
    });
    for (i = _i = 0, _len = disks.length; _i < _len; i = ++_i) {
      disk = disks[i];
      switch (disk.category) {
        case 'cloud':
          t_sub = new SubTask({
            type: 'disk',
            operate: 'new',
            desc: "添加云磁盘 <span class=\"gray\">(Size:" + disk.size + "GB)</span>",
            options: {
              InstanceId: map.InstanceId,
              Size: disk.size
            }
          });
          t.subTasks[t_sub.id] = t_sub;
          break;
        case 'snapshot':
          t_sub = new SubTask({
            type: 'disk',
            operate: 'new',
            desc: "通过快照添加磁盘 <span class=\"gray\">(快照ID: " + disk.snapshotId + ")</span>",
            options: {
              InstanceId: map.InstanceId,
              SnapshotId: disk.snapshotId
            }
          });
          t.subTasks[t_sub.id] = t_sub;
      }
    }
    task.add(t);
  },
  delDisk: function(node, map, options) {
    var t, t_sub;
    t = new Task({
      depend: map.InstanceId,
      nodeId: node.id,
      type: 'disk',
      operate: 'new',
      desc: "为ECS <span class=\"gray\">(Name: " + map.InstanceName + ")</span> 删除磁盘 <span class=\"gray\">(DiskId:" + options.DiskId + "GB)</span>"
    });
    t_sub = new SubTask({
      type: 'disk',
      operate: 'del',
      desc: "为ECS <span class=\"gray\">(Name: " + map.InstanceName + ")</span> 删除磁盘 <span class=\"gray\">(DiskId:" + options.DiskId + "GB)</span>",
      options: {
        InstanceId: map.InstanceId,
        DiskId: options.DiskId
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  pushDel: function(node) {
    var k, map, _ref;
    _ref = node.maps;
    for (k in _ref) {
      map = _ref[k];
      task.queue_del_ecs[k] = {
        InstanceId: k,
        NodeId: node.id
      };
    }
  },
  del: function(_options) {
    var instanceId, node, nodeId, t, t_sub_del, t_sub_stop;
    instanceId = _options.InstanceId;
    nodeId = _options.NodeId;
    node = global.comList[instanceId] ? global.comList[instanceId].info : null;
    if (!node) {
      return;
    }
    t = new Task({
      depend: instanceId,
      type: 'ecs',
      operate: 'del',
      desc: "删除ECS <span class=\"gray\">(Name：" + node.InstanceName + ")</span>",
      nodeId: nodeId,
      key: instanceId
    });
    t_sub_stop = new SubTask({
      type: 'ecs',
      operate: 'shutdown',
      desc: "关机，ECS<span class=\"gray\">（InstanceId：" + instanceId + ", InstanceName: " + node.InstanceName + "）</span>",
      options: {
        InstanceId: instanceId
      }
    });
    t_sub_del = new SubTask({
      type: 'ecs',
      operate: 'del',
      desc: "删除ECS<span class=\"gray\">（InstanceId：" + instanceId + ", InstanceName: " + node.InstanceName + "）</span>",
      preTasks: [t_sub_stop.id],
      options: {
        InstanceId: instanceId
      }
    });
    t.subTasks[t_sub_stop.id] = t_sub_stop;
    t.subTasks[t_sub_del.id] = t_sub_del;
    task.add(t);
  },
  start: function(node) {
    var t;
    t = new Task({
      depend: node.getInstanceId(),
      type: 'ecs',
      operate: 'start',
      options: {
        instanceId: node.getInstanceId()
      }
    });
    task.add(t);
  },
  reboot: function(node) {
    var t;
    t = new Task({
      depend: node.getInstanceId(),
      type: 'ecs',
      operate: 'reboot',
      options: {
        instanceId: node.getInstanceId()
      }
    });
    task.add(t);
  },
  stop: function(node) {
    var t;
    t = new Task({
      depend: node.getInstanceId(),
      type: 'ecs',
      operate: 'shutdown',
      options: {
        instanceId: node.getInstanceId()
      }
    });
    task.add(t);
  },
  allocateIp: function(node) {
    var t;
    t = new Task({
      depend: node.getInstanceId(),
      type: 'ecs',
      operate: 'allocateIp',
      options: {
        instanceId: node.getInstanceId()
      }
    });
    task.add(t);
  },
  releaseIp: function(node) {
    var t;
    t = new Task({
      depend: node.getInstanceId(),
      type: 'ecs',
      operate: 'releaseIp',
      options: {
        publicIpAddress: node.data.openList.publicIpAddress[0]
      }
    });
    task.add(t);
  },
  createSnapshot: function(snapshot) {
    var node, t, t_sub;
    console.log('createSnapshot : ', snapshot);
    node = global.comList[snapshot.instanceId] ? global.comList[snapshot.instanceId].info : null;
    if (!node) {
      return;
    }
    t = new Task({
      depend: snapshot.instanceId,
      type: 'snapshot',
      operate: 'new',
      desc: "创建磁盘快照"
    });
    t_sub = new SubTask({
      type: 'snapshot',
      operate: 'new',
      desc: "创建磁盘快照<span class=\"gray\">（InstanceId：" + snapshot.instanceId + ", DiskId: " + snapshot.diskId + ", SnapshotName: " + snapshot.snapshotName + "）</span>",
      options: {
        InstanceId: snapshot.instanceId,
        DiskId: snapshot.diskId,
        SnapshotName: $.trim(snapshot.snapshotName)
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  createImageBySnapshot: function(image) {
    var t, t_sub;
    t = new Task({
      depend: image.instanceId,
      type: 'iso',
      operate: 'new',
      desc: "根据已有快照创建镜像"
    });
    t_sub = new SubTask({
      type: 'iso',
      operate: 'new',
      desc: "创建镜像 <span class=\"gray\">（快照 ID：" + image.snapshotId + ", 自定义 ID: " + image.description + "）</span>",
      options: {
        SnapshotId: image.snapshotId,
        RegionId: $.cookie('regionId')
      }
    });
    if ($.trim(image.osName)) {
      t_sub.options.OSName = image.osName;
    }
    if ($.trim(image.description)) {
      t_sub.options.Description = image.description;
    }
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  createImageByAuto: function(image) {
    var t, t_snapshotOs, t_sub;
    t = new Task({
      depend: image.instanceId,
      type: 'iso',
      operate: 'new',
      desc: "一键创建镜像",
      key: image.sysDiskId
    });
    t_snapshotOs = new SubTask({
      type: 'snapshot',
      operate: 'new',
      desc: "生成系统盘快照 <span class=\"gray\">（系统盘 ID：" + image.sysDiskId + "）</span>",
      options: {
        InstanceId: image.instanceId,
        DiskId: image.sysDiskId
      }
    });
    t.subTasks[t_snapshotOs.id] = t_snapshotOs;
    t_sub = new SubTask({
      type: 'iso',
      operate: 'new',
      desc: "创建镜像 <span class=\"gray\">（自定义 ID: " + image.description + "）</span>",
      preOptions: {
        SnapshotId: t_snapshotOs.id
      },
      options: {
        RegionId: $.cookie('regionId')
      }
    });
    if ($.trim(image.osName)) {
      t_sub.options.OSName = image.osName;
    }
    if ($.trim(image.description)) {
      t_sub.options.Description = image.description;
    }
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  reset: function(_options) {
    var t, t_reset, t_shutdown;
    t = new Task({
      depend: _options.InstanceId,
      type: 'ecs',
      operate: 'reset',
      nodeId: _options.NodeId,
      desc: "重置ECS镜像 <span class=\"gray\">(ECS ID: " + _options.InstanceId + ")</span>"
    });
    if (_options.ImageId) {
      t.desc = "重置ECS镜像 <span class=\"gray\">(ECS ID: " + _options.InstanceId + "，镜像ID：" + _options.ImageId + ")</span>";
    }
    t_shutdown = new SubTask({
      type: 'ecs',
      operate: 'shutdown',
      desc: '重置前关机',
      options: {
        InstanceId: _options.InstanceId
      }
    });
    t.subTasks[t_shutdown.id] = t_shutdown;
    t_reset = new SubTask({
      type: 'ecs',
      operate: 'reset',
      desc: '重置镜像',
      preTasks: [t_shutdown],
      options: _options
    });
    t.subTasks[t_reset.id] = t_reset;
    task.add(t);
  },
  "new": function(ecs) {
    var i, t, t_sub_new, t_sub_start, _amount, _name;
    t = new Task({
      type: 'ecs',
      operate: 'new',
      desc: "创建ECS <span class=\"gray\">(Name：" + ecs.name + ", 数量：" + ecs.amount + "台)</span>",
      amount: ecs.amount,
      nodeId: ecs.id
    });
    _amount = ecs.amount;
    i = 0;
    while (i++ < _amount) {
      _name = _amount === 1 ? ecs.name : ecs.openLists[i - 1].instanceName;
      t_sub_new = new SubTask({
        type: 'ecs',
        operate: 'new',
        desc: "创建一台ECS<span class=\"gray\">（Name：" + _name + "）</span>",
        options: {
          RegionId: $.cookie('regionId'),
          InstanceName: _name,
          InstanceType: def.instanceType["" + ecs.cpu + "-" + (ecs.memory / 1024)],
          ImageId: ecs.osVal,
          SecurityGroupId: ecs.securityGroupId[0],
          InternetMaxBandwidthOut: ecs.bandWidth,
          InternetChargeType: "PayByTraffic",
          Disks: ecs.disks
        }
      });
      t_sub_start = new SubTask({
        type: 'ecs',
        operate: 'start',
        desc: "启动ECS<span class=\"gray\">（Name：" + _name + "）</span>",
        preOptions: {
          InstanceId: t_sub_new.id
        }
      });
      t.subTasks[t_sub_new.id] = t_sub_new;
      t.subTasks[t_sub_start.id] = t_sub_start;
    }
    task.add(t);
  },
  buy: function(ecs) {
    var t, t_sub;
    t = new Task({
      type: 'ecs',
      operate: 'buy',
      desc: "购买ECS <span class=\"gray\">(Name：" + ecs.name + ", 数量：" + ecs.amount + "台)</span>",
      amount: ecs.amount,
      nodeId: ecs.id
    });
    t_sub = new SubTask({
      type: 'ecs',
      operate: 'buy',
      desc: "购买一台ECS<span class=\"gray\">（Name：" + ecs.name + "）</span>",
      options: {
        commodityCode: 'vm',
        data: {
          vm_cpu: '' + ecs.cpu,
          vm_ram: '' + ecs.memory,
          vm_bandwidth: '' + ecs.bandWidth,
          vm_region_no: resources.regionCode[$.cookie('regionId')],
          vm_os: ecs.osVal,
          vm_disk: ecs.disks,
          name: ecs.name,
          pricing_cycle: ecs.buyType,
          duration: '' + ecs.buyTime,
          quantity: '' + ecs.amount,
          vm_yundun_monitor: '1',
          vm_yundun_service: '1',
          display_name: ecs.name
        }
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  copy: function(node) {
    var amount, copyTask, dependNodeData, i, t, t_isoOs, t_newEcs, t_snapshotOs, _i, _ref;
    if (Object.size(node.maps) > 0 || tools.isMapped(node)) {
      return;
    }
    if (global.comReleaseList[node.depend] || !global.comList[node.depend]) {
      return;
    }
    dependNodeData = global.comList[node.depend];
    if (node.dependContent) {
      amount = node.amount;
      copyTask = task.queue.find(function(n) {
        return n.depend === node.depend && n.type === 'ecs' && n.operate === 'copy' && n.options.copyContent;
      });
      if (copyTask) {
        task.queue.remove(copyTask);
        amount++;
      }
      t = new Task({
        depend: node.depend,
        type: 'ecs',
        operate: 'copy',
        desc: "按内容复制ECS<span class=\"gray\">（Name: " + node.name + ", 数量: " + amount + "台）</span>",
        amount: node.amount,
        nodeId: node.id,
        options: {
          copyContent: true
        }
      });
      for (i = _i = 0, _ref = node.amount; _i < _ref; i = _i += 1) {
        t_snapshotOs = new SubTask({
          type: 'snapshot',
          operate: 'new',
          desc: "生成系统盘快照",
          options: {
            InstanceId: node.depend,
            DiskId: node.disks[0].diskId
          }
        });
        t.subTasks[t_snapshotOs.id] = t_snapshotOs;
        t_isoOs = new SubTask({
          type: 'iso',
          operate: 'new',
          desc: '生成系统盘镜像',
          preOptions: {
            SnapshotId: t_snapshotOs.id
          },
          options: {
            RegionId: $.cookie('regionId')
          }
        });
        t.subTasks[t_isoOs.id] = t_isoOs;
        t_newEcs = new SubTask({
          type: 'ecs',
          operate: 'buy',
          desc: "生成一台ECS的订单<span class=\"gray\">（Name: " + node.name + "）</span>",
          preOptions: {
            ImageId: t_isoOs.id
          },
          options: {
            RegionId: $.cookie('regionId'),
            InstanceType: def.instanceType["" + node.cpu + "-" + (node.memory / 1024)],
            SecurityGroupId: node.securityGroupId[0],
            InstanceName: "" + node.name,
            ImageId: node.osVal,
            SecurityGroupId: node.securityGroupId[0]
          }
        });
        t.subTasks[t_newEcs.id] = t_newEcs;
      }
    } else {
      amount = node.amount;
      copyTask = task.queue.find(function(n) {
        return n.depend === node.depend && n.type === 'ecs' && n.operate === 'copy' && !n.options.copyContent;
      });
      if (copyTask) {
        task.queue.remove(copyTask);
        amount++;
      }
      t = new Task({
        depend: node.depend,
        type: 'ecs',
        operate: 'copy',
        desc: "复制ECS<span class=\"gray\">（Name: " + node.name + ", 数量: " + amount + "台）</span>",
        amount: node.amount,
        nodeId: node.id,
        options: {
          copyContent: false
        }
      });
      t_newEcs = new SubTask({
        type: 'ecs',
        operate: 'new',
        desc: "生成一台ECS的订单<span class=\"gray\">（Name: " + node.name + "）</span>",
        options: {
          RegionId: $.cookie('regionId'),
          InstanceType: def.instanceType["" + node.cpu + "-" + (node.memory / 1024)],
          SecurityGroupId: node.openList.securityGroupId,
          InstanceName: "" + node.name,
          ImageId: node.osVal,
          SecurityGroupId: node.securityGroupId[0],
          InternetMaxBandwidthOut: node.bandWidth
        }
      });
      t.subTasks[t_newEcs.id] = t_newEcs;
    }
    task.add(t);
  },
  newDisk: function(node, disk) {
    var ecs, t_isoOs, _i, _len, _ref;
    if (node.data.amount === 1) {
      t_isoOs = new Task({
        depend: node.getInstanceId(),
        type: 'disk',
        operate: 'new',
        desc: "为ECS " + (node.getInstanceId()) + " 创建 " + disk.size + "GB 的磁盘",
        options: {
          instanceId: node.getInstanceId(),
          size: disk.size
        }
      });
      task.add(t_isoOs);
    } else {
      _ref = node.data.openLists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ecs = _ref[_i];
        t_isoOs = new Task({
          depend: ecs.instanceId,
          type: 'disk',
          operate: 'del',
          desc: "为 ECS " + ecs.instanceId + " 创建 " + disk.size + "GB 的磁盘",
          options: {
            instanceId: ecs.instanceId,
            size: disk.size
          }
        });
        task.add(t_isoOs);
      }
    }
  },
  delIso: function(imageId) {
    var t, t_sub;
    t = new Task({
      type: 'iso',
      operate: 'del',
      key: imageId,
      desc: "删除镜像 <span class=\"gray\">(镜像ID：" + imageId + ")</span>"
    });
    t_sub = new SubTask({
      type: 'iso',
      operate: 'del',
      desc: "删除镜像 <span class=\"gray\">(镜像ID：" + imageId + ")</span>",
      options: {
        ImageId: imageId
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    return task.add(t);
  },
  delSnapshot: function(options) {
    var t, t_sub;
    t = new Task({
      depend: options.InstanceId,
      type: 'snapshot',
      operate: 'del',
      key: options.SnapshotId,
      desc: "删除快照 <span class=\"gray\">(快照ID：" + options.SnapshotId + ")</span>"
    });
    t_sub = new SubTask({
      type: 'snapshot',
      operate: 'del',
      desc: "删除快照 <span class=\"gray\">(快照ID：" + options.SnapshotId + ")</span>",
      options: options
    });
    t.subTasks[t_sub.id] = t_sub;
    return task.add(t);
  }
};

task.rds = {
  buyTasks: function() {
    var i, rds, _ref;
    _ref = data.rds;
    for (i in _ref) {
      rds = _ref[i];
      if (Object.size(rds.maps) === 0 && !tools.isMapped(rds)) {
        task.rds.buy(rds);
      }
    }
  },
  addDbTasks: function() {
    var exist, i, newDb, newDbs, oldDbs, rds, _i, _len, _ref;
    _ref = data.rds;
    for (i in _ref) {
      rds = _ref[i];
      if (rds.openList.isOpen) {
        oldDbs = rds.maps[rds.openList.dbInstanceId].Databases;
        newDbs = rds.openList.databases;
        for (_i = 0, _len = newDbs.length; _i < _len; _i++) {
          newDb = newDbs[_i];
          exist = oldDbs.some(function(n) {
            return n.DBName === newDb.dbname;
          });
          if (!exist) {
            task.rds.addDb(newDb, rds);
          }
        }
      }
    }
  },
  addUserTasks: function() {
    var exist, i, newUser, newUsers, oldUsers, rds, _i, _len, _ref;
    _ref = data.rds;
    for (i in _ref) {
      rds = _ref[i];
      if (rds.openList.isOpen) {
        oldUsers = rds.maps[rds.openList.dbInstanceId].Users;
        newUsers = rds.openList.users;
        for (_i = 0, _len = newUsers.length; _i < _len; _i++) {
          newUser = newUsers[_i];
          exist = oldUsers.some(function(n) {
            return n.AccountName === newUser.accountName;
          });
          if (!exist) {
            task.rds.addUser(newUser, rds);
          }
        }
      }
    }
  },
  delDbTasks: function() {
    var exist, i, newDbs, oldDb, oldDbs, rds, _i, _len, _ref;
    _ref = data.rds;
    for (i in _ref) {
      rds = _ref[i];
      if (rds.openList.isOpen) {
        oldDbs = rds.maps[rds.openList.dbInstanceId].Databases;
        newDbs = rds.openList.databases;
        for (_i = 0, _len = oldDbs.length; _i < _len; _i++) {
          oldDb = oldDbs[_i];
          exist = newDbs.some(function(n) {
            return n.dbname === oldDb.DBName;
          });
          if (!exist) {
            task.rds.delDb(oldDb, rds);
          }
        }
      }
    }
  },
  grantUserTasks: function() {
    var grantTasks, i, isGrant, isRevoke, newPrivis, newUser, newUsers, oldPrivis, oldUser, oldUsers, privi, rds, revokeTasks, _i, _j, _k, _len, _len1, _len2, _ref, _results;
    _ref = data.rds;
    _results = [];
    for (i in _ref) {
      rds = _ref[i];
      if (rds.openList.isOpen) {
        oldUsers = rds.maps[rds.openList.dbInstanceId].Users;
        newUsers = rds.openList.users;
        revokeTasks = [];
        grantTasks = [];
        for (_i = 0, _len = oldUsers.length; _i < _len; _i++) {
          oldUser = oldUsers[_i];
          newUser = newUsers.find(function(n) {
            return n.accountName === oldUser.AccountName;
          });
          if (!newUser) {
            continue;
          }
          oldPrivis = oldUser.DatabasePrivilege;
          newPrivis = newUser.databasePrivilege;
          for (_j = 0, _len1 = oldPrivis.length; _j < _len1; _j++) {
            privi = oldPrivis[_j];
            isRevoke = newPrivis.every(function(n) {
              return privi.DBName !== n.dbName;
            });
            if (isRevoke) {
              revokeTasks.push({
                account: oldUser.AccountName,
                db: privi.DBName
              });
            }
          }
          for (_k = 0, _len2 = newPrivis.length; _k < _len2; _k++) {
            privi = newPrivis[_k];
            isGrant = oldPrivis.every(function(n) {
              return privi.dbName !== n.DBName;
            });
            if (isGrant) {
              grantTasks.push({
                account: newUser.accountName,
                db: privi.dbName,
                privilege: privi.accountPrivilege
              });
            }
          }
        }
        if (revokeTasks.length > 0 || grantTasks.length > 0) {
          _results.push(task.rds.grant(revokeTasks, grantTasks, rds));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  },
  buy: function(rdsData) {
    var t, t_sub;
    t = new Task({
      type: 'rds',
      operate: 'buy',
      desc: "购买RDS <span class=\"gray\">(Name：" + rdsData.name + ", 数量：" + rdsData.amount + "台)</span>",
      amount: rdsData.amount,
      nodeId: rdsData.id
    });
    t_sub = new SubTask({
      type: 'rds',
      operate: 'buy',
      desc: "购买一台RDS <span class=\"gray\">(Name：" + rdsData.name + ")</span>",
      options: {
        name: rdsData.name
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  addDb: function(newDb, rdsData) {
    var privi, t, t_sub, user, userName, _i, _j, _len, _len1, _ref, _ref1;
    t = new Task({
      type: 'rds',
      operate: 'newDb',
      desc: "为RDS <span class=\"gray\">(Name：" + rdsData.name + ")</span> 新建数据库 <span class=\"gray\">(" + newDb.dbname + ")</span>",
      amount: rdsData.amount,
      nodeId: rdsData.id
    });
    userName = '';
    _ref = rdsData.openList.users;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user = _ref[_i];
      _ref1 = user.databasePrivilege;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        privi = _ref1[_j];
        if (privi.dbName === newDb.dbname) {
          userName = user.accountName;
        }
      }
    }
    t_sub = new SubTask({
      type: 'rds',
      operate: 'newDb',
      desc: "新建数据库 <span class=\"gray\">(Name：" + newDb.dbname + ")</span>",
      options: {
        DBInstanceId: newDb.dbInstanceId,
        DBName: newDb.dbname,
        CharacterSetName: newDb.charset,
        AccountName: userName
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  addUser: function(newUser, rdsData) {
    var t, t_sub;
    t = new Task({
      type: 'rds',
      operate: 'newAccount',
      desc: "为RDS <span class=\"gray\">(Name：" + rdsData.name + ")</span> 新建账号 <span class=\"gray\">(" + newUser.accountName + ")</span>",
      amount: rdsData.amount,
      nodeId: rdsData.id
    });
    t_sub = new SubTask({
      type: 'rds',
      operate: 'newAccount',
      desc: "新建账号 <span class=\"gray\">(Name：" + newUser.accountName + ")</span>",
      options: {
        DBInstanceId: newUser.dbInstanceId,
        AccountName: newUser.accountName,
        DBName: newUser.databasePrivilege[0].dbName,
        AccountPassword: newUser.accountPwd
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  delDb: function(oldDb, rdsData) {
    var t, t_sub;
    t = new Task({
      type: 'rds',
      operate: 'delDb',
      desc: "从RDS <span class=\"gray\">(Name：" + rdsData.name + ")</span> 删除数据库 <span class=\"gray\">(DBName: " + oldDb.DBName + ")</span>",
      amount: rdsData.amount,
      nodeId: rdsData.id
    });
    t_sub = new SubTask({
      type: 'rds',
      operate: 'delDb',
      desc: "删除数据库 <span class=\"gray\">(DBName：" + oldDb.DBName + ")</span>",
      options: {
        DBInstanceId: oldDb.DBInstanceId,
        DBName: oldDb.DBName
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  grant: function(revokes, grants, rdsData) {
    var grant, revoke, t, t_sub, _i, _j, _len, _len1;
    t = new Task({
      type: 'rds',
      operate: 'changeGrant',
      desc: "RDS <span class=\"gray\">(Name：" + rdsData.name + ")</span> 授权更改",
      amount: rdsData.amount,
      nodeId: rdsData.id
    });
    for (_i = 0, _len = revokes.length; _i < _len; _i++) {
      revoke = revokes[_i];
      t_sub = new SubTask({
        type: 'rds',
        operate: 'revoke',
        desc: "撤销用户授权 <span class=\"gray\">(AccountName：" + revoke.account + ", DBName: " + revoke.db + ")</span>",
        options: {
          DBInstanceId: rdsData.DBInstanceId,
          AccountName: revoke.account,
          DBName: revoke.db
        }
      });
      t.subTasks[t_sub.id] = t_sub;
    }
    for (_j = 0, _len1 = grants.length; _j < _len1; _j++) {
      grant = grants[_j];
      t_sub = new SubTask({
        type: 'rds',
        operate: 'grant',
        desc: "添加用户授权 <span class=\"gray\">(AccountName：" + grant.account + ", DBName: " + grant.db + ")</span>",
        options: {
          DBInstanceId: rdsData.DBInstanceId,
          AccountName: grant.account,
          DBName: grant.db,
          AccountPrivilege: grant.accountPrivilege
        }
      });
      t.subTasks[t_sub.id] = t_sub;
    }
    return task.add(t);
  }
};

task.slb = {
  newSlbTask: function() {
    var i, slb, _ref;
    _ref = data.slb;
    for (i in _ref) {
      slb = _ref[i];
      if (Object.size(slb.maps) === 0) {
        task.slb.newSlb(slb);
      }
    }
  },
  addListenerTask: function() {
    var i, slb, _ref;
    _ref = data.slb;
    for (i in _ref) {
      slb = _ref[i];
      if (Object.size(slb.maps) !== 0) {
        task.slb.addListener(slb);
      }
    }
  },
  addServerTask: function() {
    var i, slb, _ref;
    _ref = data.slb;
    for (i in _ref) {
      slb = _ref[i];
      if (Object.size(slb.maps) !== 0) {
        task.slb.addServer(slb);
      }
    }
  },
  delListenerTask: function() {
    var i, slb, _ref;
    _ref = data.slb;
    for (i in _ref) {
      slb = _ref[i];
      if (Object.size(slb.maps) !== 0) {
        task.slb.delListener(slb);
      }
    }
  },
  delServerTask: function() {
    var i, slb, _ref;
    _ref = data.slb;
    for (i in _ref) {
      slb = _ref[i];
      if (Object.size(slb.maps) !== 0) {
        task.slb.delServer(slb);
      }
    }
  },
  setListenerAttributeTask: function() {
    var i, slb, _ref;
    _ref = data.slb;
    for (i in _ref) {
      slb = _ref[i];
      if (Object.size(slb.maps) !== 0) {
        task.slb.setListenerAttribute(slb);
      }
    }
  },
  delServer: function(slb) {
    var len, list, server, serverArr, serverInMap, serverInMapArr, t, t_sub, tlist, tmpObj, _i, _id, _j, _len, _len1, _tid, _tmp, _ttmp;
    serverArr = slb.openList.backendServer;
    serverInMapArr = slb.maps[slb.openList.loadBalancerId].BackendServer;
    tmpObj = {};
    for (_i = 0, _len = serverInMapArr.length; _i < _len; _i++) {
      serverInMap = serverInMapArr[_i];
      for (_j = 0, _len1 = serverArr.length; _j < _len1; _j++) {
        server = serverArr[_j];
        if (server.serverId !== tools.getNodeIdByInstanceId(serverInMap.ServerId)) {
          tmpObj[serverInMap.ServerId] = {};
          tmpObj[serverInMap.ServerId] = 1;
        } else {
          delete tmpObj[serverInMap.ServerId];
          break;
        }
      }
    }
    len = Object.size(tmpObj);
    if (len) {
      list = '[';
      for (_id in tmpObj) {
        _tmp = tmpObj[_id];
        list += "{\"ServerId\":\"" + _id + "\"},";
      }
      list = list.substring(0, list.length - 1);
      list += ']';
      t = new Task({
        type: 'slb',
        operate: 'removeBackendServers',
        desc: "" + slb.name + " 移除" + len + "台后端服务器",
        nodeId: slb.id
      });
      tlist = '';
      for (_tid in tmpObj) {
        _ttmp = tmpObj[_tid];
        tlist += "" + (tools.getNodeIdByInstanceId(_tid)) + " ";
      }
      t_sub = new SubTask({
        type: 'slb',
        operate: 'removeBackendServers',
        desc: "" + slb.name + " 移除 " + len + " 台后端服务器" + tlist,
        options: {
          Action: 'RemoveBackendServers',
          LoadBalancerId: slb.openList.loadBalancerId,
          BackendServers: list
        }
      });
      t.subTasks[t_sub.id] = t_sub;
      task.add(t);
    }
  },
  delListener: function(slb) {
    var listener, listenerArr, listenerPortInMap, listenerPortInMapArr, port, t, t_subDelListener, _i, _j, _len, _len1;
    listenerArr = slb.openList.listener;
    listenerPortInMapArr = slb.maps[slb.openList.loadBalancerId].ListenerPort;
    for (_i = 0, _len = listenerPortInMapArr.length; _i < _len; _i++) {
      listenerPortInMap = listenerPortInMapArr[_i];
      port = listenerPortInMap;
      for (_j = 0, _len1 = listenerArr.length; _j < _len1; _j++) {
        listener = listenerArr[_j];
        if (listenerPortInMap === listener.listenerPort) {
          port = '';
          break;
        }
      }
      if (port) {
        t = new Task({
          type: 'slb',
          operate: 'removeListener',
          desc: "移除SLB " + slb.name + " 的1个监听端口",
          nodeId: slb.id,
          key: port
        });
        t_subDelListener = new SubTask({
          type: 'slb',
          operate: 'removeListener',
          desc: "为SLB " + slb.name + " 前端端口为" + port + " 的监听端口",
          options: {
            Action: 'DeleteLoadBalancerListener',
            LoadBalancerId: slb.openList.loadBalancerId,
            ListenerPort: +port
          }
        });
        t.subTasks[t_subDelListener.id] = t_subDelListener;
        task.add(t);
      }
    }
  },
  setListenerAttribute: function(slb) {
    var isTask, listener, listenerArr, listenerInMap, listenerInMapArr, operate, t, t_options, t_subSetListener, tmpObj, _i, _j, _len, _len1;
    listenerArr = slb.openList.listener;
    listenerInMapArr = slb.maps[slb.openList.loadBalancerId].Listener;
    tmpObj = {};
    for (_i = 0, _len = listenerInMapArr.length; _i < _len; _i++) {
      listenerInMap = listenerInMapArr[_i];
      for (_j = 0, _len1 = listenerArr.length; _j < _len1; _j++) {
        listener = listenerArr[_j];
        if (listener.backendServerPort === listenerInMap.BackendServerPort) {
          isTask = false;
          if (listenerInMap.URI === void 0) {
            if (listener.scheduler !== listenerInMap.Scheduler || listener.persitenceTimeout !== listenerInMap.PersistenceTimeout || listener.healthCheck !== listenerInMap.HealthCheck || listener.healthyThreshold !== listenerInMap.HealthyThreshold || listener.unhealthyThreshold !== listenerInMap.UnhealthyThreshold || listener.connectTimeout !== listenerInMap.ConnectTimeout || listener.connectPort !== listenerInMap.ConnectPort || listener.interval !== listenerInMap.Interval) {
              isTask = true;
              operate = 'setTCPListener';
              t_options = {
                Action: 'SetLoadBalancerTCPListenerAttribute',
                LoadBalancerId: slb.openList.loadBalancerId,
                ListenerPort: +listener.listenerPort,
                Scheduler: listener.scheduler,
                PersistenceTimeout: +listener.persitenceTimeout,
                HealthCheck: listener.healthCheck,
                HealthyThreshold: +listener.healthyThreshold,
                UnhealthyThreshold: +listener.unhealthyThreshold,
                ConnectTimeout: +listener.connectTimeout,
                ConnectPort: +listener.connectPort,
                Interval: +listener.interval
              };
            }
          } else {
            if (listener.xForwardedFor !== listenerInMap.XForwardedFor || listener.scheduler !== listenerInMap.Scheduler || listener.stickySession !== listenerInMap.StickySession || listener.stickySessionType !== listenerInMap.StickySessionapiType || listener.cookieTimeout !== listenerInMap.CookieTimeout || listener.cookie !== listenerInMap.Cookie || listener.healthCheck !== listenerInMap.HealthCheck || listener.domain !== listenerInMap.Domain || listener.uri !== listenerInMap.URI || listener.healthyThreshold !== listenerInMap.HealthyThreshold || listener.unhealthyThreshold !== listenerInMap.UnhealthyThreshold || listener.healthCheckTimeout !== listenerInMap.HealthCheckTimeout || listener.interval !== listenerInMap.Interval) {
              isTask = true;
              operate = 'setHTTPListener';
              t_options = {
                Action: 'SetLoadBalancerHTTPListenerAttribute',
                LoadBalancerId: slb.openList.loadBalancerId,
                ListenerPort: +listener.listenerPort,
                XForwardedFor: listener.xForwardedFor,
                Scheduler: listener.scheduler,
                StickySession: listener.stickySession,
                StickySessionType: listener.stickySessionType,
                CookieTimeout: +listener.cookieTimeout,
                Cookie: listener.cookie,
                HealthCheck: listener.healthCheck,
                Domain: listener.domain,
                URI: listener.uri,
                HealthyThreshold: +listener.healthyThreshold,
                UnhealthyThreshold: +listener.unhealthyThreshold,
                HealthCheckTimeout: +listener.healthCheckTimeout,
                Interval: +listener.interval
              };
            }
          }
          if (isTask) {
            t = new Task({
              type: 'slb',
              operate: operate,
              desc: "修改SLB " + slb.name + " 的 " + listener.protocol + " 前端" + listener.listenerPort + " 端口的配置",
              nodeId: slb.id,
              key: listener.listenerPort
            });
            t_subSetListener = new SubTask({
              type: 'slb',
              operate: operate,
              desc: "修改SLB " + slb.name + " 的 " + listener.protocol + " 前端" + listener.listenerPort + " 端口的配置",
              options: t_options
            });
            t.subTasks[t_subSetListener.id] = t_subSetListener;
            task.add(t);
            break;
          }
        }
      }
    }
  },
  addListener: function(slb) {
    var len, listener, listenerArr, listenerInMap, listenerInMapArr, operate, t, t_options, t_subNewListener, tmpObj, _backendServerPort, _i, _j, _len, _len1, _obj;
    listenerArr = slb.openList.listener;
    listenerInMapArr = slb.maps[slb.openList.loadBalancerId].Listener;
    tmpObj = {};
    for (_i = 0, _len = listenerArr.length; _i < _len; _i++) {
      listener = listenerArr[_i];
      for (_j = 0, _len1 = listenerInMapArr.length; _j < _len1; _j++) {
        listenerInMap = listenerInMapArr[_j];
        if (listener.backendServerPort !== listenerInMap.BackendServerPort) {
          tmpObj[listener.backendServerPort] = {};
          tmpObj[listener.backendServerPort] = listener;
        } else {
          delete tmpObj[listener.backendServerPort];
          break;
        }
      }
    }
    len = Object.size(tmpObj);
    if (len) {
      for (_backendServerPort in tmpObj) {
        _obj = tmpObj[_backendServerPort];
        if (_obj.protocol === 'tcp') {
          operate = 'addTCPListener';
          t_options = {
            Action: 'CreateLoadBalancerTCPListener',
            LoadBalancerId: slb.openList.loadBalancerId,
            ListenerPort: Number(_obj.listenerPort),
            BackendServerPort: Number(_backendServerPort),
            ListenerStatus: 'active',
            Scheduler: _obj.scheduler,
            PersistenceTimeout: Number(_obj.persitenceTimeout),
            HealthCheck: _obj.healthCheck,
            ConnectTimeout: Number(_obj.connectTimeout),
            Interval: _obj.interval
          };
        } else {
          operate = 'addHTTPListener';
          t_options = {
            Action: 'CreateLoadBalancerHTTPListener',
            LoadBalancerId: slb.openList.loadBalancerId,
            ListenerPort: Number(_obj.listenerPort),
            BackendServerPort: Number(_backendServerPort),
            ListenerStatus: 'active',
            XForwardedFor: _obj.xForwardedFor,
            Scheduler: _obj.scheduler,
            StickySession: _obj.stickySession,
            StickySessionType: 'insert',
            CookieTimeout: Number(_obj.cookieTimeout),
            Cookie: '',
            HealthCheck: _obj.healthCheck,
            Domain: _obj.domain,
            URI: _obj.uri,
            HealthyThreshold: Number(_obj.healthyThreshold),
            UnhealthyThreshold: Number(_obj.unhealthyThreshold),
            HealthCheckTimeout: Number(_obj.healthCheckTimeout),
            Interval: Number(_obj.interval)
          };
        }
        t = new Task({
          type: 'slb',
          operate: operate,
          desc: "为SLB " + slb.name + " 创建新 " + _obj.protocol + " 端口",
          nodeId: slb.id,
          key: _obj.listenerPort
        });
        t_subNewListener = new SubTask({
          type: 'slb',
          operate: operate,
          desc: "为SLB " + slb.name + " 创建新 " + _obj.protocol + " 端口,前端端口:" + _obj.listenerPort + " 后端端口:" + _backendServerPort,
          options: t_options
        });
        t.subTasks[t_subNewListener.id] = t_subNewListener;
        task.add(t);
      }
    }
  },
  addServer: function(slb) {
    var len, list, sarr, server, serverArr, serverInMap, serverInMapArr, sid, t, t_sub, tlist, tmpObj, _i, _id, _j, _k, _len, _len1, _len2, _s, _tid, _tweight, _weight;
    serverArr = slb.openList.backendServer;
    serverInMapArr = slb.maps[slb.openList.loadBalancerId].BackendServer;
    tmpObj = {};
    for (_i = 0, _len = serverArr.length; _i < _len; _i++) {
      server = serverArr[_i];
      for (_j = 0, _len1 = serverInMapArr.length; _j < _len1; _j++) {
        serverInMap = serverInMapArr[_j];
        if (server.serverId !== tools.getNodeIdByInstanceId(serverInMap.ServerId)) {
          tmpObj[server.serverId] = {};
          tmpObj[server.serverId] = server.weight;
        } else {
          delete tmpObj[server.serverId];
          break;
        }
      }
    }
    len = Object.size(tmpObj);
    if (len) {
      list = '[';
      for (_id in tmpObj) {
        _weight = tmpObj[_id];
        sarr = layer.find("#" + _id)[0].data.openLists;
        for (_k = 0, _len2 = sarr.length; _k < _len2; _k++) {
          _s = sarr[_k];
          sid = _s.instanceId;
          list += "{\"ServerId\":\"" + sid + "\",\"Weight\":\"" + _weight + "\"},";
        }
      }
      list = list.substring(0, list.length - 1);
      list += ']';
      t = new Task({
        type: 'slb',
        operate: 'addBackendServers',
        desc: "" + slb.name + " 添加" + len + "台后端服务器",
        nodeId: slb.id
      });
      tlist = '';
      for (_tid in tmpObj) {
        _tweight = tmpObj[_tid];
        tlist += "" + (tools.getNodeIdByInstanceId(_tid)) + " ";
      }
      t_sub = new SubTask({
        type: 'slb',
        operate: 'addBackendServers',
        desc: "" + slb.name + " 添加 " + len + " 台后端服务器" + tlist,
        options: {
          Action: 'AddBackendServers',
          LoadBalancerId: slb.openList.loadBalancerId,
          BackendServers: list
        }
      });
      t.subTasks[t_sub.id] = t_sub;
      task.add(t);
    }
  },
  newSlb: function(slb) {
    var t, t_sub;
    t = new Task({
      type: 'slb',
      operate: 'new',
      desc: "购买SLB <span class=\"gray\">(Name：" + slb.name + ", 数量：1台)</span>",
      nodeId: slb.id
    });
    t_sub = new SubTask({
      type: 'slb',
      operate: 'buy',
      desc: "购买一台SLB<span class=\"gray\">（Name：" + slb.name + "）</span>",
      optiins: {
        name: slb.name
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  activeListener: function(listenerId) {},
  inactiveListener: function(listenerId) {},
  addRds: function(ecsId) {},
  delRds: function(ecsId) {}
};

task.oss = {
  newTasks: function() {
    var i, oss, _ref;
    _ref = data.oss;
    for (i in _ref) {
      oss = _ref[i];
      if (!tools.isMapped(oss)) {
        task.oss["new"](oss);
      }
    }
  },
  delTasks: function() {
    var name, nodeId, _ref;
    _ref = task.queue_del_oss;
    for (name in _ref) {
      nodeId = _ref[name];
      task.oss.del({
        Name: name,
        NodeId: nodeId
      });
    }
  },
  pushDel: function(ossNode) {
    task.queue_del_oss[ossNode.data.id] = ossNode.getId();
  },
  "new": function(ossData) {
    var t, t_sub;
    t = new Task({
      type: 'oss',
      operate: 'new',
      nodeId: ossData.id,
      desc: "新建OSS Bucket <span class=\"gray\">(Name：" + ossData.name + ")</span>",
      nodeId: ossData.id
    });
    t_sub = new SubTask({
      type: 'oss',
      operate: 'new',
      nodeId: ossData.id,
      desc: "新建OSS Bucket <span class=\"gray\">(Name：" + ossData.name + ")</span>",
      options: {
        Name: ossData.name
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    task.add(t);
  },
  del: function(_options) {
    var t, t_sub;
    t = new Task({
      type: 'oss',
      operate: 'del',
      desc: "删除OSS Bucket <span class=\"gray\">(Name：" + _options.Name + ")</span>",
      nodeId: _options.NodeId
    });
    t_sub = new SubTask({
      type: 'oss',
      operate: 'del',
      desc: "删除OSS Bucket <span class=\"gray\">(Name：" + _options.Name + ")</span>",
      options: {
        Name: _options.Name
      }
    });
    t.subTasks[t_sub.id] = t_sub;
    return task.add(t);
  }
};

task.help = {
  getTaskById: function(id) {
    var _i, _len, _ref;
    _ref = task.queue;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      if (task.id === id) {
        return task;
      }
    }
    return null;
  },
  getChangedTaskByNode: function(node) {
    var result, _new, _newInstanceKey, _old;
    result = {};
    _old = node.data.openList;
    _new = node.data;
    _newInstanceKey = _new.cpu + '-' + (+_new.memory / 1024);
    if (def.instanceType[_newInstanceKey] !== _old.instanceType) {
      result.instanceType = def.instanceType[_newInstanceKey];
    }
    if (+_new.bandWdith !== +_old.internetMaxBandwidthOut) {
      result.internetMaxBandwidthOut = +_new.bandWidth;
    }
    if (_new.osVal !== _old.imageId) {
      result.imageId = _new.osVal;
    }
    result.disksNew = _new.disks.subtract(_old.disks);
    result.disksRemove = _old.disks.subtract(_new.disks);
    return result;
  },
  getSubTaskById: function(subId) {
    var i, j, _i, _len, _ref, _ref1, _subTask, _task;
    _ref = task.queue;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      _task = _ref[i];
      _ref1 = _task.subTasks;
      for (j in _ref1) {
        _subTask = _ref1[j];
        if (_subTask.id === subId) {
          return _subTask;
        }
      }
    }
    return null;
  },
  removeTask: function(id) {
    var t;
    t = task.queue.find(function(n) {
      return n.id === id;
    });
    switch (t.operate) {
      case 'del':
        switch (t.type) {
          case 'ecs':
            delete task.queue_del_ecs[t.depend];
            break;
          case 'rds':
            delete task.queue_del_rds[t.depend];
            break;
          case 'slb':
            delete task.queue_del_slb[t.depend];
            break;
          case 'iso':
            delete task.queue_del_iso[t.key];
            domFunc.revertCustomImage(t.key);
            break;
          case 'snapshot':
            delete task.queue_del_snapshot[t.key];
            domFunc.revertSnapshotDisk(t.key);
        }
        break;
      case 'modifyAttr':
        switch (t.type) {
          case 'ecs':
            delete task.queue_pwd_ecs[t.depend];
        }
        break;
      case 'new':
        switch (t.type) {
          case 'iso':
            delete task.queue_add_image[t.depend];
            break;
          case 'snapshot':
            delete task.queue_add_snapshot[t.depend];
        }
    }
    task.queue.remove(t);
    $("#" + id + ", .parent-" + id).remove();
    if (task.queue.length === 0) {
      task.isProcessing = false;
      $('#preview .loading').hide();
      $('#previewBtn .comListNum, #preview .comListNum').hide();
    } else {
      $('#previewBtn .comListNum, #preview .comListNum').html(task.queue.length).show();
    }
  }
};
